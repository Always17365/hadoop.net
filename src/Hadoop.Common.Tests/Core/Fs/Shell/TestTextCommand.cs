using System.IO;
using Hadoop.Common.Core.Conf;
using Hadoop.Common.Core.Fs.Shell;
using Org.Apache.Hadoop.FS.Shell;
using Org.Apache.Hadoop.IO;
using Path = Org.Apache.Hadoop.FS.Path;

namespace Hadoop.Common.Tests.Core.Fs.Shell
{
	/// <summary>
	/// This class tests the logic for displaying the binary formats supported
	/// by the Text command.
	/// </summary>
	public class TestTextCommand
	{
		private static readonly string TestRootDir = Runtime.GetProperty("test.build.data"
			, "build/test/data/") + "/testText";

		private static readonly string AvroFilename = new Path(TestRootDir, "weather.avro").ToUri().GetPath();

		private static readonly string TextFilename = new Path(TestRootDir, "testtextfile.txt"
			).ToUri().GetPath();

		/// <summary>Tests whether binary Avro data files are displayed correctly.</summary>
		/// <exception cref="System.Exception"/>
		public virtual void TestDisplayForAvroFiles()
		{
			string expectedOutput = "{\"station\":\"011990-99999\",\"time\":-619524000000,\"temp\":0}"
				 + Runtime.GetProperty("line.separator") + "{\"station\":\"011990-99999\",\"time\":-619506000000,\"temp\":22}"
				 + Runtime.GetProperty("line.separator") + "{\"station\":\"011990-99999\",\"time\":-619484400000,\"temp\":-11}"
				 + Runtime.GetProperty("line.separator") + "{\"station\":\"012650-99999\",\"time\":-655531200000,\"temp\":111}"
				 + Runtime.GetProperty("line.separator") + "{\"station\":\"012650-99999\",\"time\":-655509600000,\"temp\":78}"
				 + Runtime.GetProperty("line.separator");
			string output = ReadUsingTextCommand(AvroFilename, GenerateWeatherAvroBinaryData(
				));
			Assert.Equal(expectedOutput, output);
		}

		/// <summary>Tests that a zero-length file is displayed correctly.</summary>
		/// <exception cref="System.Exception"/>
		public virtual void TestEmptyTextFil()
		{
			byte[] emptyContents = {  };
			string output = ReadUsingTextCommand(TextFilename, emptyContents);
			Assert.True(string.Empty.Equals(output));
		}

		/// <summary>Tests that a one-byte file is displayed correctly.</summary>
		/// <exception cref="System.Exception"/>
		public virtual void TestOneByteTextFil()
		{
			byte[] oneByteContents = { (byte)('x') };
			string output = ReadUsingTextCommand(TextFilename, oneByteContents);
			Assert.True(Runtime.GetStringForBytes(oneByteContents).
				Equals(output));
		}

		/// <summary>Tests that a one-byte file is displayed correctly.</summary>
		/// <exception cref="System.Exception"/>
		public virtual void TestTwoByteTextFil()
		{
			byte[] twoByteContents = { (byte)('x'), (byte)('y') };
			string output = ReadUsingTextCommand(TextFilename, twoByteContents);
			Assert.True(Runtime.GetStringForBytes(twoByteContents).
				Equals(output));
		}

		// Create a file on the local file system and read it using
		// the Display.Text class.
		/// <exception cref="System.Exception"/>
		private string ReadUsingTextCommand(string fileName, byte[] fileContents)
		{
			CreateFile(fileName, fileContents);
			// Prepare and call the Text command's protected getInputStream method
			// using reflection.
			Configuration conf = new Configuration();
			URI localPath = new URI(fileName);
			PathData pathData = new PathData(localPath, conf);
			Display.Text text = new _Text_111();
			text.SetConf(conf);
			InputStream stream = (InputStream)text.GetInputStream(pathData);
			return InputStreamToString(stream);
		}

		private sealed class _Text_111 : Display.Text
		{
		    /// <exception cref="System.IO.IOException"/>
			protected internal override InputStream GetInputStream(PathData item)
			{
				return base.GetInputStream(item);
			}
		}

		/// <exception cref="System.IO.IOException"/>
		private string InputStreamToString(InputStream stream)
		{
			StringWriter writer = new StringWriter();
			IOUtils.Copy(stream, writer);
			return writer.ToString();
		}

		/// <exception cref="System.IO.IOException"/>
		private void CreateFile(string fileName, byte[] contents)
		{
			(new FilePath(TestRootDir)).Mkdir();
			FilePath file = new FilePath(fileName);
			file.CreateNewFile();
			FileOutputStream stream = new FileOutputStream(file);
			stream.Write(contents);
			stream.Close();
		}

		private byte[] GenerateWeatherAvroBinaryData()
		{
			// The contents of a simple binary Avro file with weather records.
			byte[] contents = { 0x4f, 0x62, 0x6a, 0x1, 0x4, 0x14, 0x61, 0x76, 0x72, 0x6f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x63, 0x8, 0x6e, 0x75, 0x6c, 0x6c, 0x16, 0x61, 0x76, 0x72, 0x6f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0xf2, 0x2, 0x7b, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x2c, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x57, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x22, 0x2c, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x65, 0x73, 0x74, 0x22, 0x2c, 0x22, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x3a, 0x5b, 0x7b, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x7d, 0x2c, 0x7b, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x6c, 0x6f, 0x6e, 0x67, 0x22, 0x7d, 0x2c, 0x7b, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x22, 0x74, 0x65, 0x6d, 0x70, 0x22, 0x2c, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x22, 0x69, 0x6e, 0x74, 0x22, 0x7d, 0x5d, 0x2c, 0x22, 0x64, 0x6f, 0x63, 0x22, 0x3a, 0x22, 0x41, 0x20, 0x77, 0x65, 0x61, 0x74, 0x68, 0x65, 0x72, 0x20, 0x72, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x22, 0x7d, 0x0, 0xb0, 0x81, 0xb3, 0xc4, 0xa, 0xc, 0xf6, 0x62, 0xfa, 0xc9, 0x38, 0xfd, 0x7e, 0x52, 0x0, 0xa7, 0xa, 0xcc, 0x1, 0x18, 0x30, 0x31, 0x31, 0x39, 0x39, 0x30, 0x2d, 0x39, 0x39, 0x39, 0x39, 0x39, 0xff, 0xa3, 0x90, 0xe8, 0x87, 0x24, 0x0, 0x18, 0x30, 0x31, 0x31, 0x39, 0x39, 0x30, 0x2d, 0x39, 0x39, 0x39, 0x39, 0x39, 0xff, 0x81, 0xfb, 0xd6, 0x87, 0x24, 0x2c, 0x18, 0x30, 0x31, 0x31, 0x39, 0x39, 0x30, 0x2d, 0x39, 0x39, 0x39, 0x39, 0x39, 0xff, 0xa5, 0xae, 0xc2, 0x87, 0x24, 0x15, 0x18, 0x30, 0x31, 0x32, 0x36, 0x35, 0x30, 0x2d, 0x39, 0x39, 0x39, 0x39, 0x39, 0xff, 0xb7, 0xa2, 0x8b, 0x94, 0x26, 0xde, 0x1, 0x18, 0x30, 0x31, 0x32, 0x36, 0x35, 0x30, 0x2d, 0x39, 0x39, 0x39, 0x39, 0x39, 0xff, 0xdb, 0xd5, 0xf6, 0x93, 0x26, 0x9c, 0x1, 0xb0, 0x81, 0xb3, 0xc4, 0xa, 0xc, 0xf6, 0x62, 0xfa, 0xc9, 0x38, 0xfd, 0x7e, 0x52, 0x0, 0xa7 };
			return contents;
		}
	}
}
