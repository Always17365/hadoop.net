using System;
using System.IO;
using System.Text;
using Sharpen;

namespace Org.Apache.Hadoop.Mapred
{
	internal class JVMId
	{
		internal bool isMap;

		internal readonly JobID jobId;

		private long jvmId;

		private const string Jvm = "jvm";

		private const char Separator = '_';

		private static NumberFormat idFormat = NumberFormat.GetInstance();

		static JVMId()
		{
			idFormat.SetGroupingUsed(false);
			idFormat.SetMinimumIntegerDigits(6);
		}

		public JVMId(JobID jobId, bool isMap, long id)
		{
			this.jvmId = id;
			this.isMap = isMap;
			this.jobId = jobId;
		}

		public JVMId(string jtIdentifier, int jobId, bool isMap, long id)
			: this(new JobID(jtIdentifier, jobId), isMap, id)
		{
		}

		public JVMId()
		{
			jobId = new JobID();
		}

		public virtual bool IsMapJVM()
		{
			return isMap;
		}

		public virtual JobID GetJobId()
		{
			return jobId;
		}

		public override bool Equals(object o)
		{
			// Generated by IntelliJ IDEA 13.1.
			if (this == o)
			{
				return true;
			}
			if (o == null || GetType() != o.GetType())
			{
				return false;
			}
			Org.Apache.Hadoop.Mapred.JVMId jvmId1 = (Org.Apache.Hadoop.Mapred.JVMId)o;
			if (isMap != jvmId1.isMap)
			{
				return false;
			}
			if (jvmId != jvmId1.jvmId)
			{
				return false;
			}
			if (!jobId.Equals(jvmId1.jobId))
			{
				return false;
			}
			return true;
		}

		public override int GetHashCode()
		{
			// Generated by IntelliJ IDEA 13.1.
			int result = (isMap ? 1 : 0);
			result = 31 * result + jobId.GetHashCode();
			result = 31 * result + (int)(jvmId ^ ((long)(((ulong)jvmId) >> 32)));
			return result;
		}

		/// <summary>Compare TaskInProgressIds by first jobIds, then by tip numbers.</summary>
		/// <remarks>
		/// Compare TaskInProgressIds by first jobIds, then by tip numbers. Reduces are
		/// defined as greater then maps.
		/// </remarks>
		public virtual int CompareTo(Org.Apache.Hadoop.Mapred.JVMId that)
		{
			int jobComp = this.jobId.CompareTo(that.jobId);
			if (jobComp == 0)
			{
				if (this.isMap == that.isMap)
				{
					return Sharpen.Extensions.ValueOf(this.jvmId).CompareTo(that.jvmId);
				}
				else
				{
					return this.isMap ? -1 : 1;
				}
			}
			else
			{
				return jobComp;
			}
		}

		public override string ToString()
		{
			return AppendTo(new StringBuilder(Jvm)).ToString();
		}

		/// <summary>
		/// This method does NOT override org.apache.hadoop.mapred.ID to accept 64-bit
		/// ID to support work-preserving RM restart.
		/// </summary>
		/// <returns>64-bit JVM id.</returns>
		public virtual long GetId()
		{
			return jvmId;
		}

		/// <summary>Add the unique id to the given StringBuilder.</summary>
		/// <param name="builder">the builder to append to</param>
		/// <returns>the passed in builder.</returns>
		protected internal virtual StringBuilder AppendTo(StringBuilder builder)
		{
			return jobId.AppendTo(builder).Append(Separator).Append(isMap ? 'm' : 'r').Append
				(Separator).Append(idFormat.Format(jvmId));
		}

		/// <exception cref="System.IO.IOException"/>
		public virtual void ReadFields(DataInput @in)
		{
			this.jvmId = @in.ReadLong();
			this.jobId.ReadFields(@in);
			this.isMap = @in.ReadBoolean();
		}

		/// <exception cref="System.IO.IOException"/>
		public virtual void Write(DataOutput @out)
		{
			@out.WriteLong(jvmId);
			jobId.Write(@out);
			@out.WriteBoolean(isMap);
		}

		/// <summary>Construct a JVMId object from given string</summary>
		/// <returns>constructed JVMId object or null if the given String is null</returns>
		/// <exception cref="System.ArgumentException">if the given string is malformed</exception>
		public static Org.Apache.Hadoop.Mapred.JVMId ForName(string str)
		{
			if (str == null)
			{
				return null;
			}
			try
			{
				string[] parts = str.Split("_");
				if (parts.Length == 5)
				{
					if (parts[0].Equals(Jvm))
					{
						bool isMap = false;
						if (parts[3].Equals("m"))
						{
							isMap = true;
						}
						else
						{
							if (parts[3].Equals("r"))
							{
								isMap = false;
							}
							else
							{
								throw new Exception();
							}
						}
						return new Org.Apache.Hadoop.Mapred.JVMId(parts[1], System.Convert.ToInt32(parts[
							2]), isMap, System.Convert.ToInt32(parts[4]));
					}
				}
			}
			catch (Exception)
			{
			}
			//fall below
			throw new ArgumentException("TaskId string : " + str + " is not properly formed");
		}
	}
}
