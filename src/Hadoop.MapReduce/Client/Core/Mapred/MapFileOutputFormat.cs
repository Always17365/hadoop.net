using System;
using Org.Apache.Hadoop.Conf;
using Org.Apache.Hadoop.FS;
using Org.Apache.Hadoop.IO;
using Org.Apache.Hadoop.IO.Compress;
using Org.Apache.Hadoop.Mapreduce.Lib.Output;
using Org.Apache.Hadoop.Util;
using Sharpen;

namespace Org.Apache.Hadoop.Mapred
{
	/// <summary>
	/// An
	/// <see cref="OutputFormat{K, V}"/>
	/// that writes
	/// <see cref="Org.Apache.Hadoop.IO.MapFile"/>
	/// s.
	/// </summary>
	public class MapFileOutputFormat : FileOutputFormat<WritableComparable, Writable>
	{
		/// <exception cref="System.IO.IOException"/>
		public override RecordWriter<WritableComparable, Writable> GetRecordWriter(FileSystem
			 ignored, JobConf job, string name, Progressable progress)
		{
			// get the path of the temporary output file 
			Path file = FileOutputFormat.GetTaskOutputPath(job, name);
			FileSystem fs = file.GetFileSystem(job);
			CompressionCodec codec = null;
			SequenceFile.CompressionType compressionType = SequenceFile.CompressionType.None;
			if (GetCompressOutput(job))
			{
				// find the kind of compression to do
				compressionType = SequenceFileOutputFormat.GetOutputCompressionType(job);
				// find the right codec
				Type codecClass = GetOutputCompressorClass(job, typeof(DefaultCodec));
				codec = ReflectionUtils.NewInstance(codecClass, job);
			}
			// ignore the progress parameter, since MapFile is local
			MapFile.Writer @out = new MapFile.Writer(job, fs, file.ToString(), job.GetOutputKeyClass
				().AsSubclass<WritableComparable>(), job.GetOutputValueClass().AsSubclass<Writable
				>(), compressionType, codec, progress);
			return new _RecordWriter_72(@out);
		}

		private sealed class _RecordWriter_72 : RecordWriter<WritableComparable, Writable
			>
		{
			public _RecordWriter_72(MapFile.Writer @out)
			{
				this.@out = @out;
			}

			/// <exception cref="System.IO.IOException"/>
			public void Write(WritableComparable key, Writable value)
			{
				@out.Append(key, value);
			}

			/// <exception cref="System.IO.IOException"/>
			public void Close(Reporter reporter)
			{
				@out.Close();
			}

			private readonly MapFile.Writer @out;
		}

		/// <summary>Open the output generated by this format.</summary>
		/// <exception cref="System.IO.IOException"/>
		public static MapFile.Reader[] GetReaders(FileSystem ignored, Path dir, Configuration
			 conf)
		{
			return MapFileOutputFormat.GetReaders(dir, conf);
		}

		/// <summary>Get an entry from output generated by this class.</summary>
		/// <exception cref="System.IO.IOException"/>
		public static Writable GetEntry<K, V>(MapFile.Reader[] readers, Partitioner<K, V>
			 partitioner, K key, V value)
			where K : WritableComparable
			where V : Writable
		{
			int part = partitioner.GetPartition(key, value, readers.Length);
			return readers[part].Get(key, value);
		}
	}
}
