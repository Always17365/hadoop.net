using System.Text;
using Org.Apache.Hadoop.Classification;
using Sharpen;

namespace Org.Apache.Hadoop.Yarn.Api.Records
{
	/// <summary>
	/// <p><code>ApplicationAttemptId</code> denotes the particular <em>attempt</em>
	/// of an <code>ApplicationMaster</code> for a given
	/// <see cref="ApplicationId"/>
	/// .</p>
	/// <p>Multiple attempts might be needed to run an application to completion due
	/// to temporal failures of the <code>ApplicationMaster</code> such as hardware
	/// failures, connectivity issues etc. on the node on which it was scheduled.</p>
	/// </summary>
	public abstract class ApplicationAttemptId : Comparable<ApplicationAttemptId>
	{
		[InterfaceAudience.Private]
		[InterfaceStability.Unstable]
		public const string appAttemptIdStrPrefix = "appattempt_";

		[InterfaceAudience.Private]
		[InterfaceStability.Unstable]
		public static ApplicationAttemptId NewInstance(ApplicationId appId, int attemptId
			)
		{
			ApplicationAttemptId appAttemptId = Org.Apache.Hadoop.Yarn.Util.Records.NewRecord
				<ApplicationAttemptId>();
			appAttemptId.SetApplicationId(appId);
			appAttemptId.SetAttemptId(attemptId);
			appAttemptId.Build();
			return appAttemptId;
		}

		/// <summary>Get the <code>ApplicationId</code> of the <code>ApplicationAttempId</code>.
		/// 	</summary>
		/// <returns><code>ApplicationId</code> of the <code>ApplicationAttempId</code></returns>
		[InterfaceAudience.Public]
		[InterfaceStability.Stable]
		public abstract ApplicationId GetApplicationId();

		[InterfaceAudience.Private]
		[InterfaceStability.Unstable]
		protected internal abstract void SetApplicationId(ApplicationId appID);

		/// <summary>Get the <code>attempt id</code> of the <code>Application</code>.</summary>
		/// <returns><code>attempt id</code> of the <code>Application</code></returns>
		[InterfaceAudience.Public]
		[InterfaceStability.Stable]
		public abstract int GetAttemptId();

		[InterfaceAudience.Private]
		[InterfaceStability.Unstable]
		protected internal abstract void SetAttemptId(int attemptId);

		private sealed class _ThreadLocal_83 : ThreadLocal<NumberFormat>
		{
			public _ThreadLocal_83()
			{
			}

			protected override NumberFormat InitialValue()
			{
				NumberFormat fmt = NumberFormat.GetInstance();
				fmt.SetGroupingUsed(false);
				fmt.SetMinimumIntegerDigits(6);
				return fmt;
			}
		}

		internal static readonly ThreadLocal<NumberFormat> attemptIdFormat = new _ThreadLocal_83
			();

		public override int GetHashCode()
		{
			// Generated by eclipse.
			int prime = 347671;
			int result = 5501;
			ApplicationId appId = GetApplicationId();
			result = prime * result + appId.GetHashCode();
			result = prime * result + GetAttemptId();
			return result;
		}

		public override bool Equals(object obj)
		{
			if (this == obj)
			{
				return true;
			}
			if (obj == null)
			{
				return false;
			}
			if (GetType() != obj.GetType())
			{
				return false;
			}
			ApplicationAttemptId other = (ApplicationAttemptId)obj;
			if (!this.GetApplicationId().Equals(other.GetApplicationId()))
			{
				return false;
			}
			if (this.GetAttemptId() != other.GetAttemptId())
			{
				return false;
			}
			return true;
		}

		public virtual int CompareTo(ApplicationAttemptId other)
		{
			int compareAppIds = this.GetApplicationId().CompareTo(other.GetApplicationId());
			if (compareAppIds == 0)
			{
				return this.GetAttemptId() - other.GetAttemptId();
			}
			else
			{
				return compareAppIds;
			}
		}

		public override string ToString()
		{
			StringBuilder sb = new StringBuilder(appAttemptIdStrPrefix);
			sb.Append(this.GetApplicationId().GetClusterTimestamp()).Append("_");
			sb.Append(ApplicationId.appIdFormat.Get().Format(this.GetApplicationId().GetId())
				);
			sb.Append("_").Append(attemptIdFormat.Get().Format(GetAttemptId()));
			return sb.ToString();
		}

		protected internal abstract void Build();
	}
}
