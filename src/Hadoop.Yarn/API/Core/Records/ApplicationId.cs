using Org.Apache.Hadoop.Classification;
using Sharpen;

namespace Org.Apache.Hadoop.Yarn.Api.Records
{
	/// <summary>
	/// <p><code>ApplicationId</code> represents the <em>globally unique</em>
	/// identifier for an application.</p>
	/// <p>The globally unique nature of the identifier is achieved by using the
	/// <em>cluster timestamp</em> i.e.
	/// </summary>
	/// <remarks>
	/// <p><code>ApplicationId</code> represents the <em>globally unique</em>
	/// identifier for an application.</p>
	/// <p>The globally unique nature of the identifier is achieved by using the
	/// <em>cluster timestamp</em> i.e. start-time of the
	/// <code>ResourceManager</code> along with a monotonically increasing counter
	/// for the application.</p>
	/// </remarks>
	public abstract class ApplicationId : Comparable<ApplicationId>
	{
		[InterfaceAudience.Private]
		[InterfaceStability.Unstable]
		public const string appIdStrPrefix = "application_";

		[InterfaceAudience.Private]
		[InterfaceStability.Unstable]
		public static ApplicationId NewInstance(long clusterTimestamp, int id)
		{
			ApplicationId appId = Org.Apache.Hadoop.Yarn.Util.Records.NewRecord<ApplicationId
				>();
			appId.SetClusterTimestamp(clusterTimestamp);
			appId.SetId(id);
			appId.Build();
			return appId;
		}

		/// <summary>
		/// Get the short integer identifier of the <code>ApplicationId</code>
		/// which is unique for all applications started by a particular instance
		/// of the <code>ResourceManager</code>.
		/// </summary>
		/// <returns>short integer identifier of the <code>ApplicationId</code></returns>
		[InterfaceAudience.Public]
		[InterfaceStability.Stable]
		public abstract int GetId();

		[InterfaceAudience.Private]
		[InterfaceStability.Unstable]
		protected internal abstract void SetId(int id);

		/// <summary>
		/// Get the <em>start time</em> of the <code>ResourceManager</code> which is
		/// used to generate globally unique <code>ApplicationId</code>.
		/// </summary>
		/// <returns><em>start time</em> of the <code>ResourceManager</code></returns>
		[InterfaceAudience.Public]
		[InterfaceStability.Stable]
		public abstract long GetClusterTimestamp();

		[InterfaceAudience.Private]
		[InterfaceStability.Unstable]
		protected internal abstract void SetClusterTimestamp(long clusterTimestamp);

		protected internal abstract void Build();

		private sealed class _ThreadLocal_86 : ThreadLocal<NumberFormat>
		{
			public _ThreadLocal_86()
			{
			}

			protected override NumberFormat InitialValue()
			{
				NumberFormat fmt = NumberFormat.GetInstance();
				fmt.SetGroupingUsed(false);
				fmt.SetMinimumIntegerDigits(4);
				return fmt;
			}
		}

		internal static readonly ThreadLocal<NumberFormat> appIdFormat = new _ThreadLocal_86
			();

		public virtual int CompareTo(ApplicationId other)
		{
			if (this.GetClusterTimestamp() - other.GetClusterTimestamp() == 0)
			{
				return this.GetId() - other.GetId();
			}
			else
			{
				return this.GetClusterTimestamp() > other.GetClusterTimestamp() ? 1 : this.GetClusterTimestamp
					() < other.GetClusterTimestamp() ? -1 : 0;
			}
		}

		public override string ToString()
		{
			return appIdStrPrefix + this.GetClusterTimestamp() + "_" + appIdFormat.Get().Format
				(GetId());
		}

		public override int GetHashCode()
		{
			// Generated by eclipse.
			int prime = 371237;
			int result = 6521;
			long clusterTimestamp = GetClusterTimestamp();
			result = prime * result + (int)(clusterTimestamp ^ ((long)(((ulong)clusterTimestamp
				) >> 32)));
			result = prime * result + GetId();
			return result;
		}

		public override bool Equals(object obj)
		{
			if (this == obj)
			{
				return true;
			}
			if (obj == null)
			{
				return false;
			}
			if (GetType() != obj.GetType())
			{
				return false;
			}
			ApplicationId other = (ApplicationId)obj;
			if (this.GetClusterTimestamp() != other.GetClusterTimestamp())
			{
				return false;
			}
			if (this.GetId() != other.GetId())
			{
				return false;
			}
			return true;
		}
	}
}
