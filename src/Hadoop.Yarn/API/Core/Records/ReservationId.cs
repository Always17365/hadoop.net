using System.IO;
using Org.Apache.Hadoop.Classification;
using Sharpen;

namespace Org.Apache.Hadoop.Yarn.Api.Records
{
	/// <summary>
	/// <p>
	/// <see cref="ReservationId"/>
	/// represents the <em>globally unique</em> identifier for
	/// a reservation.
	/// </p>
	/// <p>
	/// The globally unique nature of the identifier is achieved by using the
	/// <em>cluster timestamp</em> i.e. start-time of the
	/// <c>ResourceManager</c>
	/// along with a monotonically increasing counter for the reservation.
	/// </p>
	/// </summary>
	public abstract class ReservationId : Comparable<ReservationId>
	{
		[InterfaceAudience.Private]
		[InterfaceStability.Unstable]
		public const string reserveIdStrPrefix = "reservation_";

		protected internal long clusterTimestamp;

		protected internal long id;

		[InterfaceAudience.Private]
		[InterfaceStability.Unstable]
		public static ReservationId NewInstance(long clusterTimestamp, long id)
		{
			ReservationId reservationId = Org.Apache.Hadoop.Yarn.Util.Records.NewRecord<ReservationId
				>();
			reservationId.SetClusterTimestamp(clusterTimestamp);
			reservationId.SetId(id);
			reservationId.Build();
			return reservationId;
		}

		/// <summary>
		/// Get the long identifier of the
		/// <see cref="ReservationId"/>
		/// which is unique for
		/// all Reservations started by a particular instance of the
		/// <c>ResourceManager</c>
		/// .
		/// </summary>
		/// <returns>
		/// long identifier of the
		/// <see cref="ReservationId"/>
		/// </returns>
		[InterfaceAudience.Public]
		[InterfaceStability.Unstable]
		public abstract long GetId();

		[InterfaceAudience.Private]
		[InterfaceStability.Unstable]
		protected internal abstract void SetId(long id);

		/// <summary>
		/// Get the <em>start time</em> of the
		/// <c>ResourceManager</c>
		/// which is used to
		/// generate globally unique
		/// <see cref="ReservationId"/>
		/// .
		/// </summary>
		/// <returns>
		/// <em>start time</em> of the
		/// <c>ResourceManager</c>
		/// </returns>
		[InterfaceAudience.Public]
		[InterfaceStability.Unstable]
		public abstract long GetClusterTimestamp();

		[InterfaceAudience.Private]
		[InterfaceStability.Unstable]
		protected internal abstract void SetClusterTimestamp(long clusterTimestamp);

		protected internal abstract void Build();

		private sealed class _ThreadLocal_93 : ThreadLocal<NumberFormat>
		{
			public _ThreadLocal_93()
			{
			}

			protected override NumberFormat InitialValue()
			{
				NumberFormat fmt = NumberFormat.GetInstance();
				fmt.SetGroupingUsed(false);
				fmt.SetMinimumIntegerDigits(4);
				return fmt;
			}
		}

		internal static readonly ThreadLocal<NumberFormat> reservIdFormat = new _ThreadLocal_93
			();

		public virtual int CompareTo(ReservationId other)
		{
			if (this.GetClusterTimestamp() - other.GetClusterTimestamp() == 0)
			{
				return GetId() > GetId() ? 1 : GetId() < GetId() ? -1 : 0;
			}
			else
			{
				return this.GetClusterTimestamp() > other.GetClusterTimestamp() ? 1 : this.GetClusterTimestamp
					() < other.GetClusterTimestamp() ? -1 : 0;
			}
		}

		public override string ToString()
		{
			return reserveIdStrPrefix + this.GetClusterTimestamp() + "_" + reservIdFormat.Get
				().Format(GetId());
		}

		/// <summary>
		/// Parse the string argument as a
		/// <see cref="ReservationId"/>
		/// </summary>
		/// <param name="reservationId">
		/// the string representation of the
		/// <see cref="ReservationId"/>
		/// </param>
		/// <returns>
		/// the
		/// <see cref="ReservationId"/>
		/// corresponding to the input string if
		/// valid, null if input is null
		/// </returns>
		/// <exception cref="System.IO.IOException">if unable to parse the input string</exception>
		[InterfaceAudience.Public]
		[InterfaceStability.Unstable]
		public static ReservationId ParseReservationId(string reservationId)
		{
			if (reservationId == null)
			{
				return null;
			}
			if (!reservationId.StartsWith(reserveIdStrPrefix))
			{
				throw new IOException("The specified reservation id is invalid: " + reservationId
					);
			}
			string[] resFields = reservationId.Split("_");
			if (resFields.Length != 3)
			{
				throw new IOException("The specified reservation id is not parseable: " + reservationId
					);
			}
			return NewInstance(long.Parse(resFields[1]), long.Parse(resFields[2]));
		}

		public override int GetHashCode()
		{
			// generated by eclipse
			int prime = 31;
			int result = 1;
			result = prime * result + (int)(GetClusterTimestamp() ^ ((long)(((ulong)GetClusterTimestamp
				()) >> 32)));
			result = prime * result + (int)(GetId() ^ ((long)(((ulong)GetId()) >> 32)));
			return result;
		}

		public override bool Equals(object obj)
		{
			// generated by eclipse
			if (this == obj)
			{
				return true;
			}
			if (obj == null)
			{
				return false;
			}
			if (GetType() != obj.GetType())
			{
				return false;
			}
			ReservationId other = (ReservationId)obj;
			if (GetClusterTimestamp() != other.GetClusterTimestamp())
			{
				return false;
			}
			if (GetId() != other.GetId())
			{
				return false;
			}
			return true;
		}
	}
}
