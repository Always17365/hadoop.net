using System;
using System.IO;
using Sharpen;

namespace Org.Apache.Hadoop.Yarn.Webapp.Hamlet
{
	public class Hamlet : HamletImpl, HamletSpec._Html
	{
		public Hamlet(PrintWriter @out, int nestLevel, bool wasInline)
			: base(@out, nestLevel, wasInline)
		{
		}

		// Generated by HamletGen. Do NOT edit!
		internal static EnumSet<HamletImpl.EOpt> Opt(bool endTag, bool inline, bool pre)
		{
			EnumSet<HamletImpl.EOpt> opts = EnumSet.Of(HamletImpl.EOpt.Endtag);
			if (!endTag)
			{
				opts.Remove(HamletImpl.EOpt.Endtag);
			}
			if (inline)
			{
				opts.AddItem(HamletImpl.EOpt.Inline);
			}
			if (pre)
			{
				opts.AddItem(HamletImpl.EOpt.Pre);
			}
			return opts;
		}

		public class HTML<T> : HamletImpl.EImp<T>, HamletSpec.HTML
			where T : HamletSpec._
		{
			public HTML(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.HTML<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.HTML<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.HEAD<Hamlet.HTML<T>> Head()
			{
				this.CloseAttrs();
				return this._enclosing.Head_(this, false);
			}

			public virtual Hamlet.BODY<Hamlet.HTML<T>> Body()
			{
				this.CloseAttrs();
				return this._enclosing.Body_(this, false);
			}

			public virtual Hamlet.BODY<Hamlet.HTML<T>> Body(string selector)
			{
				return HamletImpl.SetSelector(this.Body(), selector);
			}

			public virtual Hamlet.BASE<Hamlet.HTML<T>> Base()
			{
				this.CloseAttrs();
				return this._enclosing.Base_(this, false);
			}

			public virtual Hamlet.HTML<T> Base(string href)
			{
				return this.Base().$href(href).();
			}

			public virtual Hamlet.TITLE<Hamlet.HTML<T>> Title()
			{
				this.CloseAttrs();
				return this._enclosing.Title_(this, false);
			}

			public virtual Hamlet.HTML<T> Title(string cdata)
			{
				return this.Title().(cdata).();
			}

			public virtual Hamlet.STYLE<Hamlet.HTML<T>> Style()
			{
				this.CloseAttrs();
				return this._enclosing.Style_(this, false);
			}

			public virtual Hamlet.HTML<T> Style(params object[] lines)
			{
				return this.Style().$type("text/css").(lines).();
			}

			public virtual Hamlet.LINK<Hamlet.HTML<T>> Link()
			{
				this.CloseAttrs();
				return this._enclosing.Link_(this, false);
			}

			public virtual Hamlet.HTML<T> Link(string href)
			{
				return HamletImpl.SetLinkHref(this.Link(), href).();
			}

			public virtual Hamlet.META<Hamlet.HTML<T>> Meta()
			{
				this.CloseAttrs();
				return this._enclosing.Meta_(this, false);
			}

			public virtual Hamlet.HTML<T> Meta(string name, string content)
			{
				return this.Meta().$name(name).$content(content).();
			}

			public virtual Hamlet.HTML<T> Meta_http(string header, string content)
			{
				return this.Meta().$http_equiv(header).$content(content).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.HTML<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, false);
			}

			public virtual Hamlet.HTML<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.HTML<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.HTML<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.TABLE<Hamlet.HTML<T>> Table()
			{
				this.CloseAttrs();
				return this._enclosing.Table_(this, false);
			}

			public virtual Hamlet.TABLE<Hamlet.HTML<T>> Table(string selector)
			{
				return HamletImpl.SetSelector(this.Table(), selector);
			}

			public virtual Hamlet.HTML<T> Address(string cdata)
			{
				return this.Address().(cdata).();
			}

			public virtual Hamlet.ADDRESS<Hamlet.HTML<T>> Address()
			{
				this.CloseAttrs();
				return this._enclosing.Address_(this, false);
			}

			public virtual Hamlet.P<Hamlet.HTML<T>> P(string selector)
			{
				return HamletImpl.SetSelector(this.P(), selector);
			}

			public virtual Hamlet.P<Hamlet.HTML<T>> P()
			{
				this.CloseAttrs();
				return this._enclosing.P(this, false);
			}

			public virtual Hamlet.HTML<T> (Type cls)
			{
				this._v(cls);
				return this;
			}

			public virtual Hamlet.HR<Hamlet.HTML<T>> Hr()
			{
				this.CloseAttrs();
				return this._enclosing.Hr_(this, false);
			}

			public virtual Hamlet.HTML<T> Hr(string selector)
			{
				return HamletImpl.SetSelector(this.Hr(), selector).();
			}

			public virtual Hamlet.DL<Hamlet.HTML<T>> Dl(string selector)
			{
				return HamletImpl.SetSelector(this.Dl(), selector);
			}

			public virtual Hamlet.DL<Hamlet.HTML<T>> Dl()
			{
				this.CloseAttrs();
				return this._enclosing.Dl_(this, false);
			}

			public virtual Hamlet.DIV<Hamlet.HTML<T>> Div(string selector)
			{
				return HamletImpl.SetSelector(this.Div(), selector);
			}

			public virtual Hamlet.DIV<Hamlet.HTML<T>> Div()
			{
				this.CloseAttrs();
				return this._enclosing.Div_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.HTML<T>> Blockquote()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.HTML<T>> Bq()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.HTML<T> H1(string cdata)
			{
				return this.H1().(cdata).();
			}

			public virtual Hamlet.H1<Hamlet.HTML<T>> H1()
			{
				this.CloseAttrs();
				return this._enclosing.H1(this, false);
			}

			public virtual Hamlet.HTML<T> H1(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H1(), selector).(cdata).();
			}

			public virtual Hamlet.HTML<T> H2(string cdata)
			{
				return this.H2().(cdata).();
			}

			public virtual Hamlet.H2<Hamlet.HTML<T>> H2()
			{
				this.CloseAttrs();
				return this._enclosing.H2(this, false);
			}

			public virtual Hamlet.HTML<T> H2(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H2(), selector).(cdata).();
			}

			public virtual Hamlet.H3<Hamlet.HTML<T>> H3()
			{
				this.CloseAttrs();
				return this._enclosing.H3(this, false);
			}

			public virtual Hamlet.HTML<T> H3(string cdata)
			{
				return this.H3().(cdata).();
			}

			public virtual Hamlet.HTML<T> H3(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H3(), selector).(cdata).();
			}

			public virtual Hamlet.H4<Hamlet.HTML<T>> H4()
			{
				this.CloseAttrs();
				return this._enclosing.H4(this, false);
			}

			public virtual Hamlet.HTML<T> H4(string cdata)
			{
				return this.H4().(cdata).();
			}

			public virtual Hamlet.HTML<T> H4(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H4(), selector).(cdata).();
			}

			public virtual Hamlet.H5<Hamlet.HTML<T>> H5()
			{
				this.CloseAttrs();
				return this._enclosing.H5(this, false);
			}

			public virtual Hamlet.HTML<T> H5(string cdata)
			{
				return this.H5().(cdata).();
			}

			public virtual Hamlet.HTML<T> H5(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H5(), selector).(cdata).();
			}

			public virtual Hamlet.H6<Hamlet.HTML<T>> H6()
			{
				this.CloseAttrs();
				return this._enclosing.H6(this, false);
			}

			public virtual Hamlet.HTML<T> H6(string cdata)
			{
				return this.H6().(cdata).();
			}

			public virtual Hamlet.HTML<T> H6(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H6(), selector).(cdata).();
			}

			public virtual Hamlet.UL<Hamlet.HTML<T>> Ul()
			{
				this.CloseAttrs();
				return this._enclosing.Ul_(this, false);
			}

			public virtual Hamlet.UL<Hamlet.HTML<T>> Ul(string selector)
			{
				return HamletImpl.SetSelector(this.Ul(), selector);
			}

			public virtual Hamlet.OL<Hamlet.HTML<T>> Ol()
			{
				this.CloseAttrs();
				return this._enclosing.Ol_(this, false);
			}

			public virtual Hamlet.OL<Hamlet.HTML<T>> Ol(string selector)
			{
				return HamletImpl.SetSelector(this.Ol(), selector);
			}

			public virtual Hamlet.PRE<Hamlet.HTML<T>> Pre()
			{
				this.CloseAttrs();
				return this._enclosing.Pre_(this, false);
			}

			public virtual Hamlet.PRE<Hamlet.HTML<T>> Pre(string selector)
			{
				return HamletImpl.SetSelector(this.Pre(), selector);
			}

			public virtual Hamlet.FORM<Hamlet.HTML<T>> Form()
			{
				this.CloseAttrs();
				return this._enclosing.Form_(this, false);
			}

			public virtual Hamlet.FORM<Hamlet.HTML<T>> Form(string selector)
			{
				return HamletImpl.SetSelector(this.Form(), selector);
			}

			public virtual Hamlet.FIELDSET<Hamlet.HTML<T>> Fieldset()
			{
				this.CloseAttrs();
				return this._enclosing.Fieldset_(this, false);
			}

			public virtual Hamlet.FIELDSET<Hamlet.HTML<T>> Fieldset(string selector)
			{
				return HamletImpl.SetSelector(this.Fieldset(), selector);
			}

			public virtual Hamlet.INS<Hamlet.HTML<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.HTML<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.HTML<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.HTML<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		private Hamlet.HEAD<T> Head_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.HEAD<T>(this, "head", e, Opt(true, inline, false));
		}

		private Hamlet.BODY<T> Body_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.BODY<T>(this, "body", e, Opt(true, inline, false));
		}

		public class SCRIPT<T> : HamletImpl.EImp<T>, HamletSpec.SCRIPT
			where T : HamletSpec._
		{
			public SCRIPT(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> 
				opts)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.SCRIPT<T> $type(string value)
			{
				this.AddAttr("type", value);
				return this;
			}

			public virtual Hamlet.SCRIPT<T> $src(string value)
			{
				this.AddAttr("src", value);
				return this;
			}

			public virtual Hamlet.SCRIPT<T> $charset(string value)
			{
				this.AddAttr("charset", value);
				return this;
			}

			public virtual Hamlet.SCRIPT<T> $defer(string value)
			{
				this.AddAttr("defer", value);
				return this;
			}

			public virtual Hamlet.SCRIPT<T> (params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			private readonly Hamlet _enclosing;
		}

		public class STYLE<T> : HamletImpl.EImp<T>, HamletSpec.STYLE
			where T : HamletSpec._
		{
			public STYLE(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.STYLE<T> $type(string value)
			{
				this.AddAttr("type", value);
				return this;
			}

			public virtual Hamlet.STYLE<T> $media(EnumSet<HamletSpec.Media> value)
			{
				this.AddMediaAttr("media", value);
				return this;
			}

			public virtual Hamlet.STYLE<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.STYLE<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.STYLE<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.STYLE<T> (params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			private readonly Hamlet _enclosing;
		}

		public class META<T> : HamletImpl.EImp<T>, HamletSpec.META
			where T : HamletSpec._
		{
			public META(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.META<T> $http_equiv(string value)
			{
				this.AddAttr("http-equiv", value);
				return this;
			}

			public virtual Hamlet.META<T> $name(string value)
			{
				this.AddAttr("name", value);
				return this;
			}

			public virtual Hamlet.META<T> $content(string value)
			{
				this.AddAttr("content", value);
				return this;
			}

			public virtual Hamlet.META<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.META<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			private readonly Hamlet _enclosing;
		}

		public class BASE<T> : HamletImpl.EImp<T>, HamletSpec.BASE
			where T : HamletSpec._
		{
			public BASE(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.BASE<T> $href(string value)
			{
				this.AddAttr("href", value);
				return this;
			}

			private readonly Hamlet _enclosing;
		}

		public class TITLE<T> : HamletImpl.EImp<T>, HamletSpec.TITLE
			where T : HamletSpec._
		{
			public TITLE(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.TITLE<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.TITLE<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.TITLE<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.TITLE<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			private readonly Hamlet _enclosing;
		}

		public class HEAD<T> : HamletImpl.EImp<T>, HamletSpec.HEAD
			where T : HamletSpec._
		{
			public HEAD(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.HEAD<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.HEAD<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.BASE<Hamlet.HEAD<T>> Base()
			{
				this.CloseAttrs();
				return this._enclosing.Base_(this, false);
			}

			public virtual Hamlet.HEAD<T> Base(string href)
			{
				return this.Base().$href(href).();
			}

			public virtual Hamlet.TITLE<Hamlet.HEAD<T>> Title()
			{
				this.CloseAttrs();
				return this._enclosing.Title_(this, false);
			}

			public virtual Hamlet.HEAD<T> Title(string cdata)
			{
				return this.Title().(cdata).();
			}

			public virtual Hamlet.STYLE<Hamlet.HEAD<T>> Style()
			{
				this.CloseAttrs();
				return this._enclosing.Style_(this, false);
			}

			public virtual Hamlet.HEAD<T> Style(params object[] lines)
			{
				return this.Style().$type("text/css").(lines).();
			}

			public virtual Hamlet.LINK<Hamlet.HEAD<T>> Link()
			{
				this.CloseAttrs();
				return this._enclosing.Link_(this, false);
			}

			public virtual Hamlet.HEAD<T> Link(string href)
			{
				return HamletImpl.SetLinkHref(this.Link(), href).();
			}

			public virtual Hamlet.META<Hamlet.HEAD<T>> Meta()
			{
				this.CloseAttrs();
				return this._enclosing.Meta_(this, false);
			}

			public virtual Hamlet.HEAD<T> Meta(string name, string content)
			{
				return this.Meta().$name(name).$content(content).();
			}

			public virtual Hamlet.HEAD<T> Meta_http(string header, string content)
			{
				return this.Meta().$http_equiv(header).$content(content).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.HEAD<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, false);
			}

			public virtual Hamlet.HEAD<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.HEAD<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.HEAD<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			private readonly Hamlet _enclosing;
		}

		private Hamlet.BASE<T> Base_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.BASE<T>(this, "base", e, Opt(false, inline, false));
		}

		private Hamlet.TITLE<T> Title_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.TITLE<T>(this, "title", e, Opt(true, inline, false));
		}

		public class TD<T> : HamletImpl.EImp<T>, HamletSpec.TD
			where T : HamletSpec._
		{
			public TD(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.TD<T> $headers(string value)
			{
				this.AddAttr("headers", value);
				return this;
			}

			public virtual Hamlet.TD<T> $scope(HamletSpec.Scope value)
			{
				this.AddAttr("scope", value);
				return this;
			}

			public virtual Hamlet.TD<T> $rowspan(int value)
			{
				this.AddAttr("rowspan", value);
				return this;
			}

			public virtual Hamlet.TD<T> $colspan(int value)
			{
				this.AddAttr("colspan", value);
				return this;
			}

			public virtual Hamlet.TD<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.TD<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.TD<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.TD<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.TD<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.TD<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.TD<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.TD<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.TD<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.TD<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.TD<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.TD<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.TD<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.TD<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.TD<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.TD<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.TABLE<Hamlet.TD<T>> Table()
			{
				this.CloseAttrs();
				return this._enclosing.Table_(this, false);
			}

			public virtual Hamlet.TABLE<Hamlet.TD<T>> Table(string selector)
			{
				return HamletImpl.SetSelector(this.Table(), selector);
			}

			public virtual Hamlet.TD<T> Address(string cdata)
			{
				return this.Address().(cdata).();
			}

			public virtual Hamlet.ADDRESS<Hamlet.TD<T>> Address()
			{
				this.CloseAttrs();
				return this._enclosing.Address_(this, false);
			}

			public virtual Hamlet.P<Hamlet.TD<T>> P(string selector)
			{
				return HamletImpl.SetSelector(this.P(), selector);
			}

			public virtual Hamlet.P<Hamlet.TD<T>> P()
			{
				this.CloseAttrs();
				return this._enclosing.P(this, false);
			}

			public virtual Hamlet.TD<T> (Type cls)
			{
				this._v(cls);
				return this;
			}

			public virtual Hamlet.HR<Hamlet.TD<T>> Hr()
			{
				this.CloseAttrs();
				return this._enclosing.Hr_(this, false);
			}

			public virtual Hamlet.TD<T> Hr(string selector)
			{
				return HamletImpl.SetSelector(this.Hr(), selector).();
			}

			public virtual Hamlet.DL<Hamlet.TD<T>> Dl(string selector)
			{
				return HamletImpl.SetSelector(this.Dl(), selector);
			}

			public virtual Hamlet.DL<Hamlet.TD<T>> Dl()
			{
				this.CloseAttrs();
				return this._enclosing.Dl_(this, false);
			}

			public virtual Hamlet.DIV<Hamlet.TD<T>> Div(string selector)
			{
				return HamletImpl.SetSelector(this.Div(), selector);
			}

			public virtual Hamlet.DIV<Hamlet.TD<T>> Div()
			{
				this.CloseAttrs();
				return this._enclosing.Div_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.TD<T>> Blockquote()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.TD<T>> Bq()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.TD<T> H1(string cdata)
			{
				return this.H1().(cdata).();
			}

			public virtual Hamlet.H1<Hamlet.TD<T>> H1()
			{
				this.CloseAttrs();
				return this._enclosing.H1(this, false);
			}

			public virtual Hamlet.TD<T> H1(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H1(), selector).(cdata).();
			}

			public virtual Hamlet.TD<T> H2(string cdata)
			{
				return this.H2().(cdata).();
			}

			public virtual Hamlet.H2<Hamlet.TD<T>> H2()
			{
				this.CloseAttrs();
				return this._enclosing.H2(this, false);
			}

			public virtual Hamlet.TD<T> H2(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H2(), selector).(cdata).();
			}

			public virtual Hamlet.H3<Hamlet.TD<T>> H3()
			{
				this.CloseAttrs();
				return this._enclosing.H3(this, false);
			}

			public virtual Hamlet.TD<T> H3(string cdata)
			{
				return this.H3().(cdata).();
			}

			public virtual Hamlet.TD<T> H3(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H3(), selector).(cdata).();
			}

			public virtual Hamlet.H4<Hamlet.TD<T>> H4()
			{
				this.CloseAttrs();
				return this._enclosing.H4(this, false);
			}

			public virtual Hamlet.TD<T> H4(string cdata)
			{
				return this.H4().(cdata).();
			}

			public virtual Hamlet.TD<T> H4(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H4(), selector).(cdata).();
			}

			public virtual Hamlet.H5<Hamlet.TD<T>> H5()
			{
				this.CloseAttrs();
				return this._enclosing.H5(this, false);
			}

			public virtual Hamlet.TD<T> H5(string cdata)
			{
				return this.H5().(cdata).();
			}

			public virtual Hamlet.TD<T> H5(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H5(), selector).(cdata).();
			}

			public virtual Hamlet.H6<Hamlet.TD<T>> H6()
			{
				this.CloseAttrs();
				return this._enclosing.H6(this, false);
			}

			public virtual Hamlet.TD<T> H6(string cdata)
			{
				return this.H6().(cdata).();
			}

			public virtual Hamlet.TD<T> H6(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H6(), selector).(cdata).();
			}

			public virtual Hamlet.UL<Hamlet.TD<T>> Ul()
			{
				this.CloseAttrs();
				return this._enclosing.Ul_(this, false);
			}

			public virtual Hamlet.UL<Hamlet.TD<T>> Ul(string selector)
			{
				return HamletImpl.SetSelector(this.Ul(), selector);
			}

			public virtual Hamlet.OL<Hamlet.TD<T>> Ol()
			{
				this.CloseAttrs();
				return this._enclosing.Ol_(this, false);
			}

			public virtual Hamlet.OL<Hamlet.TD<T>> Ol(string selector)
			{
				return HamletImpl.SetSelector(this.Ol(), selector);
			}

			public virtual Hamlet.PRE<Hamlet.TD<T>> Pre()
			{
				this.CloseAttrs();
				return this._enclosing.Pre_(this, false);
			}

			public virtual Hamlet.PRE<Hamlet.TD<T>> Pre(string selector)
			{
				return HamletImpl.SetSelector(this.Pre(), selector);
			}

			public virtual Hamlet.FORM<Hamlet.TD<T>> Form()
			{
				this.CloseAttrs();
				return this._enclosing.Form_(this, false);
			}

			public virtual Hamlet.FORM<Hamlet.TD<T>> Form(string selector)
			{
				return HamletImpl.SetSelector(this.Form(), selector);
			}

			public virtual Hamlet.FIELDSET<Hamlet.TD<T>> Fieldset()
			{
				this.CloseAttrs();
				return this._enclosing.Fieldset_(this, false);
			}

			public virtual Hamlet.FIELDSET<Hamlet.TD<T>> Fieldset(string selector)
			{
				return HamletImpl.SetSelector(this.Fieldset(), selector);
			}

			public virtual Hamlet.TD<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.TD<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.TD<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.TD<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.TD<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.TD<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.TD<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.TD<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.TD<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.TD<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.TD<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.TD<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.TD<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.TD<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.TD<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.TD<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.TD<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.TD<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.TD<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.TD<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.TD<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.TD<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.TD<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.TD<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.TD<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.TD<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.TD<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.TD<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.TD<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.TD<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.TD<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.TD<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.TD<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.TD<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.TD<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.TD<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.TD<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.TD<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.TD<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.TD<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.TD<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.TD<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.TD<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.TD<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.TD<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.TD<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.TD<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.TD<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.TD<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.TD<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.TD<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.TD<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.TD<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.TD<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.TD<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.TD<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.TD<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.TD<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.TD<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.TD<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.TD<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.TD<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.TD<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.TD<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.TD<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.TD<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.TD<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.TD<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.TD<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.TD<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.TD<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.TD<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.TD<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.TD<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.TD<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.TD<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.TD<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.TD<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.TD<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.TD<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.TD<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.TD<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class TH<T> : HamletImpl.EImp<T>, HamletSpec.TH
			where T : HamletSpec._
		{
			public TH(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.TH<T> $headers(string value)
			{
				this.AddAttr("headers", value);
				return this;
			}

			public virtual Hamlet.TH<T> $scope(HamletSpec.Scope value)
			{
				this.AddAttr("scope", value);
				return this;
			}

			public virtual Hamlet.TH<T> $rowspan(int value)
			{
				this.AddAttr("rowspan", value);
				return this;
			}

			public virtual Hamlet.TH<T> $colspan(int value)
			{
				this.AddAttr("colspan", value);
				return this;
			}

			public virtual Hamlet.TH<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.TH<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.TH<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.TH<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.TH<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.TH<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.TH<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.TH<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.TH<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.TH<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.TH<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.TH<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.TH<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.TH<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.TH<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.TH<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.TABLE<Hamlet.TH<T>> Table()
			{
				this.CloseAttrs();
				return this._enclosing.Table_(this, false);
			}

			public virtual Hamlet.TABLE<Hamlet.TH<T>> Table(string selector)
			{
				return HamletImpl.SetSelector(this.Table(), selector);
			}

			public virtual Hamlet.TH<T> Address(string cdata)
			{
				return this.Address().(cdata).();
			}

			public virtual Hamlet.ADDRESS<Hamlet.TH<T>> Address()
			{
				this.CloseAttrs();
				return this._enclosing.Address_(this, false);
			}

			public virtual Hamlet.P<Hamlet.TH<T>> P(string selector)
			{
				return HamletImpl.SetSelector(this.P(), selector);
			}

			public virtual Hamlet.P<Hamlet.TH<T>> P()
			{
				this.CloseAttrs();
				return this._enclosing.P(this, false);
			}

			public virtual Hamlet.TH<T> (Type cls)
			{
				this._v(cls);
				return this;
			}

			public virtual Hamlet.HR<Hamlet.TH<T>> Hr()
			{
				this.CloseAttrs();
				return this._enclosing.Hr_(this, false);
			}

			public virtual Hamlet.TH<T> Hr(string selector)
			{
				return HamletImpl.SetSelector(this.Hr(), selector).();
			}

			public virtual Hamlet.DL<Hamlet.TH<T>> Dl(string selector)
			{
				return HamletImpl.SetSelector(this.Dl(), selector);
			}

			public virtual Hamlet.DL<Hamlet.TH<T>> Dl()
			{
				this.CloseAttrs();
				return this._enclosing.Dl_(this, false);
			}

			public virtual Hamlet.DIV<Hamlet.TH<T>> Div(string selector)
			{
				return HamletImpl.SetSelector(this.Div(), selector);
			}

			public virtual Hamlet.DIV<Hamlet.TH<T>> Div()
			{
				this.CloseAttrs();
				return this._enclosing.Div_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.TH<T>> Blockquote()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.TH<T>> Bq()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.TH<T> H1(string cdata)
			{
				return this.H1().(cdata).();
			}

			public virtual Hamlet.H1<Hamlet.TH<T>> H1()
			{
				this.CloseAttrs();
				return this._enclosing.H1(this, false);
			}

			public virtual Hamlet.TH<T> H1(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H1(), selector).(cdata).();
			}

			public virtual Hamlet.TH<T> H2(string cdata)
			{
				return this.H2().(cdata).();
			}

			public virtual Hamlet.H2<Hamlet.TH<T>> H2()
			{
				this.CloseAttrs();
				return this._enclosing.H2(this, false);
			}

			public virtual Hamlet.TH<T> H2(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H2(), selector).(cdata).();
			}

			public virtual Hamlet.H3<Hamlet.TH<T>> H3()
			{
				this.CloseAttrs();
				return this._enclosing.H3(this, false);
			}

			public virtual Hamlet.TH<T> H3(string cdata)
			{
				return this.H3().(cdata).();
			}

			public virtual Hamlet.TH<T> H3(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H3(), selector).(cdata).();
			}

			public virtual Hamlet.H4<Hamlet.TH<T>> H4()
			{
				this.CloseAttrs();
				return this._enclosing.H4(this, false);
			}

			public virtual Hamlet.TH<T> H4(string cdata)
			{
				return this.H4().(cdata).();
			}

			public virtual Hamlet.TH<T> H4(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H4(), selector).(cdata).();
			}

			public virtual Hamlet.H5<Hamlet.TH<T>> H5()
			{
				this.CloseAttrs();
				return this._enclosing.H5(this, false);
			}

			public virtual Hamlet.TH<T> H5(string cdata)
			{
				return this.H5().(cdata).();
			}

			public virtual Hamlet.TH<T> H5(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H5(), selector).(cdata).();
			}

			public virtual Hamlet.H6<Hamlet.TH<T>> H6()
			{
				this.CloseAttrs();
				return this._enclosing.H6(this, false);
			}

			public virtual Hamlet.TH<T> H6(string cdata)
			{
				return this.H6().(cdata).();
			}

			public virtual Hamlet.TH<T> H6(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H6(), selector).(cdata).();
			}

			public virtual Hamlet.UL<Hamlet.TH<T>> Ul()
			{
				this.CloseAttrs();
				return this._enclosing.Ul_(this, false);
			}

			public virtual Hamlet.UL<Hamlet.TH<T>> Ul(string selector)
			{
				return HamletImpl.SetSelector(this.Ul(), selector);
			}

			public virtual Hamlet.OL<Hamlet.TH<T>> Ol()
			{
				this.CloseAttrs();
				return this._enclosing.Ol_(this, false);
			}

			public virtual Hamlet.OL<Hamlet.TH<T>> Ol(string selector)
			{
				return HamletImpl.SetSelector(this.Ol(), selector);
			}

			public virtual Hamlet.PRE<Hamlet.TH<T>> Pre()
			{
				this.CloseAttrs();
				return this._enclosing.Pre_(this, false);
			}

			public virtual Hamlet.PRE<Hamlet.TH<T>> Pre(string selector)
			{
				return HamletImpl.SetSelector(this.Pre(), selector);
			}

			public virtual Hamlet.FORM<Hamlet.TH<T>> Form()
			{
				this.CloseAttrs();
				return this._enclosing.Form_(this, false);
			}

			public virtual Hamlet.FORM<Hamlet.TH<T>> Form(string selector)
			{
				return HamletImpl.SetSelector(this.Form(), selector);
			}

			public virtual Hamlet.FIELDSET<Hamlet.TH<T>> Fieldset()
			{
				this.CloseAttrs();
				return this._enclosing.Fieldset_(this, false);
			}

			public virtual Hamlet.FIELDSET<Hamlet.TH<T>> Fieldset(string selector)
			{
				return HamletImpl.SetSelector(this.Fieldset(), selector);
			}

			public virtual Hamlet.TH<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.TH<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.TH<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.TH<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.TH<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.TH<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.TH<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.TH<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.TH<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.TH<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.TH<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.TH<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.TH<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.TH<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.TH<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.TH<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.TH<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.TH<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.TH<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.TH<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.TH<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.TH<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.TH<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.TH<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.TH<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.TH<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.TH<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.TH<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.TH<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.TH<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.TH<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.TH<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.TH<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.TH<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.TH<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.TH<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.TH<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.TH<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.TH<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.TH<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.TH<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.TH<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.TH<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.TH<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.TH<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.TH<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.TH<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.TH<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.TH<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.TH<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.TH<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.TH<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.TH<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.TH<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.TH<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.TH<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.TH<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.TH<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.TH<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.TH<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.TH<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.TH<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.TH<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.TH<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.TH<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.TH<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.TH<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.TH<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.TH<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.TH<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.TH<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.TH<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.TH<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.TH<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.TH<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.TH<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.TH<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.TH<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.TH<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.TH<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.TH<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.TH<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class TR<T> : HamletImpl.EImp<T>, HamletSpec.TR
			where T : HamletSpec._
		{
			public TR(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.TR<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.TR<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.TR<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.TR<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.TR<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.TR<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.TR<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.TR<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.TR<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.TR<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.TR<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.TR<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.TR<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.TR<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.TR<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.TR<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.TH<Hamlet.TR<T>> Th()
			{
				this.CloseAttrs();
				return this._enclosing.Th_(this, false);
			}

			public virtual Hamlet.TR<T> Th(string cdata)
			{
				return this.Th().(cdata).();
			}

			public virtual Hamlet.TR<T> Th(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Th(), selector).(cdata).();
			}

			public virtual Hamlet.TD<Hamlet.TR<T>> Td()
			{
				this.CloseAttrs();
				return this._enclosing.Td_(this, false);
			}

			public virtual Hamlet.TR<T> Td(string cdata)
			{
				return this.Td().(cdata).();
			}

			public virtual Hamlet.TR<T> Td(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Td(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		private Hamlet.TH<T> Th_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.TH<T>(this, "th", e, Opt(true, inline, false));
		}

		private Hamlet.TD<T> Td_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.TD<T>(this, "td", e, Opt(true, inline, false));
		}

		public class COL<T> : HamletImpl.EImp<T>, HamletSpec.COL
			where T : HamletSpec._
		{
			public COL(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.COL<T> $span(int value)
			{
				this.AddAttr("span", value);
				return this;
			}

			public virtual Hamlet.COL<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.COL<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.COL<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.COL<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.COL<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.COL<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.COL<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.COL<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.COL<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.COL<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.COL<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.COL<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.COL<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.COL<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.COL<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.COL<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			private readonly Hamlet _enclosing;
		}

		public class COLGROUP<T> : HamletImpl.EImp<T>, HamletSpec.COLGROUP
			where T : HamletSpec._
		{
			public COLGROUP(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt
				> opts)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.COLGROUP<T> $span(int value)
			{
				this.AddAttr("span", value);
				return this;
			}

			public virtual Hamlet.COLGROUP<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.COLGROUP<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.COLGROUP<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.COLGROUP<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.COLGROUP<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.COLGROUP<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.COLGROUP<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.COLGROUP<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.COLGROUP<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.COLGROUP<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.COLGROUP<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.COLGROUP<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.COLGROUP<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.COLGROUP<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.COLGROUP<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.COLGROUP<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.COL<Hamlet.COLGROUP<T>> Col()
			{
				this.CloseAttrs();
				return this._enclosing.Col_(this, false);
			}

			public virtual Hamlet.COLGROUP<T> Col(string selector)
			{
				return HamletImpl.SetSelector(this.Col(), selector).();
			}

			private readonly Hamlet _enclosing;
		}

		public class TBODY<T> : HamletImpl.EImp<T>, HamletSpec.TBODY
			where T : HamletSpec._
		{
			public TBODY(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.TBODY<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.TBODY<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.TBODY<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.TBODY<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.TBODY<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.TBODY<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.TBODY<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.TBODY<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.TBODY<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.TBODY<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.TBODY<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.TBODY<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.TBODY<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.TBODY<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.TBODY<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.TBODY<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.TR<Hamlet.TBODY<T>> Tr()
			{
				this.CloseAttrs();
				return this._enclosing.Tr_(this, false);
			}

			public virtual Hamlet.TR<Hamlet.TBODY<T>> Tr(string selector)
			{
				return HamletImpl.SetSelector(this.Tr(), selector);
			}

			private readonly Hamlet _enclosing;
		}

		public class TFOOT<T> : HamletImpl.EImp<T>, HamletSpec.TFOOT
			where T : HamletSpec._
		{
			public TFOOT(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.TFOOT<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.TFOOT<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.TFOOT<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.TFOOT<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.TFOOT<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.TFOOT<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.TFOOT<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.TFOOT<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.TFOOT<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.TFOOT<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.TFOOT<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.TFOOT<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.TFOOT<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.TFOOT<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.TFOOT<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.TFOOT<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.TR<Hamlet.TFOOT<T>> Tr()
			{
				this.CloseAttrs();
				return this._enclosing.Tr_(this, false);
			}

			public virtual Hamlet.TR<Hamlet.TFOOT<T>> Tr(string selector)
			{
				return HamletImpl.SetSelector(this.Tr(), selector);
			}

			private readonly Hamlet _enclosing;
		}

		public class THEAD<T> : HamletImpl.EImp<T>, HamletSpec.THEAD
			where T : HamletSpec._
		{
			public THEAD(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.THEAD<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.THEAD<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.THEAD<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.THEAD<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.THEAD<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.THEAD<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.THEAD<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.THEAD<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.THEAD<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.THEAD<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.THEAD<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.THEAD<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.THEAD<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.THEAD<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.THEAD<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.THEAD<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.TR<Hamlet.THEAD<T>> Tr()
			{
				this.CloseAttrs();
				return this._enclosing.Tr_(this, false);
			}

			public virtual Hamlet.TR<Hamlet.THEAD<T>> Tr(string selector)
			{
				return HamletImpl.SetSelector(this.Tr(), selector);
			}

			private readonly Hamlet _enclosing;
		}

		public class CAPTION<T> : HamletImpl.EImp<T>, HamletSpec.CAPTION
			where T : HamletSpec._
		{
			public CAPTION(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt>
				 opts)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.CAPTION<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.CAPTION<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.CAPTION<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.CAPTION<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.CAPTION<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.CAPTION<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.CAPTION<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.CAPTION<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.CAPTION<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.CAPTION<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.CAPTION<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.CAPTION<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.CAPTION<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.CAPTION<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.CAPTION<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.CAPTION<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.CAPTION<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.CAPTION<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.CAPTION<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.CAPTION<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.CAPTION<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.CAPTION<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.CAPTION<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.CAPTION<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.CAPTION<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.CAPTION<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.CAPTION<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.CAPTION<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.CAPTION<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.CAPTION<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.CAPTION<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.CAPTION<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.CAPTION<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.CAPTION<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.CAPTION<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.CAPTION<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.CAPTION<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.CAPTION<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.CAPTION<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.CAPTION<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.CAPTION<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.CAPTION<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.CAPTION<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.CAPTION<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.CAPTION<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.CAPTION<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.CAPTION<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.CAPTION<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.CAPTION<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.CAPTION<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.CAPTION<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.CAPTION<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.CAPTION<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.CAPTION<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.CAPTION<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.CAPTION<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.CAPTION<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.CAPTION<T> A(string selector, string href, string anchorText
				)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.CAPTION<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.CAPTION<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.CAPTION<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.CAPTION<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.CAPTION<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.CAPTION<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.CAPTION<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.CAPTION<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.CAPTION<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.CAPTION<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.CAPTION<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.CAPTION<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.CAPTION<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.CAPTION<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.CAPTION<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.CAPTION<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.CAPTION<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.CAPTION<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.CAPTION<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.CAPTION<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.CAPTION<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.CAPTION<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.CAPTION<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.CAPTION<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.CAPTION<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.CAPTION<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.CAPTION<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.CAPTION<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.CAPTION<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.CAPTION<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.CAPTION<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.CAPTION<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.CAPTION<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.CAPTION<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.CAPTION<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.CAPTION<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.CAPTION<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.CAPTION<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.CAPTION<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.CAPTION<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class TABLE<T> : HamletImpl.EImp<T>, HamletSpec.TABLE
			where T : HamletSpec._
		{
			public TABLE(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.TABLE<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.TABLE<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.TABLE<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.TABLE<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.TABLE<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.TABLE<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.TABLE<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.TABLE<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.TABLE<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.TABLE<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.TABLE<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.TABLE<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.TABLE<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.TABLE<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.TABLE<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.TABLE<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.TABLE<T> Caption(string cdata)
			{
				return this.Caption().(cdata).();
			}

			public virtual Hamlet.CAPTION<Hamlet.TABLE<T>> Caption()
			{
				this.CloseAttrs();
				return this._enclosing.Caption_(this, false);
			}

			public virtual Hamlet.COLGROUP<Hamlet.TABLE<T>> Colgroup()
			{
				this.CloseAttrs();
				return this._enclosing.Colgroup_(this, false);
			}

			public virtual Hamlet.THEAD<Hamlet.TABLE<T>> Thead(string selector)
			{
				return HamletImpl.SetSelector(this.Thead(), selector);
			}

			public virtual Hamlet.THEAD<Hamlet.TABLE<T>> Thead()
			{
				this.CloseAttrs();
				return this._enclosing.Thead_(this, false);
			}

			public virtual Hamlet.TFOOT<Hamlet.TABLE<T>> Tfoot()
			{
				this.CloseAttrs();
				return this._enclosing.Tfoot_(this, false);
			}

			public virtual Hamlet.TFOOT<Hamlet.TABLE<T>> Tfoot(string selector)
			{
				return HamletImpl.SetSelector(this.Tfoot(), selector);
			}

			public virtual Hamlet.TBODY<Hamlet.TABLE<T>> Tbody()
			{
				this.CloseAttrs();
				return this._enclosing.Tbody_(this, false);
			}

			public virtual Hamlet.TBODY<Hamlet.TABLE<T>> Tbody(string selector)
			{
				return HamletImpl.SetSelector(this.Tbody(), selector);
			}

			public virtual Hamlet.TR<Hamlet.TABLE<T>> Tr()
			{
				this.CloseAttrs();
				return this._enclosing.Tr_(this, false);
			}

			public virtual Hamlet.TR<Hamlet.TABLE<T>> Tr(string selector)
			{
				return HamletImpl.SetSelector(this.Tr(), selector);
			}

			public virtual Hamlet.COL<Hamlet.TABLE<T>> Col()
			{
				this.CloseAttrs();
				return this._enclosing.Col_(this, false);
			}

			public virtual Hamlet.TABLE<T> Col(string selector)
			{
				return HamletImpl.SetSelector(this.Col(), selector).();
			}

			private readonly Hamlet _enclosing;
		}

		private Hamlet.CAPTION<T> Caption_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.CAPTION<T>(this, "caption", e, Opt(true, inline, false));
		}

		private Hamlet.COLGROUP<T> Colgroup_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.COLGROUP<T>(this, "colgroup", e, Opt(false, inline, false));
		}

		private Hamlet.THEAD<T> Thead_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.THEAD<T>(this, "thead", e, Opt(true, inline, false));
		}

		private Hamlet.TFOOT<T> Tfoot_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.TFOOT<T>(this, "tfoot", e, Opt(true, inline, false));
		}

		private Hamlet.TBODY<T> Tbody_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.TBODY<T>(this, "tbody", e, Opt(true, inline, false));
		}

		private Hamlet.COL<T> Col_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.COL<T>(this, "col", e, Opt(false, inline, false));
		}

		private Hamlet.TR<T> Tr_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.TR<T>(this, "tr", e, Opt(true, inline, false));
		}

		public class BUTTON<T> : HamletImpl.EImp<T>, HamletSpec.BUTTON
			where T : HamletSpec._
		{
			public BUTTON(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> 
				opts)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.BUTTON<T> $type(HamletSpec.ButtonType value)
			{
				this.AddAttr("type", value);
				return this;
			}

			public virtual Hamlet.BUTTON<T> $name(string value)
			{
				this.AddAttr("name", value);
				return this;
			}

			public virtual Hamlet.BUTTON<T> $value(string value)
			{
				this.AddAttr("value", value);
				return this;
			}

			public virtual Hamlet.BUTTON<T> $disabled()
			{
				this.AddAttr("disabled", null);
				return this;
			}

			public virtual Hamlet.BUTTON<T> $tabindex(int value)
			{
				this.AddAttr("tabindex", value);
				return this;
			}

			public virtual Hamlet.BUTTON<T> $accesskey(string value)
			{
				this.AddAttr("accesskey", value);
				return this;
			}

			public virtual Hamlet.BUTTON<T> $onfocus(string value)
			{
				this.AddAttr("onfocus", value);
				return this;
			}

			public virtual Hamlet.BUTTON<T> $onblur(string value)
			{
				this.AddAttr("onblur", value);
				return this;
			}

			public virtual Hamlet.TABLE<Hamlet.BUTTON<T>> Table()
			{
				this.CloseAttrs();
				return this._enclosing.Table_(this, false);
			}

			public virtual Hamlet.TABLE<Hamlet.BUTTON<T>> Table(string selector)
			{
				return HamletImpl.SetSelector(this.Table(), selector);
			}

			public virtual Hamlet.BUTTON<T> Address(string cdata)
			{
				return this.Address().(cdata).();
			}

			public virtual Hamlet.ADDRESS<Hamlet.BUTTON<T>> Address()
			{
				this.CloseAttrs();
				return this._enclosing.Address_(this, false);
			}

			public virtual Hamlet.P<Hamlet.BUTTON<T>> P(string selector)
			{
				return HamletImpl.SetSelector(this.P(), selector);
			}

			public virtual Hamlet.P<Hamlet.BUTTON<T>> P()
			{
				this.CloseAttrs();
				return this._enclosing.P(this, false);
			}

			public virtual Hamlet.BUTTON<T> (Type cls)
			{
				this._v(cls);
				return this;
			}

			public virtual Hamlet.HR<Hamlet.BUTTON<T>> Hr()
			{
				this.CloseAttrs();
				return this._enclosing.Hr_(this, false);
			}

			public virtual Hamlet.BUTTON<T> Hr(string selector)
			{
				return HamletImpl.SetSelector(this.Hr(), selector).();
			}

			public virtual Hamlet.DL<Hamlet.BUTTON<T>> Dl(string selector)
			{
				return HamletImpl.SetSelector(this.Dl(), selector);
			}

			public virtual Hamlet.DL<Hamlet.BUTTON<T>> Dl()
			{
				this.CloseAttrs();
				return this._enclosing.Dl_(this, false);
			}

			public virtual Hamlet.DIV<Hamlet.BUTTON<T>> Div(string selector)
			{
				return HamletImpl.SetSelector(this.Div(), selector);
			}

			public virtual Hamlet.DIV<Hamlet.BUTTON<T>> Div()
			{
				this.CloseAttrs();
				return this._enclosing.Div_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.BUTTON<T>> Blockquote()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.BUTTON<T>> Bq()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.BUTTON<T> H1(string cdata)
			{
				return this.H1().(cdata).();
			}

			public virtual Hamlet.H1<Hamlet.BUTTON<T>> H1()
			{
				this.CloseAttrs();
				return this._enclosing.H1(this, false);
			}

			public virtual Hamlet.BUTTON<T> H1(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H1(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<T> H2(string cdata)
			{
				return this.H2().(cdata).();
			}

			public virtual Hamlet.H2<Hamlet.BUTTON<T>> H2()
			{
				this.CloseAttrs();
				return this._enclosing.H2(this, false);
			}

			public virtual Hamlet.BUTTON<T> H2(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H2(), selector).(cdata).();
			}

			public virtual Hamlet.H3<Hamlet.BUTTON<T>> H3()
			{
				this.CloseAttrs();
				return this._enclosing.H3(this, false);
			}

			public virtual Hamlet.BUTTON<T> H3(string cdata)
			{
				return this.H3().(cdata).();
			}

			public virtual Hamlet.BUTTON<T> H3(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H3(), selector).(cdata).();
			}

			public virtual Hamlet.H4<Hamlet.BUTTON<T>> H4()
			{
				this.CloseAttrs();
				return this._enclosing.H4(this, false);
			}

			public virtual Hamlet.BUTTON<T> H4(string cdata)
			{
				return this.H4().(cdata).();
			}

			public virtual Hamlet.BUTTON<T> H4(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H4(), selector).(cdata).();
			}

			public virtual Hamlet.H5<Hamlet.BUTTON<T>> H5()
			{
				this.CloseAttrs();
				return this._enclosing.H5(this, false);
			}

			public virtual Hamlet.BUTTON<T> H5(string cdata)
			{
				return this.H5().(cdata).();
			}

			public virtual Hamlet.BUTTON<T> H5(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H5(), selector).(cdata).();
			}

			public virtual Hamlet.H6<Hamlet.BUTTON<T>> H6()
			{
				this.CloseAttrs();
				return this._enclosing.H6(this, false);
			}

			public virtual Hamlet.BUTTON<T> H6(string cdata)
			{
				return this.H6().(cdata).();
			}

			public virtual Hamlet.BUTTON<T> H6(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H6(), selector).(cdata).();
			}

			public virtual Hamlet.UL<Hamlet.BUTTON<T>> Ul()
			{
				this.CloseAttrs();
				return this._enclosing.Ul_(this, false);
			}

			public virtual Hamlet.UL<Hamlet.BUTTON<T>> Ul(string selector)
			{
				return HamletImpl.SetSelector(this.Ul(), selector);
			}

			public virtual Hamlet.OL<Hamlet.BUTTON<T>> Ol()
			{
				this.CloseAttrs();
				return this._enclosing.Ol_(this, false);
			}

			public virtual Hamlet.OL<Hamlet.BUTTON<T>> Ol(string selector)
			{
				return HamletImpl.SetSelector(this.Ol(), selector);
			}

			public virtual Hamlet.PRE<Hamlet.BUTTON<T>> Pre()
			{
				this.CloseAttrs();
				return this._enclosing.Pre_(this, false);
			}

			public virtual Hamlet.PRE<Hamlet.BUTTON<T>> Pre(string selector)
			{
				return HamletImpl.SetSelector(this.Pre(), selector);
			}

			public virtual Hamlet.BUTTON<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.BUTTON<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.BUTTON<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.BUTTON<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.BUTTON<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.BUTTON<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.BUTTON<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.BUTTON<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.BUTTON<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.BUTTON<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.BUTTON<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.BUTTON<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.BUTTON<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.BUTTON<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.BUTTON<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.BUTTON<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.BUTTON<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.BUTTON<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.BUTTON<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.BUTTON<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.BUTTON<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.BUTTON<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.BUTTON<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.BUTTON<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.BUTTON<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.BUTTON<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.BUTTON<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.BUTTON<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.BUTTON<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.BUTTON<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.BUTTON<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.BUTTON<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.BUTTON<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.BUTTON<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.BUTTON<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.BUTTON<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.BUTTON<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.BUTTON<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.BUTTON<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.BUTTON<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.BUTTON<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.BUTTON<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.BUTTON<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.BUTTON<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.BUTTON<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.BUTTON<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.BUTTON<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.BUTTON<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.BUTTON<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.BUTTON<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.BUTTON<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.BUTTON<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.BUTTON<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.BUTTON<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.IMG<Hamlet.BUTTON<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.BUTTON<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.BUTTON<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.BUTTON<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.BUTTON<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.BUTTON<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.BUTTON<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.BUTTON<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.BUTTON<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.BUTTON<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.BUTTON<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.BUTTON<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.BUTTON<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.BUTTON<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.BUTTON<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.BUTTON<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.BUTTON<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.BUTTON<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.BUTTON<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.BUTTON<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.BUTTON<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.BUTTON<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.BUTTON<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.BUTTON<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.BUTTON<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			private readonly Hamlet _enclosing;
		}

		public class LEGEND<T> : HamletImpl.EImp<T>, HamletSpec.LEGEND
			where T : HamletSpec._
		{
			public LEGEND(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> 
				opts)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.LEGEND<T> $accesskey(string value)
			{
				this.AddAttr("accesskey", value);
				return this;
			}

			public virtual Hamlet.LEGEND<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.LEGEND<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.LEGEND<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.LEGEND<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.LEGEND<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.LEGEND<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.LEGEND<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.LEGEND<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.LEGEND<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.LEGEND<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.LEGEND<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.LEGEND<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.LEGEND<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.LEGEND<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.LEGEND<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.LEGEND<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.LEGEND<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.LEGEND<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.LEGEND<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.LEGEND<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.LEGEND<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.LEGEND<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.LEGEND<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.LEGEND<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.LEGEND<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.LEGEND<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.LEGEND<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.LEGEND<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.LEGEND<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.LEGEND<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.LEGEND<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.LEGEND<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.LEGEND<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.LEGEND<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.LEGEND<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.LEGEND<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.LEGEND<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.LEGEND<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.LEGEND<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.LEGEND<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.LEGEND<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.LEGEND<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.LEGEND<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.LEGEND<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.LEGEND<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.LEGEND<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.LEGEND<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.LEGEND<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.LEGEND<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.LEGEND<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.LEGEND<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.LEGEND<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.LEGEND<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.LEGEND<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.LEGEND<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.LEGEND<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.LEGEND<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.LEGEND<T> A(string selector, string href, string anchorText
				)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.LEGEND<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.LEGEND<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.LEGEND<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.LEGEND<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.LEGEND<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.LEGEND<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.LEGEND<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.LEGEND<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.LEGEND<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.LEGEND<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.LEGEND<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.LEGEND<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.LEGEND<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.LEGEND<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.LEGEND<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.LEGEND<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.LEGEND<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.LEGEND<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.LEGEND<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.LEGEND<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.LEGEND<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.LEGEND<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.LEGEND<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.LEGEND<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.LEGEND<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.LEGEND<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.LEGEND<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.LEGEND<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.LEGEND<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.LEGEND<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.LEGEND<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.LEGEND<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.LEGEND<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.LEGEND<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.LEGEND<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.LEGEND<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.LEGEND<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.LEGEND<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.LEGEND<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.LEGEND<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class FIELDSET<T> : HamletImpl.EImp<T>, HamletSpec.FIELDSET
			where T : HamletSpec._
		{
			public FIELDSET(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt
				> opts)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.FIELDSET<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.FIELDSET<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.FIELDSET<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.FIELDSET<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.FIELDSET<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.FIELDSET<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.FIELDSET<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.FIELDSET<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.FIELDSET<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.FIELDSET<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.FIELDSET<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.FIELDSET<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.FIELDSET<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.FIELDSET<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.FIELDSET<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.FIELDSET<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.LEGEND<Hamlet.FIELDSET<T>> Legend()
			{
				this.CloseAttrs();
				return this._enclosing.Legend_(this, false);
			}

			public virtual Hamlet.FIELDSET<T> Legend(string cdata)
			{
				return this.Legend().(cdata).();
			}

			public virtual Hamlet.FIELDSET<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.FIELDSET<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.TABLE<Hamlet.FIELDSET<T>> Table()
			{
				this.CloseAttrs();
				return this._enclosing.Table_(this, false);
			}

			public virtual Hamlet.TABLE<Hamlet.FIELDSET<T>> Table(string selector)
			{
				return HamletImpl.SetSelector(this.Table(), selector);
			}

			public virtual Hamlet.FIELDSET<T> Address(string cdata)
			{
				return this.Address().(cdata).();
			}

			public virtual Hamlet.ADDRESS<Hamlet.FIELDSET<T>> Address()
			{
				this.CloseAttrs();
				return this._enclosing.Address_(this, false);
			}

			public virtual Hamlet.P<Hamlet.FIELDSET<T>> P(string selector)
			{
				return HamletImpl.SetSelector(this.P(), selector);
			}

			public virtual Hamlet.P<Hamlet.FIELDSET<T>> P()
			{
				this.CloseAttrs();
				return this._enclosing.P(this, false);
			}

			public virtual Hamlet.FIELDSET<T> (Type cls)
			{
				this._v(cls);
				return this;
			}

			public virtual Hamlet.HR<Hamlet.FIELDSET<T>> Hr()
			{
				this.CloseAttrs();
				return this._enclosing.Hr_(this, false);
			}

			public virtual Hamlet.FIELDSET<T> Hr(string selector)
			{
				return HamletImpl.SetSelector(this.Hr(), selector).();
			}

			public virtual Hamlet.DL<Hamlet.FIELDSET<T>> Dl(string selector)
			{
				return HamletImpl.SetSelector(this.Dl(), selector);
			}

			public virtual Hamlet.DL<Hamlet.FIELDSET<T>> Dl()
			{
				this.CloseAttrs();
				return this._enclosing.Dl_(this, false);
			}

			public virtual Hamlet.DIV<Hamlet.FIELDSET<T>> Div(string selector)
			{
				return HamletImpl.SetSelector(this.Div(), selector);
			}

			public virtual Hamlet.DIV<Hamlet.FIELDSET<T>> Div()
			{
				this.CloseAttrs();
				return this._enclosing.Div_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.FIELDSET<T>> Blockquote()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.FIELDSET<T>> Bq()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.FIELDSET<T> H1(string cdata)
			{
				return this.H1().(cdata).();
			}

			public virtual Hamlet.H1<Hamlet.FIELDSET<T>> H1()
			{
				this.CloseAttrs();
				return this._enclosing.H1(this, false);
			}

			public virtual Hamlet.FIELDSET<T> H1(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H1(), selector).(cdata).();
			}

			public virtual Hamlet.FIELDSET<T> H2(string cdata)
			{
				return this.H2().(cdata).();
			}

			public virtual Hamlet.H2<Hamlet.FIELDSET<T>> H2()
			{
				this.CloseAttrs();
				return this._enclosing.H2(this, false);
			}

			public virtual Hamlet.FIELDSET<T> H2(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H2(), selector).(cdata).();
			}

			public virtual Hamlet.H3<Hamlet.FIELDSET<T>> H3()
			{
				this.CloseAttrs();
				return this._enclosing.H3(this, false);
			}

			public virtual Hamlet.FIELDSET<T> H3(string cdata)
			{
				return this.H3().(cdata).();
			}

			public virtual Hamlet.FIELDSET<T> H3(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H3(), selector).(cdata).();
			}

			public virtual Hamlet.H4<Hamlet.FIELDSET<T>> H4()
			{
				this.CloseAttrs();
				return this._enclosing.H4(this, false);
			}

			public virtual Hamlet.FIELDSET<T> H4(string cdata)
			{
				return this.H4().(cdata).();
			}

			public virtual Hamlet.FIELDSET<T> H4(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H4(), selector).(cdata).();
			}

			public virtual Hamlet.H5<Hamlet.FIELDSET<T>> H5()
			{
				this.CloseAttrs();
				return this._enclosing.H5(this, false);
			}

			public virtual Hamlet.FIELDSET<T> H5(string cdata)
			{
				return this.H5().(cdata).();
			}

			public virtual Hamlet.FIELDSET<T> H5(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H5(), selector).(cdata).();
			}

			public virtual Hamlet.H6<Hamlet.FIELDSET<T>> H6()
			{
				this.CloseAttrs();
				return this._enclosing.H6(this, false);
			}

			public virtual Hamlet.FIELDSET<T> H6(string cdata)
			{
				return this.H6().(cdata).();
			}

			public virtual Hamlet.FIELDSET<T> H6(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H6(), selector).(cdata).();
			}

			public virtual Hamlet.UL<Hamlet.FIELDSET<T>> Ul()
			{
				this.CloseAttrs();
				return this._enclosing.Ul_(this, false);
			}

			public virtual Hamlet.UL<Hamlet.FIELDSET<T>> Ul(string selector)
			{
				return HamletImpl.SetSelector(this.Ul(), selector);
			}

			public virtual Hamlet.OL<Hamlet.FIELDSET<T>> Ol()
			{
				this.CloseAttrs();
				return this._enclosing.Ol_(this, false);
			}

			public virtual Hamlet.OL<Hamlet.FIELDSET<T>> Ol(string selector)
			{
				return HamletImpl.SetSelector(this.Ol(), selector);
			}

			public virtual Hamlet.PRE<Hamlet.FIELDSET<T>> Pre()
			{
				this.CloseAttrs();
				return this._enclosing.Pre_(this, false);
			}

			public virtual Hamlet.PRE<Hamlet.FIELDSET<T>> Pre(string selector)
			{
				return HamletImpl.SetSelector(this.Pre(), selector);
			}

			public virtual Hamlet.FORM<Hamlet.FIELDSET<T>> Form()
			{
				this.CloseAttrs();
				return this._enclosing.Form_(this, false);
			}

			public virtual Hamlet.FORM<Hamlet.FIELDSET<T>> Form(string selector)
			{
				return HamletImpl.SetSelector(this.Form(), selector);
			}

			public virtual Hamlet.FIELDSET<Hamlet.FIELDSET<T>> Fieldset()
			{
				this.CloseAttrs();
				return this._enclosing.Fieldset_(this, false);
			}

			public virtual Hamlet.FIELDSET<Hamlet.FIELDSET<T>> Fieldset(string selector)
			{
				return HamletImpl.SetSelector(this.Fieldset(), selector);
			}

			public virtual Hamlet.B<Hamlet.FIELDSET<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.FIELDSET<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.FIELDSET<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.FIELDSET<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.FIELDSET<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.FIELDSET<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.FIELDSET<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.FIELDSET<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.FIELDSET<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.FIELDSET<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.FIELDSET<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.FIELDSET<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.FIELDSET<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.FIELDSET<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.FIELDSET<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.FIELDSET<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.FIELDSET<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.FIELDSET<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.FIELDSET<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.FIELDSET<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.FIELDSET<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.FIELDSET<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.FIELDSET<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.FIELDSET<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.FIELDSET<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.FIELDSET<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.FIELDSET<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.FIELDSET<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.FIELDSET<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.FIELDSET<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.FIELDSET<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.FIELDSET<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.FIELDSET<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.FIELDSET<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.FIELDSET<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.FIELDSET<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.FIELDSET<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.FIELDSET<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.FIELDSET<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.FIELDSET<T> A(string selector, string href, string anchorText
				)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.FIELDSET<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.FIELDSET<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.FIELDSET<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.FIELDSET<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.FIELDSET<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.FIELDSET<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.FIELDSET<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.FIELDSET<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.FIELDSET<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.FIELDSET<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.FIELDSET<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.FIELDSET<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.FIELDSET<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.FIELDSET<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.FIELDSET<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.FIELDSET<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.FIELDSET<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.FIELDSET<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.FIELDSET<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.FIELDSET<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.FIELDSET<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.FIELDSET<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.FIELDSET<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.FIELDSET<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.FIELDSET<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.FIELDSET<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.FIELDSET<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.FIELDSET<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.FIELDSET<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.FIELDSET<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.FIELDSET<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.FIELDSET<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.FIELDSET<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.FIELDSET<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.FIELDSET<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.FIELDSET<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.FIELDSET<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.FIELDSET<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.FIELDSET<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.FIELDSET<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		private Hamlet.LEGEND<T> Legend_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.LEGEND<T>(this, "legend", e, Opt(true, inline, false));
		}

		public class TEXTAREA<T> : HamletImpl.EImp<T>, HamletSpec.TEXTAREA
			where T : HamletSpec._
		{
			public TEXTAREA(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt
				> opts)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.TEXTAREA<T> $name(string value)
			{
				this.AddAttr("name", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $disabled()
			{
				this.AddAttr("disabled", null);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $tabindex(int value)
			{
				this.AddAttr("tabindex", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $accesskey(string value)
			{
				this.AddAttr("accesskey", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $onfocus(string value)
			{
				this.AddAttr("onfocus", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $onblur(string value)
			{
				this.AddAttr("onblur", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $rows(int value)
			{
				this.AddAttr("rows", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $cols(int value)
			{
				this.AddAttr("cols", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $readonly()
			{
				this.AddAttr("readonly", null);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $onselect(string value)
			{
				this.AddAttr("onselect", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $onchange(string value)
			{
				this.AddAttr("onchange", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.TEXTAREA<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			private readonly Hamlet _enclosing;
		}

		public class OPTION<T> : HamletImpl.EImp<T>, HamletSpec.OPTION
			where T : HamletSpec._
		{
			public OPTION(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> 
				opts)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.OPTION<T> $value(string value)
			{
				this.AddAttr("value", value);
				return this;
			}

			public virtual Hamlet.OPTION<T> $disabled()
			{
				this.AddAttr("disabled", null);
				return this;
			}

			public virtual Hamlet.OPTION<T> $selected()
			{
				this.AddAttr("selected", null);
				return this;
			}

			public virtual Hamlet.OPTION<T> $label(string value)
			{
				this.AddAttr("label", value);
				return this;
			}

			public virtual Hamlet.OPTION<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.OPTION<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.OPTION<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.OPTION<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.OPTION<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.OPTION<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.OPTION<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.OPTION<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.OPTION<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.OPTION<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.OPTION<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.OPTION<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.OPTION<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.OPTION<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.OPTION<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.OPTION<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.OPTION<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.OPTION<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			private readonly Hamlet _enclosing;
		}

		public class OPTGROUP<T> : HamletImpl.EImp<T>, HamletSpec.OPTGROUP
			where T : HamletSpec._
		{
			public OPTGROUP(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt
				> opts)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.OPTGROUP<T> $disabled()
			{
				this.AddAttr("disabled", null);
				return this;
			}

			public virtual Hamlet.OPTGROUP<T> $label(string value)
			{
				this.AddAttr("label", value);
				return this;
			}

			public virtual Hamlet.OPTGROUP<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.OPTGROUP<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.OPTGROUP<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.OPTGROUP<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.OPTGROUP<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.OPTGROUP<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.OPTGROUP<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.OPTGROUP<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.OPTGROUP<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.OPTGROUP<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.OPTGROUP<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.OPTGROUP<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.OPTGROUP<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.OPTGROUP<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.OPTGROUP<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.OPTGROUP<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.OPTION<Hamlet.OPTGROUP<T>> Option()
			{
				this.CloseAttrs();
				return this._enclosing.Option_(this, false);
			}

			public virtual Hamlet.OPTGROUP<T> Option(string cdata)
			{
				return this.Option().(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		private Hamlet.OPTGROUP<T> Optgroup_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.OPTGROUP<T>(this, "optgroup", e, Opt(true, inline, false));
		}

		public class SELECT<T> : HamletImpl.EImp<T>, HamletSpec.SELECT
			where T : HamletSpec._
		{
			public SELECT(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> 
				opts)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.SELECT<T> $name(string value)
			{
				this.AddAttr("name", value);
				return this;
			}

			public virtual Hamlet.SELECT<T> $disabled()
			{
				this.AddAttr("disabled", null);
				return this;
			}

			public virtual Hamlet.SELECT<T> $tabindex(int value)
			{
				this.AddAttr("tabindex", value);
				return this;
			}

			public virtual Hamlet.SELECT<T> $onfocus(string value)
			{
				this.AddAttr("onfocus", value);
				return this;
			}

			public virtual Hamlet.SELECT<T> $onblur(string value)
			{
				this.AddAttr("onblur", value);
				return this;
			}

			public virtual Hamlet.SELECT<T> $onchange(string value)
			{
				this.AddAttr("onchange", value);
				return this;
			}

			public virtual Hamlet.OPTGROUP<Hamlet.SELECT<T>> Optgroup()
			{
				this.CloseAttrs();
				return this._enclosing.Optgroup_(this, false);
			}

			public virtual Hamlet.SELECT<T> $size(int value)
			{
				this.AddAttr("size", value);
				return this;
			}

			public virtual Hamlet.SELECT<T> $multiple()
			{
				this.AddAttr("multiple", null);
				return this;
			}

			public virtual Hamlet.SELECT<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.SELECT<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.SELECT<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.SELECT<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.SELECT<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.SELECT<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.SELECT<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.SELECT<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.SELECT<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.SELECT<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.SELECT<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.SELECT<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.SELECT<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.SELECT<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.SELECT<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.SELECT<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.OPTION<Hamlet.SELECT<T>> Option()
			{
				this.CloseAttrs();
				return this._enclosing.Option_(this, false);
			}

			public virtual Hamlet.SELECT<T> Option(string cdata)
			{
				return this.Option().(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		private Hamlet.OPTION<T> Option_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.OPTION<T>(this, "option", e, Opt(false, inline, false));
		}

		public class INPUT<T> : HamletImpl.EImp<T>, HamletSpec.INPUT
			where T : HamletSpec._
		{
			public INPUT(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.INPUT<T> $type(HamletSpec.InputType value)
			{
				this.AddAttr("type", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $src(string value)
			{
				this.AddAttr("src", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $name(string value)
			{
				this.AddAttr("name", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $value(string value)
			{
				this.AddAttr("value", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $disabled()
			{
				this.AddAttr("disabled", null);
				return this;
			}

			public virtual Hamlet.INPUT<T> $tabindex(int value)
			{
				this.AddAttr("tabindex", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $accesskey(string value)
			{
				this.AddAttr("accesskey", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $onfocus(string value)
			{
				this.AddAttr("onfocus", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $onblur(string value)
			{
				this.AddAttr("onblur", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $readonly()
			{
				this.AddAttr("readonly", null);
				return this;
			}

			public virtual Hamlet.INPUT<T> $onselect(string value)
			{
				this.AddAttr("onselect", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $onchange(string value)
			{
				this.AddAttr("onchange", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $size(string value)
			{
				this.AddAttr("size", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $checked()
			{
				this.AddAttr("checked", null);
				return this;
			}

			public virtual Hamlet.INPUT<T> $maxlength(int value)
			{
				this.AddAttr("maxlength", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $alt(string value)
			{
				this.AddAttr("alt", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $ismap()
			{
				this.AddAttr("ismap", null);
				return this;
			}

			public virtual Hamlet.INPUT<T> $accept(string value)
			{
				this.AddAttr("accept", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.INPUT<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			private readonly Hamlet _enclosing;
		}

		public class LABEL<T> : HamletImpl.EImp<T>, HamletSpec.LABEL
			where T : HamletSpec._
		{
			public LABEL(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.LABEL<T> $accesskey(string value)
			{
				this.AddAttr("accesskey", value);
				return this;
			}

			public virtual Hamlet.LABEL<T> $onfocus(string value)
			{
				this.AddAttr("onfocus", value);
				return this;
			}

			public virtual Hamlet.LABEL<T> $onblur(string value)
			{
				this.AddAttr("onblur", value);
				return this;
			}

			public virtual Hamlet.LABEL<T> $for(string value)
			{
				this.AddAttr("for", value);
				return this;
			}

			public virtual Hamlet.LABEL<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.LABEL<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.LABEL<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.LABEL<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.LABEL<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.LABEL<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.LABEL<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.LABEL<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.LABEL<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.LABEL<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.LABEL<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.LABEL<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.LABEL<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.LABEL<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.LABEL<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.LABEL<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.LABEL<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.LABEL<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.LABEL<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.LABEL<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.LABEL<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.LABEL<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.LABEL<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.LABEL<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.LABEL<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.LABEL<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.LABEL<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.LABEL<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.LABEL<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.LABEL<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.LABEL<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.LABEL<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.LABEL<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.LABEL<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.LABEL<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.LABEL<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.LABEL<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.LABEL<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.LABEL<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.LABEL<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.LABEL<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.LABEL<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.LABEL<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.LABEL<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.LABEL<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.LABEL<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.LABEL<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.LABEL<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.LABEL<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.LABEL<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.LABEL<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.LABEL<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.LABEL<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.LABEL<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.LABEL<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.LABEL<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.LABEL<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.LABEL<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.LABEL<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.LABEL<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.LABEL<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.LABEL<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.LABEL<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.LABEL<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.LABEL<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.LABEL<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.LABEL<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.LABEL<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.LABEL<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.LABEL<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.LABEL<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.LABEL<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.LABEL<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.LABEL<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.LABEL<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.LABEL<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.LABEL<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.LABEL<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.LABEL<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.LABEL<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.LABEL<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.LABEL<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.LABEL<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.LABEL<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.LABEL<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.LABEL<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.LABEL<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.LABEL<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.LABEL<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.LABEL<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.LABEL<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.LABEL<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.LABEL<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.LABEL<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.LABEL<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.LABEL<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class FORM<T> : HamletImpl.EImp<T>, HamletSpec.FORM
			where T : HamletSpec._
		{
			public FORM(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.FORM<T> $name(string value)
			{
				this.AddAttr("name", value);
				return this;
			}

			public virtual Hamlet.FORM<T> $accept(string value)
			{
				this.AddAttr("accept", value);
				return this;
			}

			public virtual Hamlet.FORM<T> $action(string value)
			{
				this.AddAttr("action", value);
				return this;
			}

			public virtual Hamlet.FORM<T> $method(HamletSpec.Method value)
			{
				this.AddAttr("method", value);
				return this;
			}

			public virtual Hamlet.FORM<T> $enctype(string value)
			{
				this.AddAttr("enctype", value);
				return this;
			}

			public virtual Hamlet.FORM<T> $onsubmit(string value)
			{
				this.AddAttr("onsubmit", value);
				return this;
			}

			public virtual Hamlet.FORM<T> $onreset(string value)
			{
				this.AddAttr("onreset", value);
				return this;
			}

			public virtual Hamlet.FORM<T> $accept_charset(string value)
			{
				this.AddAttr("accept-charset", value);
				return this;
			}

			public virtual Hamlet.FORM<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.FORM<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.FORM<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.FORM<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.FORM<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.FORM<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.FORM<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.FORM<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.FORM<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.FORM<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.FORM<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.FORM<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.FORM<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.FORM<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.FORM<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.FORM<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.SCRIPT<Hamlet.FORM<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.FORM<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.TABLE<Hamlet.FORM<T>> Table()
			{
				this.CloseAttrs();
				return this._enclosing.Table_(this, false);
			}

			public virtual Hamlet.TABLE<Hamlet.FORM<T>> Table(string selector)
			{
				return HamletImpl.SetSelector(this.Table(), selector);
			}

			public virtual Hamlet.FORM<T> Address(string cdata)
			{
				return this.Address().(cdata).();
			}

			public virtual Hamlet.ADDRESS<Hamlet.FORM<T>> Address()
			{
				this.CloseAttrs();
				return this._enclosing.Address_(this, false);
			}

			public virtual Hamlet.P<Hamlet.FORM<T>> P(string selector)
			{
				return HamletImpl.SetSelector(this.P(), selector);
			}

			public virtual Hamlet.P<Hamlet.FORM<T>> P()
			{
				this.CloseAttrs();
				return this._enclosing.P(this, false);
			}

			public virtual Hamlet.FORM<T> (Type cls)
			{
				this._v(cls);
				return this;
			}

			public virtual Hamlet.HR<Hamlet.FORM<T>> Hr()
			{
				this.CloseAttrs();
				return this._enclosing.Hr_(this, false);
			}

			public virtual Hamlet.FORM<T> Hr(string selector)
			{
				return HamletImpl.SetSelector(this.Hr(), selector).();
			}

			public virtual Hamlet.DL<Hamlet.FORM<T>> Dl(string selector)
			{
				return HamletImpl.SetSelector(this.Dl(), selector);
			}

			public virtual Hamlet.DL<Hamlet.FORM<T>> Dl()
			{
				this.CloseAttrs();
				return this._enclosing.Dl_(this, false);
			}

			public virtual Hamlet.DIV<Hamlet.FORM<T>> Div(string selector)
			{
				return HamletImpl.SetSelector(this.Div(), selector);
			}

			public virtual Hamlet.DIV<Hamlet.FORM<T>> Div()
			{
				this.CloseAttrs();
				return this._enclosing.Div_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.FORM<T>> Blockquote()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.FORM<T>> Bq()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.FORM<T> H1(string cdata)
			{
				return this.H1().(cdata).();
			}

			public virtual Hamlet.H1<Hamlet.FORM<T>> H1()
			{
				this.CloseAttrs();
				return this._enclosing.H1(this, false);
			}

			public virtual Hamlet.FORM<T> H1(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H1(), selector).(cdata).();
			}

			public virtual Hamlet.FORM<T> H2(string cdata)
			{
				return this.H2().(cdata).();
			}

			public virtual Hamlet.H2<Hamlet.FORM<T>> H2()
			{
				this.CloseAttrs();
				return this._enclosing.H2(this, false);
			}

			public virtual Hamlet.FORM<T> H2(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H2(), selector).(cdata).();
			}

			public virtual Hamlet.H3<Hamlet.FORM<T>> H3()
			{
				this.CloseAttrs();
				return this._enclosing.H3(this, false);
			}

			public virtual Hamlet.FORM<T> H3(string cdata)
			{
				return this.H3().(cdata).();
			}

			public virtual Hamlet.FORM<T> H3(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H3(), selector).(cdata).();
			}

			public virtual Hamlet.H4<Hamlet.FORM<T>> H4()
			{
				this.CloseAttrs();
				return this._enclosing.H4(this, false);
			}

			public virtual Hamlet.FORM<T> H4(string cdata)
			{
				return this.H4().(cdata).();
			}

			public virtual Hamlet.FORM<T> H4(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H4(), selector).(cdata).();
			}

			public virtual Hamlet.H5<Hamlet.FORM<T>> H5()
			{
				this.CloseAttrs();
				return this._enclosing.H5(this, false);
			}

			public virtual Hamlet.FORM<T> H5(string cdata)
			{
				return this.H5().(cdata).();
			}

			public virtual Hamlet.FORM<T> H5(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H5(), selector).(cdata).();
			}

			public virtual Hamlet.H6<Hamlet.FORM<T>> H6()
			{
				this.CloseAttrs();
				return this._enclosing.H6(this, false);
			}

			public virtual Hamlet.FORM<T> H6(string cdata)
			{
				return this.H6().(cdata).();
			}

			public virtual Hamlet.FORM<T> H6(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H6(), selector).(cdata).();
			}

			public virtual Hamlet.UL<Hamlet.FORM<T>> Ul()
			{
				this.CloseAttrs();
				return this._enclosing.Ul_(this, false);
			}

			public virtual Hamlet.UL<Hamlet.FORM<T>> Ul(string selector)
			{
				return HamletImpl.SetSelector(this.Ul(), selector);
			}

			public virtual Hamlet.OL<Hamlet.FORM<T>> Ol()
			{
				this.CloseAttrs();
				return this._enclosing.Ol_(this, false);
			}

			public virtual Hamlet.OL<Hamlet.FORM<T>> Ol(string selector)
			{
				return HamletImpl.SetSelector(this.Ol(), selector);
			}

			public virtual Hamlet.PRE<Hamlet.FORM<T>> Pre()
			{
				this.CloseAttrs();
				return this._enclosing.Pre_(this, false);
			}

			public virtual Hamlet.PRE<Hamlet.FORM<T>> Pre(string selector)
			{
				return HamletImpl.SetSelector(this.Pre(), selector);
			}

			public virtual Hamlet.FIELDSET<Hamlet.FORM<T>> Fieldset()
			{
				this.CloseAttrs();
				return this._enclosing.Fieldset_(this, false);
			}

			public virtual Hamlet.FIELDSET<Hamlet.FORM<T>> Fieldset(string selector)
			{
				return HamletImpl.SetSelector(this.Fieldset(), selector);
			}

			private readonly Hamlet _enclosing;
		}

		public class LI<T> : HamletImpl.EImp<T>, HamletSpec.LI
			where T : HamletSpec._
		{
			public LI(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.LI<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.LI<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.LI<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.LI<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.LI<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.LI<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.LI<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.LI<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.LI<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.LI<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.LI<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.LI<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.LI<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.LI<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.LI<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.LI<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.TABLE<Hamlet.LI<T>> Table()
			{
				this.CloseAttrs();
				return this._enclosing.Table_(this, false);
			}

			public virtual Hamlet.TABLE<Hamlet.LI<T>> Table(string selector)
			{
				return HamletImpl.SetSelector(this.Table(), selector);
			}

			public virtual Hamlet.LI<T> Address(string cdata)
			{
				return this.Address().(cdata).();
			}

			public virtual Hamlet.ADDRESS<Hamlet.LI<T>> Address()
			{
				this.CloseAttrs();
				return this._enclosing.Address_(this, false);
			}

			public virtual Hamlet.P<Hamlet.LI<T>> P(string selector)
			{
				return HamletImpl.SetSelector(this.P(), selector);
			}

			public virtual Hamlet.P<Hamlet.LI<T>> P()
			{
				this.CloseAttrs();
				return this._enclosing.P(this, false);
			}

			public virtual Hamlet.LI<T> (Type cls)
			{
				this._v(cls);
				return this;
			}

			public virtual Hamlet.HR<Hamlet.LI<T>> Hr()
			{
				this.CloseAttrs();
				return this._enclosing.Hr_(this, false);
			}

			public virtual Hamlet.LI<T> Hr(string selector)
			{
				return HamletImpl.SetSelector(this.Hr(), selector).();
			}

			public virtual Hamlet.DL<Hamlet.LI<T>> Dl(string selector)
			{
				return HamletImpl.SetSelector(this.Dl(), selector);
			}

			public virtual Hamlet.DL<Hamlet.LI<T>> Dl()
			{
				this.CloseAttrs();
				return this._enclosing.Dl_(this, false);
			}

			public virtual Hamlet.DIV<Hamlet.LI<T>> Div(string selector)
			{
				return HamletImpl.SetSelector(this.Div(), selector);
			}

			public virtual Hamlet.DIV<Hamlet.LI<T>> Div()
			{
				this.CloseAttrs();
				return this._enclosing.Div_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.LI<T>> Blockquote()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.LI<T>> Bq()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.LI<T> H1(string cdata)
			{
				return this.H1().(cdata).();
			}

			public virtual Hamlet.H1<Hamlet.LI<T>> H1()
			{
				this.CloseAttrs();
				return this._enclosing.H1(this, false);
			}

			public virtual Hamlet.LI<T> H1(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H1(), selector).(cdata).();
			}

			public virtual Hamlet.LI<T> H2(string cdata)
			{
				return this.H2().(cdata).();
			}

			public virtual Hamlet.H2<Hamlet.LI<T>> H2()
			{
				this.CloseAttrs();
				return this._enclosing.H2(this, false);
			}

			public virtual Hamlet.LI<T> H2(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H2(), selector).(cdata).();
			}

			public virtual Hamlet.H3<Hamlet.LI<T>> H3()
			{
				this.CloseAttrs();
				return this._enclosing.H3(this, false);
			}

			public virtual Hamlet.LI<T> H3(string cdata)
			{
				return this.H3().(cdata).();
			}

			public virtual Hamlet.LI<T> H3(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H3(), selector).(cdata).();
			}

			public virtual Hamlet.H4<Hamlet.LI<T>> H4()
			{
				this.CloseAttrs();
				return this._enclosing.H4(this, false);
			}

			public virtual Hamlet.LI<T> H4(string cdata)
			{
				return this.H4().(cdata).();
			}

			public virtual Hamlet.LI<T> H4(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H4(), selector).(cdata).();
			}

			public virtual Hamlet.H5<Hamlet.LI<T>> H5()
			{
				this.CloseAttrs();
				return this._enclosing.H5(this, false);
			}

			public virtual Hamlet.LI<T> H5(string cdata)
			{
				return this.H5().(cdata).();
			}

			public virtual Hamlet.LI<T> H5(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H5(), selector).(cdata).();
			}

			public virtual Hamlet.H6<Hamlet.LI<T>> H6()
			{
				this.CloseAttrs();
				return this._enclosing.H6(this, false);
			}

			public virtual Hamlet.LI<T> H6(string cdata)
			{
				return this.H6().(cdata).();
			}

			public virtual Hamlet.LI<T> H6(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H6(), selector).(cdata).();
			}

			public virtual Hamlet.UL<Hamlet.LI<T>> Ul()
			{
				this.CloseAttrs();
				return this._enclosing.Ul_(this, false);
			}

			public virtual Hamlet.UL<Hamlet.LI<T>> Ul(string selector)
			{
				return HamletImpl.SetSelector(this.Ul(), selector);
			}

			public virtual Hamlet.OL<Hamlet.LI<T>> Ol()
			{
				this.CloseAttrs();
				return this._enclosing.Ol_(this, false);
			}

			public virtual Hamlet.OL<Hamlet.LI<T>> Ol(string selector)
			{
				return HamletImpl.SetSelector(this.Ol(), selector);
			}

			public virtual Hamlet.PRE<Hamlet.LI<T>> Pre()
			{
				this.CloseAttrs();
				return this._enclosing.Pre_(this, false);
			}

			public virtual Hamlet.PRE<Hamlet.LI<T>> Pre(string selector)
			{
				return HamletImpl.SetSelector(this.Pre(), selector);
			}

			public virtual Hamlet.FORM<Hamlet.LI<T>> Form()
			{
				this.CloseAttrs();
				return this._enclosing.Form_(this, false);
			}

			public virtual Hamlet.FORM<Hamlet.LI<T>> Form(string selector)
			{
				return HamletImpl.SetSelector(this.Form(), selector);
			}

			public virtual Hamlet.FIELDSET<Hamlet.LI<T>> Fieldset()
			{
				this.CloseAttrs();
				return this._enclosing.Fieldset_(this, false);
			}

			public virtual Hamlet.FIELDSET<Hamlet.LI<T>> Fieldset(string selector)
			{
				return HamletImpl.SetSelector(this.Fieldset(), selector);
			}

			public virtual Hamlet.LI<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.LI<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.LI<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.LI<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.LI<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.LI<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.LI<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.LI<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.LI<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.LI<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.LI<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.LI<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.LI<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.LI<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.LI<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.LI<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.LI<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.LI<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.LI<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.LI<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.LI<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.LI<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.LI<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.LI<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.LI<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.LI<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.LI<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.LI<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.LI<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.LI<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.LI<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.LI<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.LI<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.LI<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.LI<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.LI<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.LI<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.LI<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.LI<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.LI<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.LI<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.LI<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.LI<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.LI<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.LI<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.LI<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.LI<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.LI<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.LI<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.LI<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.LI<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.LI<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.LI<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.LI<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.LI<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.LI<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.LI<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.LI<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.LI<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.LI<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.LI<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.LI<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.LI<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.LI<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.LI<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.LI<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.LI<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.LI<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.LI<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.LI<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.LI<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.LI<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.LI<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.LI<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.LI<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.LI<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.LI<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.LI<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.LI<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.LI<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.LI<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.LI<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class UL<T> : HamletImpl.EImp<T>, HamletSpec.UL
			where T : HamletSpec._
		{
			public UL(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.UL<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.UL<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.UL<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.UL<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.UL<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.UL<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.UL<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.UL<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.UL<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.UL<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.UL<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.UL<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.UL<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.UL<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.UL<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.UL<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.LI<Hamlet.UL<T>> Li()
			{
				this.CloseAttrs();
				return this._enclosing.Li_(this, false);
			}

			public virtual Hamlet.UL<T> Li(string cdata)
			{
				return this.Li().(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class OL<T> : HamletImpl.EImp<T>, HamletSpec.OL
			where T : HamletSpec._
		{
			public OL(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.OL<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.OL<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.OL<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.OL<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.OL<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.OL<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.OL<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.OL<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.OL<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.OL<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.OL<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.OL<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.OL<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.OL<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.OL<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.OL<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.LI<Hamlet.OL<T>> Li()
			{
				this.CloseAttrs();
				return this._enclosing.Li_(this, false);
			}

			public virtual Hamlet.OL<T> Li(string cdata)
			{
				return this.Li().(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		private Hamlet.LI<T> Li_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.LI<T>(this, "li", e, Opt(false, inline, false));
		}

		public class DD<T> : HamletImpl.EImp<T>, HamletSpec.DD
			where T : HamletSpec._
		{
			public DD(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.DD<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.DD<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.DD<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.DD<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.DD<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.DD<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.DD<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.DD<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.DD<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.DD<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.DD<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.DD<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.DD<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.DD<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.DD<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.DD<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.TABLE<Hamlet.DD<T>> Table()
			{
				this.CloseAttrs();
				return this._enclosing.Table_(this, false);
			}

			public virtual Hamlet.TABLE<Hamlet.DD<T>> Table(string selector)
			{
				return HamletImpl.SetSelector(this.Table(), selector);
			}

			public virtual Hamlet.DD<T> Address(string cdata)
			{
				return this.Address().(cdata).();
			}

			public virtual Hamlet.ADDRESS<Hamlet.DD<T>> Address()
			{
				this.CloseAttrs();
				return this._enclosing.Address_(this, false);
			}

			public virtual Hamlet.P<Hamlet.DD<T>> P(string selector)
			{
				return HamletImpl.SetSelector(this.P(), selector);
			}

			public virtual Hamlet.P<Hamlet.DD<T>> P()
			{
				this.CloseAttrs();
				return this._enclosing.P(this, false);
			}

			public virtual Hamlet.DD<T> (Type cls)
			{
				this._v(cls);
				return this;
			}

			public virtual Hamlet.HR<Hamlet.DD<T>> Hr()
			{
				this.CloseAttrs();
				return this._enclosing.Hr_(this, false);
			}

			public virtual Hamlet.DD<T> Hr(string selector)
			{
				return HamletImpl.SetSelector(this.Hr(), selector).();
			}

			public virtual Hamlet.DL<Hamlet.DD<T>> Dl(string selector)
			{
				return HamletImpl.SetSelector(this.Dl(), selector);
			}

			public virtual Hamlet.DL<Hamlet.DD<T>> Dl()
			{
				this.CloseAttrs();
				return this._enclosing.Dl_(this, false);
			}

			public virtual Hamlet.DIV<Hamlet.DD<T>> Div(string selector)
			{
				return HamletImpl.SetSelector(this.Div(), selector);
			}

			public virtual Hamlet.DIV<Hamlet.DD<T>> Div()
			{
				this.CloseAttrs();
				return this._enclosing.Div_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.DD<T>> Blockquote()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.DD<T>> Bq()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.DD<T> H1(string cdata)
			{
				return this.H1().(cdata).();
			}

			public virtual Hamlet.H1<Hamlet.DD<T>> H1()
			{
				this.CloseAttrs();
				return this._enclosing.H1(this, false);
			}

			public virtual Hamlet.DD<T> H1(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H1(), selector).(cdata).();
			}

			public virtual Hamlet.DD<T> H2(string cdata)
			{
				return this.H2().(cdata).();
			}

			public virtual Hamlet.H2<Hamlet.DD<T>> H2()
			{
				this.CloseAttrs();
				return this._enclosing.H2(this, false);
			}

			public virtual Hamlet.DD<T> H2(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H2(), selector).(cdata).();
			}

			public virtual Hamlet.H3<Hamlet.DD<T>> H3()
			{
				this.CloseAttrs();
				return this._enclosing.H3(this, false);
			}

			public virtual Hamlet.DD<T> H3(string cdata)
			{
				return this.H3().(cdata).();
			}

			public virtual Hamlet.DD<T> H3(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H3(), selector).(cdata).();
			}

			public virtual Hamlet.H4<Hamlet.DD<T>> H4()
			{
				this.CloseAttrs();
				return this._enclosing.H4(this, false);
			}

			public virtual Hamlet.DD<T> H4(string cdata)
			{
				return this.H4().(cdata).();
			}

			public virtual Hamlet.DD<T> H4(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H4(), selector).(cdata).();
			}

			public virtual Hamlet.H5<Hamlet.DD<T>> H5()
			{
				this.CloseAttrs();
				return this._enclosing.H5(this, false);
			}

			public virtual Hamlet.DD<T> H5(string cdata)
			{
				return this.H5().(cdata).();
			}

			public virtual Hamlet.DD<T> H5(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H5(), selector).(cdata).();
			}

			public virtual Hamlet.H6<Hamlet.DD<T>> H6()
			{
				this.CloseAttrs();
				return this._enclosing.H6(this, false);
			}

			public virtual Hamlet.DD<T> H6(string cdata)
			{
				return this.H6().(cdata).();
			}

			public virtual Hamlet.DD<T> H6(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H6(), selector).(cdata).();
			}

			public virtual Hamlet.UL<Hamlet.DD<T>> Ul()
			{
				this.CloseAttrs();
				return this._enclosing.Ul_(this, false);
			}

			public virtual Hamlet.UL<Hamlet.DD<T>> Ul(string selector)
			{
				return HamletImpl.SetSelector(this.Ul(), selector);
			}

			public virtual Hamlet.OL<Hamlet.DD<T>> Ol()
			{
				this.CloseAttrs();
				return this._enclosing.Ol_(this, false);
			}

			public virtual Hamlet.OL<Hamlet.DD<T>> Ol(string selector)
			{
				return HamletImpl.SetSelector(this.Ol(), selector);
			}

			public virtual Hamlet.PRE<Hamlet.DD<T>> Pre()
			{
				this.CloseAttrs();
				return this._enclosing.Pre_(this, false);
			}

			public virtual Hamlet.PRE<Hamlet.DD<T>> Pre(string selector)
			{
				return HamletImpl.SetSelector(this.Pre(), selector);
			}

			public virtual Hamlet.FORM<Hamlet.DD<T>> Form()
			{
				this.CloseAttrs();
				return this._enclosing.Form_(this, false);
			}

			public virtual Hamlet.FORM<Hamlet.DD<T>> Form(string selector)
			{
				return HamletImpl.SetSelector(this.Form(), selector);
			}

			public virtual Hamlet.FIELDSET<Hamlet.DD<T>> Fieldset()
			{
				this.CloseAttrs();
				return this._enclosing.Fieldset_(this, false);
			}

			public virtual Hamlet.FIELDSET<Hamlet.DD<T>> Fieldset(string selector)
			{
				return HamletImpl.SetSelector(this.Fieldset(), selector);
			}

			public virtual Hamlet.DD<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.DD<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.DD<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.DD<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.DD<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.DD<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.DD<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.DD<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.DD<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.DD<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.DD<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.DD<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.DD<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.DD<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.DD<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.DD<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.DD<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.DD<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.DD<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.DD<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.DD<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.DD<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.DD<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.DD<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.DD<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.DD<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.DD<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.DD<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.DD<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.DD<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.DD<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.DD<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.DD<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.DD<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.DD<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.DD<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.DD<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.DD<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.DD<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.DD<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.DD<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.DD<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.DD<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.DD<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.DD<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.DD<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.DD<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.DD<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.DD<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.DD<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.DD<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.DD<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.DD<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.DD<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.DD<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.DD<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.DD<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.DD<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.DD<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.DD<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.DD<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.DD<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.DD<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.DD<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.DD<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.DD<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.DD<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.DD<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.DD<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.DD<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.DD<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.DD<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.DD<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.DD<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.DD<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.DD<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.DD<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.DD<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.DD<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.DD<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.DD<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.DD<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class DT<T> : HamletImpl.EImp<T>, HamletSpec.DT
			where T : HamletSpec._
		{
			public DT(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.DT<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.DT<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.DT<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.DT<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.DT<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.DT<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.DT<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.DT<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.DT<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.DT<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.DT<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.DT<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.DT<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.DT<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.DT<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.DT<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.DT<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.DT<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.DT<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.DT<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.DT<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.DT<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.DT<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.DT<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.DT<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.DT<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.DT<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.DT<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.DT<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.DT<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.DT<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.DT<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.DT<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.DT<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.DT<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.DT<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.DT<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.DT<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.DT<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.DT<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.DT<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.DT<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.DT<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.DT<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.DT<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.DT<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.DT<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.DT<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.DT<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.DT<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.DT<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.DT<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.DT<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.DT<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.DT<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.DT<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.DT<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.DT<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.DT<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.DT<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.DT<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.DT<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.DT<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.DT<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.DT<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.DT<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.DT<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.DT<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.DT<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.DT<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.DT<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.DT<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.DT<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.DT<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.DT<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.DT<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.DT<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.DT<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.DT<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.DT<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.DT<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.DT<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.DT<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.DT<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.DT<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.DT<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.DT<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.DT<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.DT<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.DT<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.DT<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.DT<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.DT<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.DT<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.DT<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.DT<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.DT<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.DT<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class DL<T> : HamletImpl.EImp<T>, HamletSpec.DL
			where T : HamletSpec._
		{
			public DL(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.DL<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.DL<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.DL<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.DL<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.DL<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.DL<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.DL<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.DL<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.DL<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.DL<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.DL<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.DL<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.DL<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.DL<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.DL<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.DL<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.DT<Hamlet.DL<T>> Dt()
			{
				this.CloseAttrs();
				return this._enclosing.Dt_(this, false);
			}

			public virtual Hamlet.DL<T> Dt(string cdata)
			{
				return this.Dt().(cdata).();
			}

			public virtual Hamlet.DD<Hamlet.DL<T>> Dd()
			{
				this.CloseAttrs();
				return this._enclosing.Dd_(this, false);
			}

			public virtual Hamlet.DL<T> Dd(string cdata)
			{
				return this.Dd().(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		private Hamlet.DT<T> Dt_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.DT<T>(this, "dt", e, Opt(false, inline, false));
		}

		private Hamlet.DD<T> Dd_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.DD<T>(this, "dd", e, Opt(false, inline, false));
		}

		public class DEL<T> : HamletImpl.EImp<T>, HamletSpec.DEL
			where T : HamletSpec._
		{
			public DEL(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.DEL<T> $cite(string value)
			{
				this.AddAttr("cite", value);
				return this;
			}

			public virtual Hamlet.DEL<T> $datetime(string value)
			{
				this.AddAttr("datetime", value);
				return this;
			}

			public virtual Hamlet.DEL<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.DEL<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.DEL<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.DEL<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.DEL<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.DEL<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.DEL<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.DEL<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.DEL<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.DEL<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.DEL<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.DEL<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.DEL<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.DEL<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.DEL<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.DEL<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.TABLE<Hamlet.DEL<T>> Table()
			{
				this.CloseAttrs();
				return this._enclosing.Table_(this, false);
			}

			public virtual Hamlet.TABLE<Hamlet.DEL<T>> Table(string selector)
			{
				return HamletImpl.SetSelector(this.Table(), selector);
			}

			public virtual Hamlet.DEL<T> Address(string cdata)
			{
				return this.Address().(cdata).();
			}

			public virtual Hamlet.ADDRESS<Hamlet.DEL<T>> Address()
			{
				this.CloseAttrs();
				return this._enclosing.Address_(this, false);
			}

			public virtual Hamlet.P<Hamlet.DEL<T>> P(string selector)
			{
				return HamletImpl.SetSelector(this.P(), selector);
			}

			public virtual Hamlet.P<Hamlet.DEL<T>> P()
			{
				this.CloseAttrs();
				return this._enclosing.P(this, false);
			}

			public virtual Hamlet.DEL<T> (Type cls)
			{
				this._v(cls);
				return this;
			}

			public virtual Hamlet.HR<Hamlet.DEL<T>> Hr()
			{
				this.CloseAttrs();
				return this._enclosing.Hr_(this, false);
			}

			public virtual Hamlet.DEL<T> Hr(string selector)
			{
				return HamletImpl.SetSelector(this.Hr(), selector).();
			}

			public virtual Hamlet.DL<Hamlet.DEL<T>> Dl(string selector)
			{
				return HamletImpl.SetSelector(this.Dl(), selector);
			}

			public virtual Hamlet.DL<Hamlet.DEL<T>> Dl()
			{
				this.CloseAttrs();
				return this._enclosing.Dl_(this, false);
			}

			public virtual Hamlet.DIV<Hamlet.DEL<T>> Div(string selector)
			{
				return HamletImpl.SetSelector(this.Div(), selector);
			}

			public virtual Hamlet.DIV<Hamlet.DEL<T>> Div()
			{
				this.CloseAttrs();
				return this._enclosing.Div_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.DEL<T>> Blockquote()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.DEL<T>> Bq()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.DEL<T> H1(string cdata)
			{
				return this.H1().(cdata).();
			}

			public virtual Hamlet.H1<Hamlet.DEL<T>> H1()
			{
				this.CloseAttrs();
				return this._enclosing.H1(this, false);
			}

			public virtual Hamlet.DEL<T> H1(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H1(), selector).(cdata).();
			}

			public virtual Hamlet.DEL<T> H2(string cdata)
			{
				return this.H2().(cdata).();
			}

			public virtual Hamlet.H2<Hamlet.DEL<T>> H2()
			{
				this.CloseAttrs();
				return this._enclosing.H2(this, false);
			}

			public virtual Hamlet.DEL<T> H2(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H2(), selector).(cdata).();
			}

			public virtual Hamlet.H3<Hamlet.DEL<T>> H3()
			{
				this.CloseAttrs();
				return this._enclosing.H3(this, false);
			}

			public virtual Hamlet.DEL<T> H3(string cdata)
			{
				return this.H3().(cdata).();
			}

			public virtual Hamlet.DEL<T> H3(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H3(), selector).(cdata).();
			}

			public virtual Hamlet.H4<Hamlet.DEL<T>> H4()
			{
				this.CloseAttrs();
				return this._enclosing.H4(this, false);
			}

			public virtual Hamlet.DEL<T> H4(string cdata)
			{
				return this.H4().(cdata).();
			}

			public virtual Hamlet.DEL<T> H4(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H4(), selector).(cdata).();
			}

			public virtual Hamlet.H5<Hamlet.DEL<T>> H5()
			{
				this.CloseAttrs();
				return this._enclosing.H5(this, false);
			}

			public virtual Hamlet.DEL<T> H5(string cdata)
			{
				return this.H5().(cdata).();
			}

			public virtual Hamlet.DEL<T> H5(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H5(), selector).(cdata).();
			}

			public virtual Hamlet.H6<Hamlet.DEL<T>> H6()
			{
				this.CloseAttrs();
				return this._enclosing.H6(this, false);
			}

			public virtual Hamlet.DEL<T> H6(string cdata)
			{
				return this.H6().(cdata).();
			}

			public virtual Hamlet.DEL<T> H6(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H6(), selector).(cdata).();
			}

			public virtual Hamlet.UL<Hamlet.DEL<T>> Ul()
			{
				this.CloseAttrs();
				return this._enclosing.Ul_(this, false);
			}

			public virtual Hamlet.UL<Hamlet.DEL<T>> Ul(string selector)
			{
				return HamletImpl.SetSelector(this.Ul(), selector);
			}

			public virtual Hamlet.OL<Hamlet.DEL<T>> Ol()
			{
				this.CloseAttrs();
				return this._enclosing.Ol_(this, false);
			}

			public virtual Hamlet.OL<Hamlet.DEL<T>> Ol(string selector)
			{
				return HamletImpl.SetSelector(this.Ol(), selector);
			}

			public virtual Hamlet.PRE<Hamlet.DEL<T>> Pre()
			{
				this.CloseAttrs();
				return this._enclosing.Pre_(this, false);
			}

			public virtual Hamlet.PRE<Hamlet.DEL<T>> Pre(string selector)
			{
				return HamletImpl.SetSelector(this.Pre(), selector);
			}

			public virtual Hamlet.FORM<Hamlet.DEL<T>> Form()
			{
				this.CloseAttrs();
				return this._enclosing.Form_(this, false);
			}

			public virtual Hamlet.FORM<Hamlet.DEL<T>> Form(string selector)
			{
				return HamletImpl.SetSelector(this.Form(), selector);
			}

			public virtual Hamlet.FIELDSET<Hamlet.DEL<T>> Fieldset()
			{
				this.CloseAttrs();
				return this._enclosing.Fieldset_(this, false);
			}

			public virtual Hamlet.FIELDSET<Hamlet.DEL<T>> Fieldset(string selector)
			{
				return HamletImpl.SetSelector(this.Fieldset(), selector);
			}

			public virtual Hamlet.DEL<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.DEL<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.DEL<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.DEL<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.DEL<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.DEL<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.DEL<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.DEL<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.DEL<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.DEL<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.DEL<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.DEL<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.DEL<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.DEL<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.DEL<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.DEL<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.DEL<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.DEL<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.DEL<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.DEL<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.DEL<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.DEL<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.DEL<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.DEL<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.DEL<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.DEL<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.DEL<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.DEL<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.DEL<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.DEL<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.DEL<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.DEL<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.DEL<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.DEL<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.DEL<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.DEL<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.DEL<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.DEL<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.DEL<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.DEL<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.DEL<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.DEL<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.DEL<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.DEL<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.DEL<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.DEL<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.DEL<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.DEL<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.DEL<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.DEL<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.DEL<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.DEL<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.DEL<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.DEL<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.DEL<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.DEL<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.DEL<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.DEL<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.DEL<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.DEL<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.DEL<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.DEL<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.DEL<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.DEL<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.DEL<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.DEL<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.DEL<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.DEL<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.DEL<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.DEL<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.DEL<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.DEL<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.DEL<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.DEL<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.DEL<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.DEL<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.DEL<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.DEL<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.DEL<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.DEL<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.DEL<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.DEL<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class INS<T> : HamletImpl.EImp<T>, HamletSpec.INS
			where T : HamletSpec._
		{
			public INS(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.INS<T> $cite(string value)
			{
				this.AddAttr("cite", value);
				return this;
			}

			public virtual Hamlet.INS<T> $datetime(string value)
			{
				this.AddAttr("datetime", value);
				return this;
			}

			public virtual Hamlet.INS<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.INS<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.INS<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.INS<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.INS<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.INS<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.INS<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.INS<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.INS<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.INS<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.INS<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.INS<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.INS<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.INS<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.INS<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.INS<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.TABLE<Hamlet.INS<T>> Table()
			{
				this.CloseAttrs();
				return this._enclosing.Table_(this, false);
			}

			public virtual Hamlet.TABLE<Hamlet.INS<T>> Table(string selector)
			{
				return HamletImpl.SetSelector(this.Table(), selector);
			}

			public virtual Hamlet.INS<T> Address(string cdata)
			{
				return this.Address().(cdata).();
			}

			public virtual Hamlet.ADDRESS<Hamlet.INS<T>> Address()
			{
				this.CloseAttrs();
				return this._enclosing.Address_(this, false);
			}

			public virtual Hamlet.P<Hamlet.INS<T>> P(string selector)
			{
				return HamletImpl.SetSelector(this.P(), selector);
			}

			public virtual Hamlet.P<Hamlet.INS<T>> P()
			{
				this.CloseAttrs();
				return this._enclosing.P(this, false);
			}

			public virtual Hamlet.INS<T> (Type cls)
			{
				this._v(cls);
				return this;
			}

			public virtual Hamlet.HR<Hamlet.INS<T>> Hr()
			{
				this.CloseAttrs();
				return this._enclosing.Hr_(this, false);
			}

			public virtual Hamlet.INS<T> Hr(string selector)
			{
				return HamletImpl.SetSelector(this.Hr(), selector).();
			}

			public virtual Hamlet.DL<Hamlet.INS<T>> Dl(string selector)
			{
				return HamletImpl.SetSelector(this.Dl(), selector);
			}

			public virtual Hamlet.DL<Hamlet.INS<T>> Dl()
			{
				this.CloseAttrs();
				return this._enclosing.Dl_(this, false);
			}

			public virtual Hamlet.DIV<Hamlet.INS<T>> Div(string selector)
			{
				return HamletImpl.SetSelector(this.Div(), selector);
			}

			public virtual Hamlet.DIV<Hamlet.INS<T>> Div()
			{
				this.CloseAttrs();
				return this._enclosing.Div_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.INS<T>> Blockquote()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.INS<T>> Bq()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.INS<T> H1(string cdata)
			{
				return this.H1().(cdata).();
			}

			public virtual Hamlet.H1<Hamlet.INS<T>> H1()
			{
				this.CloseAttrs();
				return this._enclosing.H1(this, false);
			}

			public virtual Hamlet.INS<T> H1(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H1(), selector).(cdata).();
			}

			public virtual Hamlet.INS<T> H2(string cdata)
			{
				return this.H2().(cdata).();
			}

			public virtual Hamlet.H2<Hamlet.INS<T>> H2()
			{
				this.CloseAttrs();
				return this._enclosing.H2(this, false);
			}

			public virtual Hamlet.INS<T> H2(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H2(), selector).(cdata).();
			}

			public virtual Hamlet.H3<Hamlet.INS<T>> H3()
			{
				this.CloseAttrs();
				return this._enclosing.H3(this, false);
			}

			public virtual Hamlet.INS<T> H3(string cdata)
			{
				return this.H3().(cdata).();
			}

			public virtual Hamlet.INS<T> H3(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H3(), selector).(cdata).();
			}

			public virtual Hamlet.H4<Hamlet.INS<T>> H4()
			{
				this.CloseAttrs();
				return this._enclosing.H4(this, false);
			}

			public virtual Hamlet.INS<T> H4(string cdata)
			{
				return this.H4().(cdata).();
			}

			public virtual Hamlet.INS<T> H4(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H4(), selector).(cdata).();
			}

			public virtual Hamlet.H5<Hamlet.INS<T>> H5()
			{
				this.CloseAttrs();
				return this._enclosing.H5(this, false);
			}

			public virtual Hamlet.INS<T> H5(string cdata)
			{
				return this.H5().(cdata).();
			}

			public virtual Hamlet.INS<T> H5(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H5(), selector).(cdata).();
			}

			public virtual Hamlet.H6<Hamlet.INS<T>> H6()
			{
				this.CloseAttrs();
				return this._enclosing.H6(this, false);
			}

			public virtual Hamlet.INS<T> H6(string cdata)
			{
				return this.H6().(cdata).();
			}

			public virtual Hamlet.INS<T> H6(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H6(), selector).(cdata).();
			}

			public virtual Hamlet.UL<Hamlet.INS<T>> Ul()
			{
				this.CloseAttrs();
				return this._enclosing.Ul_(this, false);
			}

			public virtual Hamlet.UL<Hamlet.INS<T>> Ul(string selector)
			{
				return HamletImpl.SetSelector(this.Ul(), selector);
			}

			public virtual Hamlet.OL<Hamlet.INS<T>> Ol()
			{
				this.CloseAttrs();
				return this._enclosing.Ol_(this, false);
			}

			public virtual Hamlet.OL<Hamlet.INS<T>> Ol(string selector)
			{
				return HamletImpl.SetSelector(this.Ol(), selector);
			}

			public virtual Hamlet.PRE<Hamlet.INS<T>> Pre()
			{
				this.CloseAttrs();
				return this._enclosing.Pre_(this, false);
			}

			public virtual Hamlet.PRE<Hamlet.INS<T>> Pre(string selector)
			{
				return HamletImpl.SetSelector(this.Pre(), selector);
			}

			public virtual Hamlet.FORM<Hamlet.INS<T>> Form()
			{
				this.CloseAttrs();
				return this._enclosing.Form_(this, false);
			}

			public virtual Hamlet.FORM<Hamlet.INS<T>> Form(string selector)
			{
				return HamletImpl.SetSelector(this.Form(), selector);
			}

			public virtual Hamlet.FIELDSET<Hamlet.INS<T>> Fieldset()
			{
				this.CloseAttrs();
				return this._enclosing.Fieldset_(this, false);
			}

			public virtual Hamlet.FIELDSET<Hamlet.INS<T>> Fieldset(string selector)
			{
				return HamletImpl.SetSelector(this.Fieldset(), selector);
			}

			public virtual Hamlet.INS<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.INS<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.INS<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.INS<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.INS<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.INS<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.INS<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.INS<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.INS<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.INS<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.INS<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.INS<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.INS<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.INS<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.INS<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.INS<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.INS<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.INS<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.INS<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.INS<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.INS<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.INS<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.INS<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.INS<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.INS<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.INS<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.INS<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.INS<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.INS<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.INS<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.INS<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.INS<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.INS<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.INS<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.INS<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.INS<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.INS<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.INS<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.INS<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.INS<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.INS<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.INS<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.INS<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.INS<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.INS<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.INS<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.INS<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.INS<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.INS<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.INS<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.INS<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.INS<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.INS<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.INS<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.INS<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.INS<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.INS<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.INS<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.INS<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.INS<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.INS<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.INS<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.INS<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.INS<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.INS<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.INS<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.INS<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.INS<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.INS<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.INS<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.INS<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.INS<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.INS<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.INS<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.INS<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.INS<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.INS<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.INS<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.INS<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.INS<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.INS<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.INS<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class BLOCKQUOTE<T> : HamletImpl.EImp<T>, HamletSpec.BLOCKQUOTE
			where T : HamletSpec._
		{
			public BLOCKQUOTE(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt
				> opts)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.BLOCKQUOTE<T> $cite(string value)
			{
				this.AddAttr("cite", value);
				return this;
			}

			public virtual Hamlet.BLOCKQUOTE<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.BLOCKQUOTE<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.BLOCKQUOTE<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.BLOCKQUOTE<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.BLOCKQUOTE<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.BLOCKQUOTE<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.BLOCKQUOTE<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.BLOCKQUOTE<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.BLOCKQUOTE<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.BLOCKQUOTE<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.BLOCKQUOTE<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.BLOCKQUOTE<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.BLOCKQUOTE<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.BLOCKQUOTE<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.BLOCKQUOTE<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.BLOCKQUOTE<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.TABLE<Hamlet.BLOCKQUOTE<T>> Table()
			{
				this.CloseAttrs();
				return this._enclosing.Table_(this, false);
			}

			public virtual Hamlet.TABLE<Hamlet.BLOCKQUOTE<T>> Table(string selector)
			{
				return HamletImpl.SetSelector(this.Table(), selector);
			}

			public virtual Hamlet.BLOCKQUOTE<T> Address(string cdata)
			{
				return this.Address().(cdata).();
			}

			public virtual Hamlet.ADDRESS<Hamlet.BLOCKQUOTE<T>> Address()
			{
				this.CloseAttrs();
				return this._enclosing.Address_(this, false);
			}

			public virtual Hamlet.P<Hamlet.BLOCKQUOTE<T>> P(string selector)
			{
				return HamletImpl.SetSelector(this.P(), selector);
			}

			public virtual Hamlet.P<Hamlet.BLOCKQUOTE<T>> P()
			{
				this.CloseAttrs();
				return this._enclosing.P(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<T> (Type cls)
			{
				this._v(cls);
				return this;
			}

			public virtual Hamlet.HR<Hamlet.BLOCKQUOTE<T>> Hr()
			{
				this.CloseAttrs();
				return this._enclosing.Hr_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<T> Hr(string selector)
			{
				return HamletImpl.SetSelector(this.Hr(), selector).();
			}

			public virtual Hamlet.DL<Hamlet.BLOCKQUOTE<T>> Dl(string selector)
			{
				return HamletImpl.SetSelector(this.Dl(), selector);
			}

			public virtual Hamlet.DL<Hamlet.BLOCKQUOTE<T>> Dl()
			{
				this.CloseAttrs();
				return this._enclosing.Dl_(this, false);
			}

			public virtual Hamlet.DIV<Hamlet.BLOCKQUOTE<T>> Div(string selector)
			{
				return HamletImpl.SetSelector(this.Div(), selector);
			}

			public virtual Hamlet.DIV<Hamlet.BLOCKQUOTE<T>> Div()
			{
				this.CloseAttrs();
				return this._enclosing.Div_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.BLOCKQUOTE<T>> Blockquote()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.BLOCKQUOTE<T>> Bq()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<T> H1(string cdata)
			{
				return this.H1().(cdata).();
			}

			public virtual Hamlet.H1<Hamlet.BLOCKQUOTE<T>> H1()
			{
				this.CloseAttrs();
				return this._enclosing.H1(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<T> H1(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H1(), selector).(cdata).();
			}

			public virtual Hamlet.BLOCKQUOTE<T> H2(string cdata)
			{
				return this.H2().(cdata).();
			}

			public virtual Hamlet.H2<Hamlet.BLOCKQUOTE<T>> H2()
			{
				this.CloseAttrs();
				return this._enclosing.H2(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<T> H2(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H2(), selector).(cdata).();
			}

			public virtual Hamlet.H3<Hamlet.BLOCKQUOTE<T>> H3()
			{
				this.CloseAttrs();
				return this._enclosing.H3(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<T> H3(string cdata)
			{
				return this.H3().(cdata).();
			}

			public virtual Hamlet.BLOCKQUOTE<T> H3(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H3(), selector).(cdata).();
			}

			public virtual Hamlet.H4<Hamlet.BLOCKQUOTE<T>> H4()
			{
				this.CloseAttrs();
				return this._enclosing.H4(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<T> H4(string cdata)
			{
				return this.H4().(cdata).();
			}

			public virtual Hamlet.BLOCKQUOTE<T> H4(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H4(), selector).(cdata).();
			}

			public virtual Hamlet.H5<Hamlet.BLOCKQUOTE<T>> H5()
			{
				this.CloseAttrs();
				return this._enclosing.H5(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<T> H5(string cdata)
			{
				return this.H5().(cdata).();
			}

			public virtual Hamlet.BLOCKQUOTE<T> H5(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H5(), selector).(cdata).();
			}

			public virtual Hamlet.H6<Hamlet.BLOCKQUOTE<T>> H6()
			{
				this.CloseAttrs();
				return this._enclosing.H6(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<T> H6(string cdata)
			{
				return this.H6().(cdata).();
			}

			public virtual Hamlet.BLOCKQUOTE<T> H6(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H6(), selector).(cdata).();
			}

			public virtual Hamlet.UL<Hamlet.BLOCKQUOTE<T>> Ul()
			{
				this.CloseAttrs();
				return this._enclosing.Ul_(this, false);
			}

			public virtual Hamlet.UL<Hamlet.BLOCKQUOTE<T>> Ul(string selector)
			{
				return HamletImpl.SetSelector(this.Ul(), selector);
			}

			public virtual Hamlet.OL<Hamlet.BLOCKQUOTE<T>> Ol()
			{
				this.CloseAttrs();
				return this._enclosing.Ol_(this, false);
			}

			public virtual Hamlet.OL<Hamlet.BLOCKQUOTE<T>> Ol(string selector)
			{
				return HamletImpl.SetSelector(this.Ol(), selector);
			}

			public virtual Hamlet.PRE<Hamlet.BLOCKQUOTE<T>> Pre()
			{
				this.CloseAttrs();
				return this._enclosing.Pre_(this, false);
			}

			public virtual Hamlet.PRE<Hamlet.BLOCKQUOTE<T>> Pre(string selector)
			{
				return HamletImpl.SetSelector(this.Pre(), selector);
			}

			public virtual Hamlet.FORM<Hamlet.BLOCKQUOTE<T>> Form()
			{
				this.CloseAttrs();
				return this._enclosing.Form_(this, false);
			}

			public virtual Hamlet.FORM<Hamlet.BLOCKQUOTE<T>> Form(string selector)
			{
				return HamletImpl.SetSelector(this.Form(), selector);
			}

			public virtual Hamlet.FIELDSET<Hamlet.BLOCKQUOTE<T>> Fieldset()
			{
				this.CloseAttrs();
				return this._enclosing.Fieldset_(this, false);
			}

			public virtual Hamlet.FIELDSET<Hamlet.BLOCKQUOTE<T>> Fieldset(string selector)
			{
				return HamletImpl.SetSelector(this.Fieldset(), selector);
			}

			public virtual Hamlet.SCRIPT<Hamlet.BLOCKQUOTE<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.BLOCKQUOTE<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			private readonly Hamlet _enclosing;
		}

		public class Q<T> : HamletImpl.EImp<T>, HamletSpec.Q
			where T : HamletSpec._
		{
			public Q(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.Q<T> $cite(string value)
			{
				this.AddAttr("cite", value);
				return this;
			}

			public virtual Hamlet.Q<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.Q<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.Q<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.Q<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.Q<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.Q<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.Q<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.Q<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.Q<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.Q<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.Q<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.Q<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.Q<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.Q<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.Q<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.Q<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.Q<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.Q<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.Q<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.Q<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.Q<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.Q<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.Q<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.Q<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.Q<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.Q<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.Q<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.Q<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.Q<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.Q<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.Q<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.Q<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.Q<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.Q<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.Q<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.Q<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.Q<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.Q<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.Q<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.Q<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.Q<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.Q<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.Q<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.Q<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.Q<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.Q<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.Q<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.Q<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.Q<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.Q<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.Q<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.Q<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.Q<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.Q<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.Q<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.Q<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.Q<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.Q<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.Q<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.Q<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.Q<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.Q<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.Q<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.Q<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.Q<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.Q<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.Q<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.Q<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.Q<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.Q<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.Q<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.Q<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.Q<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.Q<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.Q<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.Q<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.Q<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.Q<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.Q<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.Q<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.Q<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.Q<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.Q<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.Q<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.Q<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.Q<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.Q<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.Q<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.Q<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.Q<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.Q<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.Q<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.Q<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.Q<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.Q<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.Q<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.Q<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.Q<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class PRE<T> : HamletImpl.EImp<T>, HamletSpec.PRE
			where T : HamletSpec._
		{
			public PRE(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.PRE<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.PRE<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.PRE<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.PRE<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.PRE<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.PRE<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.PRE<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.PRE<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.PRE<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.PRE<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.PRE<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.PRE<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.PRE<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.PRE<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.PRE<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.PRE<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.PRE<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.PRE<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.PRE<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.PRE<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.PRE<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.PRE<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.PRE<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.PRE<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.PRE<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.PRE<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.PRE<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.PRE<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.PRE<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.PRE<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.PRE<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.PRE<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.PRE<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.PRE<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.PRE<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.PRE<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.PRE<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.PRE<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.PRE<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.PRE<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.PRE<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.PRE<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.PRE<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.PRE<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.PRE<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.PRE<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.PRE<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.PRE<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.PRE<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.PRE<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.PRE<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.PRE<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.PRE<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.PRE<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.PRE<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.MAP<Hamlet.PRE<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.PRE<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.PRE<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.PRE<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.PRE<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.PRE<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.PRE<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.PRE<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.PRE<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.PRE<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.PRE<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.PRE<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.PRE<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.PRE<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.PRE<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.PRE<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.PRE<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.PRE<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.PRE<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.PRE<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.PRE<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.PRE<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.PRE<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.PRE<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.PRE<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.PRE<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.PRE<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.PRE<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.PRE<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.PRE<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class H6<T> : HamletImpl.EImp<T>, HamletSpec.H6
			where T : HamletSpec._
		{
			public H6(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.H6<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.H6<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.H6<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.H6<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.H6<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.H6<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.H6<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.H6<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.H6<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.H6<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.H6<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.H6<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.H6<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.H6<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.H6<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.H6<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.H6<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.H6<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.H6<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.H6<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.H6<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.H6<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.H6<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.H6<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.H6<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.H6<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.H6<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.H6<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.H6<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.H6<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.H6<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.H6<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.H6<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.H6<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.H6<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.H6<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.H6<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.H6<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.H6<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.H6<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.H6<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.H6<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.H6<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.H6<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.H6<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.H6<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.H6<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.H6<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.H6<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.H6<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.H6<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.H6<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.H6<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.H6<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.H6<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.H6<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.H6<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.H6<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.H6<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.H6<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.H6<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.H6<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.H6<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.H6<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.H6<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.H6<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.H6<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.H6<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.H6<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.H6<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.H6<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.H6<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.H6<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.H6<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.H6<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.H6<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.H6<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.H6<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.H6<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.H6<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.H6<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.H6<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.H6<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.H6<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.H6<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.H6<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.H6<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.H6<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.H6<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.H6<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.H6<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.H6<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.H6<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.H6<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.H6<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.H6<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.H6<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.H6<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class H5<T> : HamletImpl.EImp<T>, HamletSpec.H5
			where T : HamletSpec._
		{
			public H5(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.H5<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.H5<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.H5<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.H5<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.H5<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.H5<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.H5<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.H5<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.H5<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.H5<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.H5<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.H5<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.H5<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.H5<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.H5<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.H5<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.H5<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.H5<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.H5<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.H5<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.H5<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.H5<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.H5<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.H5<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.H5<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.H5<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.H5<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.H5<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.H5<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.H5<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.H5<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.H5<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.H5<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.H5<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.H5<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.H5<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.H5<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.H5<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.H5<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.H5<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.H5<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.H5<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.H5<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.H5<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.H5<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.H5<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.H5<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.H5<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.H5<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.H5<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.H5<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.H5<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.H5<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.H5<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.H5<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.H5<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.H5<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.H5<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.H5<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.H5<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.H5<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.H5<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.H5<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.H5<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.H5<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.H5<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.H5<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.H5<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.H5<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.H5<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.H5<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.H5<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.H5<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.H5<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.H5<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.H5<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.H5<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.H5<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.H5<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.H5<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.H5<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.H5<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.H5<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.H5<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.H5<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.H5<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.H5<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.H5<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.H5<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.H5<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.H5<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.H5<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.H5<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.H5<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.H5<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.H5<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.H5<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.H5<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class H4<T> : HamletImpl.EImp<T>, HamletSpec.H4
			where T : HamletSpec._
		{
			public H4(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.H4<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.H4<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.H4<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.H4<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.H4<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.H4<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.H4<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.H4<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.H4<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.H4<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.H4<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.H4<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.H4<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.H4<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.H4<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.H4<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.H4<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.H4<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.H4<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.H4<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.H4<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.H4<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.H4<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.H4<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.H4<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.H4<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.H4<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.H4<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.H4<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.H4<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.H4<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.H4<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.H4<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.H4<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.H4<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.H4<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.H4<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.H4<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.H4<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.H4<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.H4<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.H4<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.H4<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.H4<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.H4<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.H4<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.H4<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.H4<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.H4<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.H4<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.H4<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.H4<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.H4<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.H4<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.H4<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.H4<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.H4<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.H4<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.H4<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.H4<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.H4<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.H4<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.H4<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.H4<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.H4<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.H4<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.H4<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.H4<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.H4<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.H4<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.H4<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.H4<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.H4<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.H4<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.H4<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.H4<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.H4<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.H4<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.H4<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.H4<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.H4<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.H4<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.H4<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.H4<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.H4<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.H4<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.H4<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.H4<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.H4<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.H4<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.H4<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.H4<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.H4<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.H4<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.H4<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.H4<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.H4<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.H4<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class H3<T> : HamletImpl.EImp<T>, HamletSpec.H3
			where T : HamletSpec._
		{
			public H3(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.H3<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.H3<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.H3<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.H3<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.H3<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.H3<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.H3<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.H3<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.H3<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.H3<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.H3<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.H3<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.H3<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.H3<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.H3<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.H3<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.H3<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.H3<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.H3<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.H3<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.H3<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.H3<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.H3<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.H3<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.H3<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.H3<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.H3<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.H3<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.H3<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.H3<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.H3<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.H3<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.H3<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.H3<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.H3<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.H3<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.H3<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.H3<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.H3<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.H3<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.H3<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.H3<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.H3<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.H3<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.H3<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.H3<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.H3<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.H3<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.H3<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.H3<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.H3<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.H3<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.H3<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.H3<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.H3<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.H3<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.H3<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.H3<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.H3<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.H3<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.H3<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.H3<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.H3<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.H3<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.H3<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.H3<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.H3<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.H3<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.H3<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.H3<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.H3<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.H3<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.H3<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.H3<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.H3<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.H3<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.H3<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.H3<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.H3<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.H3<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.H3<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.H3<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.H3<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.H3<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.H3<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.H3<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.H3<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.H3<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.H3<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.H3<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.H3<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.H3<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.H3<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.H3<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.H3<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.H3<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.H3<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.H3<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class H2<T> : HamletImpl.EImp<T>, HamletSpec.H2
			where T : HamletSpec._
		{
			public H2(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.H2<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.H2<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.H2<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.H2<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.H2<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.H2<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.H2<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.H2<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.H2<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.H2<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.H2<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.H2<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.H2<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.H2<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.H2<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.H2<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.H2<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.H2<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.H2<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.H2<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.H2<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.H2<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.H2<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.H2<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.H2<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.H2<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.H2<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.H2<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.H2<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.H2<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.H2<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.H2<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.H2<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.H2<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.H2<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.H2<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.H2<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.H2<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.H2<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.H2<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.H2<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.H2<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.H2<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.H2<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.H2<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.H2<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.H2<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.H2<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.H2<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.H2<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.H2<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.H2<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.H2<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.H2<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.H2<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.H2<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.H2<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.H2<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.H2<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.H2<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.H2<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.H2<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.H2<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.H2<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.H2<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.H2<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.H2<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.H2<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.H2<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.H2<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.H2<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.H2<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.H2<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.H2<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.H2<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.H2<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.H2<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.H2<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.H2<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.H2<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.H2<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.H2<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.H2<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.H2<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.H2<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.H2<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.H2<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.H2<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.H2<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.H2<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.H2<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.H2<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.H2<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.H2<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.H2<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.H2<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.H2<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.H2<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class H1<T> : HamletImpl.EImp<T>, HamletSpec.H1
			where T : HamletSpec._
		{
			public H1(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.H1<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.H1<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.H1<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.H1<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.H1<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.H1<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.H1<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.H1<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.H1<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.H1<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.H1<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.H1<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.H1<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.H1<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.H1<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.H1<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.H1<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.H1<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.H1<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.H1<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.H1<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.H1<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.H1<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.H1<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.H1<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.H1<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.H1<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.H1<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.H1<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.H1<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.H1<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.H1<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.H1<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.H1<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.H1<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.H1<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.H1<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.H1<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.H1<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.H1<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.H1<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.H1<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.H1<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.H1<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.H1<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.H1<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.H1<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.H1<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.H1<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.H1<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.H1<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.H1<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.H1<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.H1<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.H1<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.H1<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.H1<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.H1<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.H1<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.H1<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.H1<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.H1<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.H1<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.H1<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.H1<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.H1<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.H1<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.H1<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.H1<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.H1<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.H1<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.H1<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.H1<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.H1<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.H1<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.H1<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.H1<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.H1<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.H1<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.H1<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.H1<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.H1<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.H1<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.H1<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.H1<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.H1<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.H1<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.H1<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.H1<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.H1<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.H1<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.H1<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.H1<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.H1<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.H1<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.H1<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.H1<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.H1<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class P<T> : HamletImpl.EImp<T>, HamletSpec.P
			where T : HamletSpec._
		{
			public P(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.P<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.P<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.P<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.P<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.P<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.P<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.P<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.P<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.P<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.P<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.P<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.P<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.P<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.P<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.P<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.P<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.P<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.P<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.P<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.P<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.P<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.P<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.P<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.P<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.P<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.P<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.P<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.P<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.P<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.P<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.P<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.P<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.P<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.P<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.P<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.P<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.P<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.P<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.P<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.P<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.P<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.P<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.P<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.P<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.P<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.P<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.P<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.P<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.P<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.P<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.P<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.P<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.P<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.P<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.P<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.P<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.P<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.P<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.P<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.P<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.P<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.P<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.P<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.P<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.P<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.P<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.P<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.P<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.P<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.P<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.P<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.P<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.P<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.P<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.P<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.P<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.P<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.P<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.P<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.P<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.P<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.P<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.P<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.P<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.P<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.P<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.P<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.P<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.P<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.P<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.P<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.P<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.P<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.P<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.P<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.P<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.P<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.P<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class HR<T> : HamletImpl.EImp<T>, HamletSpec.HR
			where T : HamletSpec._
		{
			public HR(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.HR<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.HR<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.HR<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.HR<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.HR<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.HR<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.HR<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.HR<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.HR<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.HR<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.HR<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.HR<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.HR<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.HR<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.HR<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.HR<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			private readonly Hamlet _enclosing;
		}

		public class PARAM<T> : HamletImpl.EImp<T>, HamletSpec.PARAM
			where T : HamletSpec._
		{
			public PARAM(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.PARAM<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.PARAM<T> $name(string value)
			{
				this.AddAttr("name", value);
				return this;
			}

			public virtual Hamlet.PARAM<T> $value(string value)
			{
				this.AddAttr("value", value);
				return this;
			}

			private readonly Hamlet _enclosing;
		}

		public class OBJECT<T> : HamletImpl.EImp<T>, HamletSpec.OBJECT
			where T : HamletSpec._
		{
			public OBJECT(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> 
				opts)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.OBJECT<T> $type(string value)
			{
				this.AddAttr("type", value);
				return this;
			}

			public virtual Hamlet.OBJECT<T> $name(string value)
			{
				this.AddAttr("name", value);
				return this;
			}

			public virtual Hamlet.OBJECT<T> $tabindex(int value)
			{
				this.AddAttr("tabindex", value);
				return this;
			}

			public virtual Hamlet.OBJECT<T> $data(string value)
			{
				this.AddAttr("data", value);
				return this;
			}

			public virtual Hamlet.OBJECT<T> $height(string value)
			{
				this.AddAttr("height", value);
				return this;
			}

			public virtual Hamlet.OBJECT<T> $height(int value)
			{
				this.AddAttr("height", value);
				return this;
			}

			public virtual Hamlet.OBJECT<T> $width(int value)
			{
				this.AddAttr("width", value);
				return this;
			}

			public virtual Hamlet.OBJECT<T> $width(string value)
			{
				this.AddAttr("width", value);
				return this;
			}

			public virtual Hamlet.OBJECT<T> $usemap(string value)
			{
				this.AddAttr("usemap", value);
				return this;
			}

			public virtual Hamlet.OBJECT<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.OBJECT<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.OBJECT<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.OBJECT<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.OBJECT<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.OBJECT<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.OBJECT<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.OBJECT<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.OBJECT<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.OBJECT<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.OBJECT<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.OBJECT<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.OBJECT<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.OBJECT<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.OBJECT<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.OBJECT<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.PARAM<Hamlet.OBJECT<T>> Param()
			{
				this.CloseAttrs();
				return this._enclosing.Param_(this, false);
			}

			public virtual Hamlet.OBJECT<T> Param(string name, string value)
			{
				return this.Param().$name(name).$value(value).();
			}

			public virtual Hamlet.TABLE<Hamlet.OBJECT<T>> Table()
			{
				this.CloseAttrs();
				return this._enclosing.Table_(this, false);
			}

			public virtual Hamlet.TABLE<Hamlet.OBJECT<T>> Table(string selector)
			{
				return HamletImpl.SetSelector(this.Table(), selector);
			}

			public virtual Hamlet.OBJECT<T> Address(string cdata)
			{
				return this.Address().(cdata).();
			}

			public virtual Hamlet.ADDRESS<Hamlet.OBJECT<T>> Address()
			{
				this.CloseAttrs();
				return this._enclosing.Address_(this, false);
			}

			public virtual Hamlet.P<Hamlet.OBJECT<T>> P(string selector)
			{
				return HamletImpl.SetSelector(this.P(), selector);
			}

			public virtual Hamlet.P<Hamlet.OBJECT<T>> P()
			{
				this.CloseAttrs();
				return this._enclosing.P(this, false);
			}

			public virtual Hamlet.OBJECT<T> (Type cls)
			{
				this._v(cls);
				return this;
			}

			public virtual Hamlet.HR<Hamlet.OBJECT<T>> Hr()
			{
				this.CloseAttrs();
				return this._enclosing.Hr_(this, false);
			}

			public virtual Hamlet.OBJECT<T> Hr(string selector)
			{
				return HamletImpl.SetSelector(this.Hr(), selector).();
			}

			public virtual Hamlet.DL<Hamlet.OBJECT<T>> Dl(string selector)
			{
				return HamletImpl.SetSelector(this.Dl(), selector);
			}

			public virtual Hamlet.DL<Hamlet.OBJECT<T>> Dl()
			{
				this.CloseAttrs();
				return this._enclosing.Dl_(this, false);
			}

			public virtual Hamlet.DIV<Hamlet.OBJECT<T>> Div(string selector)
			{
				return HamletImpl.SetSelector(this.Div(), selector);
			}

			public virtual Hamlet.DIV<Hamlet.OBJECT<T>> Div()
			{
				this.CloseAttrs();
				return this._enclosing.Div_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.OBJECT<T>> Blockquote()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.OBJECT<T>> Bq()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.OBJECT<T> H1(string cdata)
			{
				return this.H1().(cdata).();
			}

			public virtual Hamlet.H1<Hamlet.OBJECT<T>> H1()
			{
				this.CloseAttrs();
				return this._enclosing.H1(this, false);
			}

			public virtual Hamlet.OBJECT<T> H1(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H1(), selector).(cdata).();
			}

			public virtual Hamlet.OBJECT<T> H2(string cdata)
			{
				return this.H2().(cdata).();
			}

			public virtual Hamlet.H2<Hamlet.OBJECT<T>> H2()
			{
				this.CloseAttrs();
				return this._enclosing.H2(this, false);
			}

			public virtual Hamlet.OBJECT<T> H2(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H2(), selector).(cdata).();
			}

			public virtual Hamlet.H3<Hamlet.OBJECT<T>> H3()
			{
				this.CloseAttrs();
				return this._enclosing.H3(this, false);
			}

			public virtual Hamlet.OBJECT<T> H3(string cdata)
			{
				return this.H3().(cdata).();
			}

			public virtual Hamlet.OBJECT<T> H3(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H3(), selector).(cdata).();
			}

			public virtual Hamlet.H4<Hamlet.OBJECT<T>> H4()
			{
				this.CloseAttrs();
				return this._enclosing.H4(this, false);
			}

			public virtual Hamlet.OBJECT<T> H4(string cdata)
			{
				return this.H4().(cdata).();
			}

			public virtual Hamlet.OBJECT<T> H4(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H4(), selector).(cdata).();
			}

			public virtual Hamlet.H5<Hamlet.OBJECT<T>> H5()
			{
				this.CloseAttrs();
				return this._enclosing.H5(this, false);
			}

			public virtual Hamlet.OBJECT<T> H5(string cdata)
			{
				return this.H5().(cdata).();
			}

			public virtual Hamlet.OBJECT<T> H5(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H5(), selector).(cdata).();
			}

			public virtual Hamlet.H6<Hamlet.OBJECT<T>> H6()
			{
				this.CloseAttrs();
				return this._enclosing.H6(this, false);
			}

			public virtual Hamlet.OBJECT<T> H6(string cdata)
			{
				return this.H6().(cdata).();
			}

			public virtual Hamlet.OBJECT<T> H6(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H6(), selector).(cdata).();
			}

			public virtual Hamlet.UL<Hamlet.OBJECT<T>> Ul()
			{
				this.CloseAttrs();
				return this._enclosing.Ul_(this, false);
			}

			public virtual Hamlet.UL<Hamlet.OBJECT<T>> Ul(string selector)
			{
				return HamletImpl.SetSelector(this.Ul(), selector);
			}

			public virtual Hamlet.OL<Hamlet.OBJECT<T>> Ol()
			{
				this.CloseAttrs();
				return this._enclosing.Ol_(this, false);
			}

			public virtual Hamlet.OL<Hamlet.OBJECT<T>> Ol(string selector)
			{
				return HamletImpl.SetSelector(this.Ol(), selector);
			}

			public virtual Hamlet.PRE<Hamlet.OBJECT<T>> Pre()
			{
				this.CloseAttrs();
				return this._enclosing.Pre_(this, false);
			}

			public virtual Hamlet.PRE<Hamlet.OBJECT<T>> Pre(string selector)
			{
				return HamletImpl.SetSelector(this.Pre(), selector);
			}

			public virtual Hamlet.FORM<Hamlet.OBJECT<T>> Form()
			{
				this.CloseAttrs();
				return this._enclosing.Form_(this, false);
			}

			public virtual Hamlet.FORM<Hamlet.OBJECT<T>> Form(string selector)
			{
				return HamletImpl.SetSelector(this.Form(), selector);
			}

			public virtual Hamlet.FIELDSET<Hamlet.OBJECT<T>> Fieldset()
			{
				this.CloseAttrs();
				return this._enclosing.Fieldset_(this, false);
			}

			public virtual Hamlet.FIELDSET<Hamlet.OBJECT<T>> Fieldset(string selector)
			{
				return HamletImpl.SetSelector(this.Fieldset(), selector);
			}

			public virtual Hamlet.OBJECT<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.OBJECT<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.OBJECT<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.OBJECT<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.OBJECT<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.OBJECT<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.OBJECT<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.OBJECT<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.OBJECT<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.OBJECT<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.OBJECT<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.OBJECT<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.OBJECT<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.OBJECT<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.OBJECT<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.OBJECT<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.OBJECT<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.OBJECT<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.OBJECT<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.OBJECT<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.OBJECT<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.OBJECT<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.OBJECT<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.OBJECT<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.OBJECT<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.OBJECT<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.OBJECT<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.OBJECT<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.OBJECT<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.OBJECT<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.OBJECT<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.OBJECT<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.OBJECT<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.OBJECT<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.OBJECT<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.OBJECT<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.OBJECT<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.OBJECT<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.OBJECT<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.OBJECT<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.OBJECT<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.OBJECT<T> A(string selector, string href, string anchorText
				)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.OBJECT<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.OBJECT<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.OBJECT<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.OBJECT<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.OBJECT<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.OBJECT<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.OBJECT<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.OBJECT<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.OBJECT<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.OBJECT<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.OBJECT<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.OBJECT<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.OBJECT<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.OBJECT<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.OBJECT<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.OBJECT<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.OBJECT<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.OBJECT<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.OBJECT<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.OBJECT<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.OBJECT<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.OBJECT<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.OBJECT<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.OBJECT<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.OBJECT<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.OBJECT<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.OBJECT<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.OBJECT<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.OBJECT<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.OBJECT<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.OBJECT<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.OBJECT<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.OBJECT<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.OBJECT<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.OBJECT<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.OBJECT<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.OBJECT<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.OBJECT<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.OBJECT<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.OBJECT<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		private Hamlet.PARAM<T> Param_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.PARAM<T>(this, "param", e, Opt(false, inline, false));
		}

		public class IMG<T> : HamletImpl.EImp<T>, HamletSpec.IMG
			where T : HamletSpec._
		{
			public IMG(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.IMG<T> $src(string value)
			{
				this.AddAttr("src", value);
				return this;
			}

			public virtual Hamlet.IMG<T> $alt(string value)
			{
				this.AddAttr("alt", value);
				return this;
			}

			public virtual Hamlet.IMG<T> $ismap()
			{
				this.AddAttr("ismap", null);
				return this;
			}

			public virtual Hamlet.IMG<T> $height(string value)
			{
				this.AddAttr("height", value);
				return this;
			}

			public virtual Hamlet.IMG<T> $height(int value)
			{
				this.AddAttr("height", value);
				return this;
			}

			public virtual Hamlet.IMG<T> $width(int value)
			{
				this.AddAttr("width", value);
				return this;
			}

			public virtual Hamlet.IMG<T> $width(string value)
			{
				this.AddAttr("width", value);
				return this;
			}

			public virtual Hamlet.IMG<T> $usemap(string value)
			{
				this.AddAttr("usemap", value);
				return this;
			}

			public virtual Hamlet.IMG<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.IMG<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.IMG<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.IMG<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.IMG<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.IMG<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.IMG<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.IMG<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.IMG<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.IMG<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.IMG<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.IMG<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.IMG<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.IMG<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.IMG<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.IMG<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			private readonly Hamlet _enclosing;
		}

		public class LINK<T> : HamletImpl.EImp<T>, HamletSpec.LINK
			where T : HamletSpec._
		{
			public LINK(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.LINK<T> $rel(EnumSet<HamletSpec.LinkType> value)
			{
				this.AddRelAttr("rel", value);
				return this;
			}

			public virtual Hamlet.LINK<T> $rel(string value)
			{
				this.AddAttr("rel", value);
				return this;
			}

			public virtual Hamlet.LINK<T> $href(string value)
			{
				this.AddAttr("href", value);
				return this;
			}

			public virtual Hamlet.LINK<T> $type(string value)
			{
				this.AddAttr("type", value);
				return this;
			}

			public virtual Hamlet.LINK<T> $media(EnumSet<HamletSpec.Media> value)
			{
				this.AddMediaAttr("media", value);
				return this;
			}

			public virtual Hamlet.LINK<T> $media(string value)
			{
				this.AddAttr("media", value);
				return this;
			}

			public virtual Hamlet.LINK<T> $hreflang(string value)
			{
				this.AddAttr("hreflang", value);
				return this;
			}

			public virtual Hamlet.LINK<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.LINK<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.LINK<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.LINK<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.LINK<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.LINK<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.LINK<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.LINK<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.LINK<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.LINK<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.LINK<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.LINK<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.LINK<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.LINK<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.LINK<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.LINK<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			private readonly Hamlet _enclosing;
		}

		public class AREA<T> : HamletImpl.EImp<T>, HamletSpec.AREA
			where T : HamletSpec._
		{
			public AREA(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.AREA<T> $href(string value)
			{
				this.AddAttr("href", value);
				return this;
			}

			public virtual Hamlet.AREA<T> $tabindex(int value)
			{
				this.AddAttr("tabindex", value);
				return this;
			}

			public virtual Hamlet.AREA<T> $accesskey(string value)
			{
				this.AddAttr("accesskey", value);
				return this;
			}

			public virtual Hamlet.AREA<T> $onfocus(string value)
			{
				this.AddAttr("onfocus", value);
				return this;
			}

			public virtual Hamlet.AREA<T> $onblur(string value)
			{
				this.AddAttr("onblur", value);
				return this;
			}

			public virtual Hamlet.AREA<T> $alt(string value)
			{
				this.AddAttr("alt", value);
				return this;
			}

			public virtual Hamlet.AREA<T> $shape(HamletSpec.Shape value)
			{
				this.AddAttr("shape", value);
				return this;
			}

			public virtual Hamlet.AREA<T> $coords(string value)
			{
				this.AddAttr("coords", value);
				return this;
			}

			public virtual Hamlet.AREA<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.AREA<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.AREA<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.AREA<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.AREA<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.AREA<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.AREA<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.AREA<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.AREA<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.AREA<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.AREA<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.AREA<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.AREA<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.AREA<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.AREA<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.AREA<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			private readonly Hamlet _enclosing;
		}

		private Hamlet.AREA<T> Area_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.AREA<T>(this, "area", e, Opt(false, inline, false));
		}

		public class MAP<T> : HamletImpl.EImp<T>, HamletSpec.MAP
			where T : HamletSpec._
		{
			public MAP(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.MAP<T> $name(string value)
			{
				this.AddAttr("name", value);
				return this;
			}

			public virtual Hamlet.AREA<Hamlet.MAP<T>> Area()
			{
				this.CloseAttrs();
				return this._enclosing.Area_(this, false);
			}

			public virtual Hamlet.AREA<Hamlet.MAP<T>> Area(string selector)
			{
				return HamletImpl.SetSelector(this.Area(), selector);
			}

			public virtual Hamlet.MAP<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.MAP<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.MAP<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.MAP<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.MAP<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.MAP<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.MAP<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.MAP<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.MAP<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.MAP<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.MAP<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.MAP<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.MAP<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.MAP<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.MAP<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.MAP<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.TABLE<Hamlet.MAP<T>> Table()
			{
				this.CloseAttrs();
				return this._enclosing.Table_(this, false);
			}

			public virtual Hamlet.TABLE<Hamlet.MAP<T>> Table(string selector)
			{
				return HamletImpl.SetSelector(this.Table(), selector);
			}

			public virtual Hamlet.MAP<T> Address(string cdata)
			{
				return this.Address().(cdata).();
			}

			public virtual Hamlet.ADDRESS<Hamlet.MAP<T>> Address()
			{
				this.CloseAttrs();
				return this._enclosing.Address_(this, false);
			}

			public virtual Hamlet.P<Hamlet.MAP<T>> P(string selector)
			{
				return HamletImpl.SetSelector(this.P(), selector);
			}

			public virtual Hamlet.P<Hamlet.MAP<T>> P()
			{
				this.CloseAttrs();
				return this._enclosing.P(this, false);
			}

			public virtual Hamlet.MAP<T> (Type cls)
			{
				this._v(cls);
				return this;
			}

			public virtual Hamlet.HR<Hamlet.MAP<T>> Hr()
			{
				this.CloseAttrs();
				return this._enclosing.Hr_(this, false);
			}

			public virtual Hamlet.MAP<T> Hr(string selector)
			{
				return HamletImpl.SetSelector(this.Hr(), selector).();
			}

			public virtual Hamlet.DL<Hamlet.MAP<T>> Dl(string selector)
			{
				return HamletImpl.SetSelector(this.Dl(), selector);
			}

			public virtual Hamlet.DL<Hamlet.MAP<T>> Dl()
			{
				this.CloseAttrs();
				return this._enclosing.Dl_(this, false);
			}

			public virtual Hamlet.DIV<Hamlet.MAP<T>> Div(string selector)
			{
				return HamletImpl.SetSelector(this.Div(), selector);
			}

			public virtual Hamlet.DIV<Hamlet.MAP<T>> Div()
			{
				this.CloseAttrs();
				return this._enclosing.Div_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.MAP<T>> Blockquote()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.MAP<T>> Bq()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.MAP<T> H1(string cdata)
			{
				return this.H1().(cdata).();
			}

			public virtual Hamlet.H1<Hamlet.MAP<T>> H1()
			{
				this.CloseAttrs();
				return this._enclosing.H1(this, false);
			}

			public virtual Hamlet.MAP<T> H1(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H1(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<T> H2(string cdata)
			{
				return this.H2().(cdata).();
			}

			public virtual Hamlet.H2<Hamlet.MAP<T>> H2()
			{
				this.CloseAttrs();
				return this._enclosing.H2(this, false);
			}

			public virtual Hamlet.MAP<T> H2(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H2(), selector).(cdata).();
			}

			public virtual Hamlet.H3<Hamlet.MAP<T>> H3()
			{
				this.CloseAttrs();
				return this._enclosing.H3(this, false);
			}

			public virtual Hamlet.MAP<T> H3(string cdata)
			{
				return this.H3().(cdata).();
			}

			public virtual Hamlet.MAP<T> H3(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H3(), selector).(cdata).();
			}

			public virtual Hamlet.H4<Hamlet.MAP<T>> H4()
			{
				this.CloseAttrs();
				return this._enclosing.H4(this, false);
			}

			public virtual Hamlet.MAP<T> H4(string cdata)
			{
				return this.H4().(cdata).();
			}

			public virtual Hamlet.MAP<T> H4(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H4(), selector).(cdata).();
			}

			public virtual Hamlet.H5<Hamlet.MAP<T>> H5()
			{
				this.CloseAttrs();
				return this._enclosing.H5(this, false);
			}

			public virtual Hamlet.MAP<T> H5(string cdata)
			{
				return this.H5().(cdata).();
			}

			public virtual Hamlet.MAP<T> H5(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H5(), selector).(cdata).();
			}

			public virtual Hamlet.H6<Hamlet.MAP<T>> H6()
			{
				this.CloseAttrs();
				return this._enclosing.H6(this, false);
			}

			public virtual Hamlet.MAP<T> H6(string cdata)
			{
				return this.H6().(cdata).();
			}

			public virtual Hamlet.MAP<T> H6(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H6(), selector).(cdata).();
			}

			public virtual Hamlet.UL<Hamlet.MAP<T>> Ul()
			{
				this.CloseAttrs();
				return this._enclosing.Ul_(this, false);
			}

			public virtual Hamlet.UL<Hamlet.MAP<T>> Ul(string selector)
			{
				return HamletImpl.SetSelector(this.Ul(), selector);
			}

			public virtual Hamlet.OL<Hamlet.MAP<T>> Ol()
			{
				this.CloseAttrs();
				return this._enclosing.Ol_(this, false);
			}

			public virtual Hamlet.OL<Hamlet.MAP<T>> Ol(string selector)
			{
				return HamletImpl.SetSelector(this.Ol(), selector);
			}

			public virtual Hamlet.PRE<Hamlet.MAP<T>> Pre()
			{
				this.CloseAttrs();
				return this._enclosing.Pre_(this, false);
			}

			public virtual Hamlet.PRE<Hamlet.MAP<T>> Pre(string selector)
			{
				return HamletImpl.SetSelector(this.Pre(), selector);
			}

			public virtual Hamlet.FORM<Hamlet.MAP<T>> Form()
			{
				this.CloseAttrs();
				return this._enclosing.Form_(this, false);
			}

			public virtual Hamlet.FORM<Hamlet.MAP<T>> Form(string selector)
			{
				return HamletImpl.SetSelector(this.Form(), selector);
			}

			public virtual Hamlet.FIELDSET<Hamlet.MAP<T>> Fieldset()
			{
				this.CloseAttrs();
				return this._enclosing.Fieldset_(this, false);
			}

			public virtual Hamlet.FIELDSET<Hamlet.MAP<T>> Fieldset(string selector)
			{
				return HamletImpl.SetSelector(this.Fieldset(), selector);
			}

			private readonly Hamlet _enclosing;
		}

		public class A<T> : HamletImpl.EImp<T>, HamletSpec.A
			where T : HamletSpec._
		{
			public A(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.A<T> $rel(EnumSet<HamletSpec.LinkType> value)
			{
				this.AddRelAttr("rel", value);
				return this;
			}

			public virtual Hamlet.A<T> $rel(string value)
			{
				this.AddAttr("rel", value);
				return this;
			}

			public virtual Hamlet.A<T> $href(string value)
			{
				this.AddAttr("href", value);
				return this;
			}

			public virtual Hamlet.A<T> $type(string value)
			{
				this.AddAttr("type", value);
				return this;
			}

			public virtual Hamlet.A<T> $tabindex(int value)
			{
				this.AddAttr("tabindex", value);
				return this;
			}

			public virtual Hamlet.A<T> $accesskey(string value)
			{
				this.AddAttr("accesskey", value);
				return this;
			}

			public virtual Hamlet.A<T> $onfocus(string value)
			{
				this.AddAttr("onfocus", value);
				return this;
			}

			public virtual Hamlet.A<T> $onblur(string value)
			{
				this.AddAttr("onblur", value);
				return this;
			}

			public virtual Hamlet.A<T> $hreflang(string value)
			{
				this.AddAttr("hreflang", value);
				return this;
			}

			public virtual Hamlet.A<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.A<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.A<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.A<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.A<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.A<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.A<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.A<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.A<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.A<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.A<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.A<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.A<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.A<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.A<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.A<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.A<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.A<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.A<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.A<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.A<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.A<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.A<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.A<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.A<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.A<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.A<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.A<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.A<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.A<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.A<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.A<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.A<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.A<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.A<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.A<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.A<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.A<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.A<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.A<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.A<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.A<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.A<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.A<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.A<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.A<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.A<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.A<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.A<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.A<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.A<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.A<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.A<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.A<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.IMG<Hamlet.A<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.A<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.A<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.A<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.MAP<Hamlet.A<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.A<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.A<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.A<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.A<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.A<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.A<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.A<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.A<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.A<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.A<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.A<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.A<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.A<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.A<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.A<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.A<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.A<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.SUB<Hamlet.A<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.A<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.A<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.A<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.A<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.A<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.A<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.A<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.A<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.A<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.A<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.A<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.A<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.A<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.A<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.A<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.A<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.A<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class DIV<T> : HamletImpl.EImp<T>, HamletSpec.DIV
			where T : HamletSpec._
		{
			public DIV(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.DIV<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.DIV<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.DIV<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.DIV<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.DIV<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.DIV<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.DIV<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.DIV<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.DIV<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.DIV<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.DIV<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.DIV<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.DIV<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.DIV<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.DIV<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.DIV<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.TABLE<Hamlet.DIV<T>> Table()
			{
				this.CloseAttrs();
				return this._enclosing.Table_(this, false);
			}

			public virtual Hamlet.TABLE<Hamlet.DIV<T>> Table(string selector)
			{
				return HamletImpl.SetSelector(this.Table(), selector);
			}

			public virtual Hamlet.DIV<T> Address(string cdata)
			{
				return this.Address().(cdata).();
			}

			public virtual Hamlet.ADDRESS<Hamlet.DIV<T>> Address()
			{
				this.CloseAttrs();
				return this._enclosing.Address_(this, false);
			}

			public virtual Hamlet.P<Hamlet.DIV<T>> P(string selector)
			{
				return HamletImpl.SetSelector(this.P(), selector);
			}

			public virtual Hamlet.P<Hamlet.DIV<T>> P()
			{
				this.CloseAttrs();
				return this._enclosing.P(this, false);
			}

			public virtual Hamlet.DIV<T> (Type cls)
			{
				this._v(cls);
				return this;
			}

			public virtual Hamlet.HR<Hamlet.DIV<T>> Hr()
			{
				this.CloseAttrs();
				return this._enclosing.Hr_(this, false);
			}

			public virtual Hamlet.DIV<T> Hr(string selector)
			{
				return HamletImpl.SetSelector(this.Hr(), selector).();
			}

			public virtual Hamlet.DL<Hamlet.DIV<T>> Dl(string selector)
			{
				return HamletImpl.SetSelector(this.Dl(), selector);
			}

			public virtual Hamlet.DL<Hamlet.DIV<T>> Dl()
			{
				this.CloseAttrs();
				return this._enclosing.Dl_(this, false);
			}

			public virtual Hamlet.DIV<Hamlet.DIV<T>> Div(string selector)
			{
				return HamletImpl.SetSelector(this.Div(), selector);
			}

			public virtual Hamlet.DIV<Hamlet.DIV<T>> Div()
			{
				this.CloseAttrs();
				return this._enclosing.Div_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.DIV<T>> Blockquote()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.DIV<T>> Bq()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.DIV<T> H1(string cdata)
			{
				return this.H1().(cdata).();
			}

			public virtual Hamlet.H1<Hamlet.DIV<T>> H1()
			{
				this.CloseAttrs();
				return this._enclosing.H1(this, false);
			}

			public virtual Hamlet.DIV<T> H1(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H1(), selector).(cdata).();
			}

			public virtual Hamlet.DIV<T> H2(string cdata)
			{
				return this.H2().(cdata).();
			}

			public virtual Hamlet.H2<Hamlet.DIV<T>> H2()
			{
				this.CloseAttrs();
				return this._enclosing.H2(this, false);
			}

			public virtual Hamlet.DIV<T> H2(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H2(), selector).(cdata).();
			}

			public virtual Hamlet.H3<Hamlet.DIV<T>> H3()
			{
				this.CloseAttrs();
				return this._enclosing.H3(this, false);
			}

			public virtual Hamlet.DIV<T> H3(string cdata)
			{
				return this.H3().(cdata).();
			}

			public virtual Hamlet.DIV<T> H3(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H3(), selector).(cdata).();
			}

			public virtual Hamlet.H4<Hamlet.DIV<T>> H4()
			{
				this.CloseAttrs();
				return this._enclosing.H4(this, false);
			}

			public virtual Hamlet.DIV<T> H4(string cdata)
			{
				return this.H4().(cdata).();
			}

			public virtual Hamlet.DIV<T> H4(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H4(), selector).(cdata).();
			}

			public virtual Hamlet.H5<Hamlet.DIV<T>> H5()
			{
				this.CloseAttrs();
				return this._enclosing.H5(this, false);
			}

			public virtual Hamlet.DIV<T> H5(string cdata)
			{
				return this.H5().(cdata).();
			}

			public virtual Hamlet.DIV<T> H5(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H5(), selector).(cdata).();
			}

			public virtual Hamlet.H6<Hamlet.DIV<T>> H6()
			{
				this.CloseAttrs();
				return this._enclosing.H6(this, false);
			}

			public virtual Hamlet.DIV<T> H6(string cdata)
			{
				return this.H6().(cdata).();
			}

			public virtual Hamlet.DIV<T> H6(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H6(), selector).(cdata).();
			}

			public virtual Hamlet.UL<Hamlet.DIV<T>> Ul()
			{
				this.CloseAttrs();
				return this._enclosing.Ul_(this, false);
			}

			public virtual Hamlet.UL<Hamlet.DIV<T>> Ul(string selector)
			{
				return HamletImpl.SetSelector(this.Ul(), selector);
			}

			public virtual Hamlet.OL<Hamlet.DIV<T>> Ol()
			{
				this.CloseAttrs();
				return this._enclosing.Ol_(this, false);
			}

			public virtual Hamlet.OL<Hamlet.DIV<T>> Ol(string selector)
			{
				return HamletImpl.SetSelector(this.Ol(), selector);
			}

			public virtual Hamlet.PRE<Hamlet.DIV<T>> Pre()
			{
				this.CloseAttrs();
				return this._enclosing.Pre_(this, false);
			}

			public virtual Hamlet.PRE<Hamlet.DIV<T>> Pre(string selector)
			{
				return HamletImpl.SetSelector(this.Pre(), selector);
			}

			public virtual Hamlet.FORM<Hamlet.DIV<T>> Form()
			{
				this.CloseAttrs();
				return this._enclosing.Form_(this, false);
			}

			public virtual Hamlet.FORM<Hamlet.DIV<T>> Form(string selector)
			{
				return HamletImpl.SetSelector(this.Form(), selector);
			}

			public virtual Hamlet.FIELDSET<Hamlet.DIV<T>> Fieldset()
			{
				this.CloseAttrs();
				return this._enclosing.Fieldset_(this, false);
			}

			public virtual Hamlet.FIELDSET<Hamlet.DIV<T>> Fieldset(string selector)
			{
				return HamletImpl.SetSelector(this.Fieldset(), selector);
			}

			public virtual Hamlet.DIV<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.DIV<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.DIV<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.DIV<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.DIV<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.DIV<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.DIV<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.DIV<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.DIV<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.DIV<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.DIV<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.DIV<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.DIV<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.DIV<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.DIV<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.DIV<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.DIV<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.DIV<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.DIV<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.DIV<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.DIV<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.DIV<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.DIV<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.DIV<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.DIV<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.DIV<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.DIV<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.DIV<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.DIV<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.DIV<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.DIV<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.DIV<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.DIV<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.DIV<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.DIV<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.DIV<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.DIV<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.DIV<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.DIV<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.DIV<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.DIV<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.DIV<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.DIV<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.DIV<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.DIV<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.DIV<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.DIV<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.DIV<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.DIV<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.DIV<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.DIV<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.DIV<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.DIV<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.DIV<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.DIV<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.DIV<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.DIV<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.DIV<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.DIV<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.DIV<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.DIV<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.DIV<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.DIV<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.DIV<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.DIV<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.DIV<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.DIV<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.DIV<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.DIV<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.DIV<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.DIV<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.DIV<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.DIV<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.DIV<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.DIV<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.DIV<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.DIV<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.DIV<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.DIV<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.DIV<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.DIV<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.DIV<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class ADDRESS<T> : HamletImpl.EImp<T>, HamletSpec.ADDRESS
			where T : HamletSpec._
		{
			public ADDRESS(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt>
				 opts)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.ADDRESS<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.ADDRESS<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.ADDRESS<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.ADDRESS<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.ADDRESS<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.ADDRESS<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.ADDRESS<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.ADDRESS<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.ADDRESS<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.ADDRESS<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.ADDRESS<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.ADDRESS<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.ADDRESS<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.ADDRESS<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.ADDRESS<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.ADDRESS<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.ADDRESS<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.ADDRESS<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.ADDRESS<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.ADDRESS<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.ADDRESS<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.ADDRESS<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.ADDRESS<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.ADDRESS<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.ADDRESS<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.ADDRESS<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.ADDRESS<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.ADDRESS<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.ADDRESS<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.ADDRESS<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.ADDRESS<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.ADDRESS<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.ADDRESS<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.ADDRESS<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.ADDRESS<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.ADDRESS<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.ADDRESS<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.ADDRESS<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.ADDRESS<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.ADDRESS<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.ADDRESS<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.ADDRESS<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.ADDRESS<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.ADDRESS<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.ADDRESS<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.ADDRESS<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.ADDRESS<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.ADDRESS<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.ADDRESS<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.ADDRESS<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.ADDRESS<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.ADDRESS<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.ADDRESS<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.ADDRESS<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.ADDRESS<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.ADDRESS<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.ADDRESS<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.ADDRESS<T> A(string selector, string href, string anchorText
				)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.ADDRESS<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.ADDRESS<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.ADDRESS<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.ADDRESS<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.ADDRESS<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.ADDRESS<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.ADDRESS<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.ADDRESS<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.ADDRESS<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.ADDRESS<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.ADDRESS<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.ADDRESS<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.ADDRESS<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.ADDRESS<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.ADDRESS<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.ADDRESS<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.ADDRESS<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.ADDRESS<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.ADDRESS<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.ADDRESS<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.ADDRESS<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.ADDRESS<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.ADDRESS<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.ADDRESS<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.ADDRESS<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.ADDRESS<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.ADDRESS<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.ADDRESS<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.ADDRESS<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.ADDRESS<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.ADDRESS<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.ADDRESS<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.ADDRESS<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.ADDRESS<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.ADDRESS<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.ADDRESS<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.ADDRESS<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.ADDRESS<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.ADDRESS<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.ADDRESS<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class BODY<T> : HamletImpl.EImp<T>, HamletSpec.BODY
			where T : HamletSpec._
		{
			public BODY(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.BODY<T> $onload(string value)
			{
				this.AddAttr("onload", value);
				return this;
			}

			public virtual Hamlet.BODY<T> $onunload(string value)
			{
				this.AddAttr("onunload", value);
				return this;
			}

			public virtual Hamlet.BODY<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.BODY<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.BODY<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.BODY<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.BODY<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.BODY<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.BODY<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.BODY<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.BODY<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.BODY<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.BODY<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.BODY<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.BODY<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.BODY<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.BODY<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.BODY<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.TABLE<Hamlet.BODY<T>> Table()
			{
				this.CloseAttrs();
				return this._enclosing.Table_(this, false);
			}

			public virtual Hamlet.TABLE<Hamlet.BODY<T>> Table(string selector)
			{
				return HamletImpl.SetSelector(this.Table(), selector);
			}

			public virtual Hamlet.BODY<T> Address(string cdata)
			{
				return this.Address().(cdata).();
			}

			public virtual Hamlet.ADDRESS<Hamlet.BODY<T>> Address()
			{
				this.CloseAttrs();
				return this._enclosing.Address_(this, false);
			}

			public virtual Hamlet.P<Hamlet.BODY<T>> P(string selector)
			{
				return HamletImpl.SetSelector(this.P(), selector);
			}

			public virtual Hamlet.P<Hamlet.BODY<T>> P()
			{
				this.CloseAttrs();
				return this._enclosing.P(this, false);
			}

			public virtual Hamlet.BODY<T> (Type cls)
			{
				this._v(cls);
				return this;
			}

			public virtual Hamlet.HR<Hamlet.BODY<T>> Hr()
			{
				this.CloseAttrs();
				return this._enclosing.Hr_(this, false);
			}

			public virtual Hamlet.BODY<T> Hr(string selector)
			{
				return HamletImpl.SetSelector(this.Hr(), selector).();
			}

			public virtual Hamlet.DL<Hamlet.BODY<T>> Dl(string selector)
			{
				return HamletImpl.SetSelector(this.Dl(), selector);
			}

			public virtual Hamlet.DL<Hamlet.BODY<T>> Dl()
			{
				this.CloseAttrs();
				return this._enclosing.Dl_(this, false);
			}

			public virtual Hamlet.DIV<Hamlet.BODY<T>> Div(string selector)
			{
				return HamletImpl.SetSelector(this.Div(), selector);
			}

			public virtual Hamlet.DIV<Hamlet.BODY<T>> Div()
			{
				this.CloseAttrs();
				return this._enclosing.Div_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.BODY<T>> Blockquote()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.BLOCKQUOTE<Hamlet.BODY<T>> Bq()
			{
				this.CloseAttrs();
				return this._enclosing.Blockquote_(this, false);
			}

			public virtual Hamlet.BODY<T> H1(string cdata)
			{
				return this.H1().(cdata).();
			}

			public virtual Hamlet.H1<Hamlet.BODY<T>> H1()
			{
				this.CloseAttrs();
				return this._enclosing.H1(this, false);
			}

			public virtual Hamlet.BODY<T> H1(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H1(), selector).(cdata).();
			}

			public virtual Hamlet.BODY<T> H2(string cdata)
			{
				return this.H2().(cdata).();
			}

			public virtual Hamlet.H2<Hamlet.BODY<T>> H2()
			{
				this.CloseAttrs();
				return this._enclosing.H2(this, false);
			}

			public virtual Hamlet.BODY<T> H2(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H2(), selector).(cdata).();
			}

			public virtual Hamlet.H3<Hamlet.BODY<T>> H3()
			{
				this.CloseAttrs();
				return this._enclosing.H3(this, false);
			}

			public virtual Hamlet.BODY<T> H3(string cdata)
			{
				return this.H3().(cdata).();
			}

			public virtual Hamlet.BODY<T> H3(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H3(), selector).(cdata).();
			}

			public virtual Hamlet.H4<Hamlet.BODY<T>> H4()
			{
				this.CloseAttrs();
				return this._enclosing.H4(this, false);
			}

			public virtual Hamlet.BODY<T> H4(string cdata)
			{
				return this.H4().(cdata).();
			}

			public virtual Hamlet.BODY<T> H4(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H4(), selector).(cdata).();
			}

			public virtual Hamlet.H5<Hamlet.BODY<T>> H5()
			{
				this.CloseAttrs();
				return this._enclosing.H5(this, false);
			}

			public virtual Hamlet.BODY<T> H5(string cdata)
			{
				return this.H5().(cdata).();
			}

			public virtual Hamlet.BODY<T> H5(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H5(), selector).(cdata).();
			}

			public virtual Hamlet.H6<Hamlet.BODY<T>> H6()
			{
				this.CloseAttrs();
				return this._enclosing.H6(this, false);
			}

			public virtual Hamlet.BODY<T> H6(string cdata)
			{
				return this.H6().(cdata).();
			}

			public virtual Hamlet.BODY<T> H6(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.H6(), selector).(cdata).();
			}

			public virtual Hamlet.UL<Hamlet.BODY<T>> Ul()
			{
				this.CloseAttrs();
				return this._enclosing.Ul_(this, false);
			}

			public virtual Hamlet.UL<Hamlet.BODY<T>> Ul(string selector)
			{
				return HamletImpl.SetSelector(this.Ul(), selector);
			}

			public virtual Hamlet.OL<Hamlet.BODY<T>> Ol()
			{
				this.CloseAttrs();
				return this._enclosing.Ol_(this, false);
			}

			public virtual Hamlet.OL<Hamlet.BODY<T>> Ol(string selector)
			{
				return HamletImpl.SetSelector(this.Ol(), selector);
			}

			public virtual Hamlet.PRE<Hamlet.BODY<T>> Pre()
			{
				this.CloseAttrs();
				return this._enclosing.Pre_(this, false);
			}

			public virtual Hamlet.PRE<Hamlet.BODY<T>> Pre(string selector)
			{
				return HamletImpl.SetSelector(this.Pre(), selector);
			}

			public virtual Hamlet.FORM<Hamlet.BODY<T>> Form()
			{
				this.CloseAttrs();
				return this._enclosing.Form_(this, false);
			}

			public virtual Hamlet.FORM<Hamlet.BODY<T>> Form(string selector)
			{
				return HamletImpl.SetSelector(this.Form(), selector);
			}

			public virtual Hamlet.FIELDSET<Hamlet.BODY<T>> Fieldset()
			{
				this.CloseAttrs();
				return this._enclosing.Fieldset_(this, false);
			}

			public virtual Hamlet.FIELDSET<Hamlet.BODY<T>> Fieldset(string selector)
			{
				return HamletImpl.SetSelector(this.Fieldset(), selector);
			}

			public virtual Hamlet.SCRIPT<Hamlet.BODY<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, false);
			}

			public virtual Hamlet.BODY<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.BODY<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, false);
			}

			public virtual Hamlet.BODY<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.BODY<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, false);
			}

			public virtual Hamlet.BODY<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		private Hamlet.TABLE<T> Table_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.TABLE<T>(this, "table", e, Opt(true, inline, false));
		}

		private Hamlet.ADDRESS<T> Address_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.ADDRESS<T>(this, "address", e, Opt(true, inline, false));
		}

		private Hamlet.P<T> P<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.P<T>(this, "p", e, Opt(false, inline, false));
		}

		private Hamlet.HR<T> Hr_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.HR<T>(this, "hr", e, Opt(false, inline, false));
		}

		private Hamlet.DL<T> Dl_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.DL<T>(this, "dl", e, Opt(true, inline, false));
		}

		private Hamlet.DIV<T> Div_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.DIV<T>(this, "div", e, Opt(true, inline, false));
		}

		private Hamlet.BLOCKQUOTE<T> Blockquote_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.BLOCKQUOTE<T>(this, "blockquote", e, Opt(true, inline, false));
		}

		private Hamlet.BLOCKQUOTE<T> Bq_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.BLOCKQUOTE<T>(this, "blockquote", e, Opt(true, inline, false));
		}

		private Hamlet.FIELDSET<T> Fieldset_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.FIELDSET<T>(this, "fieldset", e, Opt(true, inline, false));
		}

		private Hamlet.FORM<T> Form_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.FORM<T>(this, "form", e, Opt(true, inline, false));
		}

		public class BR<T> : HamletImpl.EImp<T>, HamletSpec.BR
			where T : HamletSpec._
		{
			public BR(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.BR<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.BR<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.BR<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.BR<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			private readonly Hamlet _enclosing;
		}

		public class BDO<T> : HamletImpl.EImp<T>, HamletSpec.BDO
			where T : HamletSpec._
		{
			public BDO(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.BDO<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.BDO<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.BDO<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.BDO<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.BDO<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.BDO<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.BDO<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.BDO<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.BDO<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.BDO<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.BDO<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.BDO<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.BDO<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.BDO<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.BDO<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.BDO<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.BDO<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.BDO<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.BDO<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.BDO<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.BDO<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.BDO<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.BDO<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.BDO<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.BDO<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.BDO<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.BDO<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.BDO<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.BDO<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.BDO<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.BDO<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.BDO<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.BDO<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.BDO<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.BDO<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.BDO<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.BDO<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.BDO<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.BDO<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.BDO<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.BDO<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.BDO<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.BDO<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.BDO<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.BDO<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.BDO<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.BDO<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.BDO<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.BDO<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.BDO<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.BDO<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.BDO<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.BDO<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.BDO<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.BDO<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.BDO<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.BDO<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.BDO<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.BDO<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.BDO<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.BDO<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.BDO<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.BDO<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.BDO<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.BDO<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.BDO<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.BDO<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.BDO<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.BDO<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.BDO<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.BDO<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.BDO<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.BDO<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.BDO<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.BDO<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.BDO<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.BDO<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.BDO<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.BDO<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.BDO<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.BDO<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.BDO<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.BDO<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.BDO<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.BDO<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.BDO<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.BDO<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.BDO<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class SPAN<T> : HamletImpl.EImp<T>, HamletSpec.SPAN
			where T : HamletSpec._
		{
			public SPAN(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.SPAN<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.SPAN<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.SPAN<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.SPAN<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.SPAN<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.SPAN<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.SPAN<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.SPAN<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.SPAN<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.SPAN<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.SPAN<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.SPAN<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.SPAN<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.SPAN<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.SPAN<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.SPAN<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.SPAN<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.SPAN<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.SPAN<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.SPAN<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.SPAN<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.SPAN<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.SPAN<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.SPAN<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.SPAN<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.SPAN<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.SPAN<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.SPAN<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.SPAN<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.SPAN<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.SPAN<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.SPAN<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.SPAN<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.SPAN<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.SPAN<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.SPAN<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.SPAN<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.SPAN<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.SPAN<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.SPAN<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.SPAN<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.SPAN<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.SPAN<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.SPAN<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.SPAN<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.SPAN<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.SPAN<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.SPAN<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.SPAN<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.SPAN<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.SPAN<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.SPAN<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.SPAN<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.SPAN<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.SPAN<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.SPAN<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.SPAN<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.SPAN<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.SPAN<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.SPAN<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.SPAN<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.SPAN<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.SPAN<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.SPAN<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.SPAN<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.SPAN<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.SPAN<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.SPAN<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.SPAN<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.SPAN<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.SPAN<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.SPAN<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.SPAN<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.SPAN<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.SPAN<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.SPAN<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.SPAN<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.SPAN<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.SPAN<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.SPAN<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.SPAN<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.SPAN<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.SPAN<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.SPAN<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.SPAN<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.SPAN<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.SPAN<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.SPAN<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.SPAN<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.SPAN<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.SPAN<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.SPAN<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.SPAN<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.SPAN<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.SPAN<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.SPAN<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.SPAN<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.SPAN<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class SUP<T> : HamletImpl.EImp<T>, HamletSpec.SUP
			where T : HamletSpec._
		{
			public SUP(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.SUP<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.SUP<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.SUP<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.SUP<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.SUP<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.SUP<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.SUP<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.SUP<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.SUP<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.SUP<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.SUP<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.SUP<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.SUP<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.SUP<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.SUP<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.SUP<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.SUP<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.SUP<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.SUP<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.SUP<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.SUP<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.SUP<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.SUP<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.SUP<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.SUP<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.SUP<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.SUP<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.SUP<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.SUP<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.SUP<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.SUP<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.SUP<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.SUP<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.SUP<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.SUP<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.SUP<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.SUP<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.SUP<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.SUP<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.SUP<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.SUP<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.SUP<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.SUP<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.SUP<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.SUP<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.SUP<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.SUP<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.SUP<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.SUP<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.SUP<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.SUP<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.SUP<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.SUP<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.SUP<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.SUP<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.SUP<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.SUP<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.SUP<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.SUP<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.SUP<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.SUP<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.SUP<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.SUP<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.SUP<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.SUP<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.SUP<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.SUP<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.SUP<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.SUP<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.SUP<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.SUP<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.SUP<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.SUP<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.SUP<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.SUP<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.SUP<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.SUP<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.SUP<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.SUP<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.SUP<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.SUP<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.SUP<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.SUP<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.SUP<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.SUP<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.SUP<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.SUP<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.SUP<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.SUP<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.SUP<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.SUP<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.SUP<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.SUP<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.SUP<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.SUP<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.SUP<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class SUB<T> : HamletImpl.EImp<T>, HamletSpec.SUB
			where T : HamletSpec._
		{
			public SUB(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.SUB<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.SUB<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.SUB<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.SUB<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.SUB<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.SUB<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.SUB<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.SUB<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.SUB<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.SUB<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.SUB<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.SUB<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.SUB<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.SUB<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.SUB<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.SUB<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.SUB<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.SUB<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.SUB<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.SUB<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.SUB<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.SUB<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.SUB<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.SUB<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.SUB<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.SUB<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.SUB<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.SUB<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.SUB<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.SUB<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.SUB<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.SUB<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.SUB<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.SUB<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.SUB<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.SUB<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.SUB<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.SUB<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.SUB<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.SUB<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.SUB<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.SUB<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.SUB<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.SUB<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.SUB<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.SUB<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.SUB<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.SUB<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.SUB<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.SUB<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.SUB<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.SUB<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.SUB<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.SUB<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.SUB<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.SUB<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.SUB<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.SUB<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.SUB<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.SUB<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.SUB<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.SUB<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.SUB<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.SUB<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.SUB<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.SUB<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.SUB<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.SUB<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.SUB<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.SUB<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.SUB<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.SUB<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.SUB<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.SUB<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.SUB<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.SUB<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.SUB<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.SUB<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.SUB<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.SUB<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.SUB<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.SUB<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.SUB<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.SUB<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.SUB<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.SUB<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.SUB<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.SUB<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.SUB<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.SUB<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.SUB<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.SUB<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.SUB<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.SUB<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.SUB<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.SUB<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.SUB<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.SUB<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class ACRONYM<T> : HamletImpl.EImp<T>, HamletSpec.ACRONYM
			where T : HamletSpec._
		{
			public ACRONYM(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt>
				 opts)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.ACRONYM<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.ACRONYM<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.ACRONYM<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.ACRONYM<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.ACRONYM<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.ACRONYM<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.ACRONYM<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.ACRONYM<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.ACRONYM<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.ACRONYM<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.ACRONYM<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.ACRONYM<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.ACRONYM<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.ACRONYM<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.ACRONYM<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.ACRONYM<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.ACRONYM<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.ACRONYM<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.ACRONYM<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.ACRONYM<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.ACRONYM<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.ACRONYM<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.ACRONYM<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.ACRONYM<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.ACRONYM<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.ACRONYM<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.ACRONYM<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.ACRONYM<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.ACRONYM<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.ACRONYM<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.ACRONYM<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.ACRONYM<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.ACRONYM<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.ACRONYM<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.ACRONYM<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.ACRONYM<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.ACRONYM<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.ACRONYM<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.ACRONYM<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.ACRONYM<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.ACRONYM<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.ACRONYM<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.ACRONYM<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.ACRONYM<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.ACRONYM<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.ACRONYM<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.ACRONYM<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.ACRONYM<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.ACRONYM<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.ACRONYM<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.ACRONYM<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.ACRONYM<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.ACRONYM<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.ACRONYM<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.ACRONYM<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.ACRONYM<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.ACRONYM<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.ACRONYM<T> A(string selector, string href, string anchorText
				)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.ACRONYM<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.ACRONYM<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.ACRONYM<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.ACRONYM<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.ACRONYM<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.ACRONYM<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.ACRONYM<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.ACRONYM<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.ACRONYM<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.ACRONYM<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.ACRONYM<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.ACRONYM<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.ACRONYM<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.ACRONYM<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.ACRONYM<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.ACRONYM<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.ACRONYM<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.ACRONYM<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.ACRONYM<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.ACRONYM<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.ACRONYM<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.ACRONYM<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.ACRONYM<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.ACRONYM<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.ACRONYM<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.ACRONYM<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.ACRONYM<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.ACRONYM<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.ACRONYM<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.ACRONYM<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.ACRONYM<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.ACRONYM<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.ACRONYM<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.ACRONYM<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.ACRONYM<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.ACRONYM<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.ACRONYM<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.ACRONYM<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.ACRONYM<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.ACRONYM<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class ABBR<T> : HamletImpl.EImp<T>, HamletSpec.ABBR
			where T : HamletSpec._
		{
			public ABBR(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.ABBR<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.ABBR<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.ABBR<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.ABBR<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.ABBR<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.ABBR<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.ABBR<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.ABBR<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.ABBR<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.ABBR<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.ABBR<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.ABBR<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.ABBR<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.ABBR<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.ABBR<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.ABBR<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.ABBR<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.ABBR<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.ABBR<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.ABBR<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.ABBR<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.ABBR<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.ABBR<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.ABBR<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.ABBR<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.ABBR<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.ABBR<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.ABBR<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.ABBR<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.ABBR<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.ABBR<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.ABBR<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.ABBR<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.ABBR<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.ABBR<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.ABBR<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.ABBR<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.ABBR<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.ABBR<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.ABBR<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.ABBR<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.ABBR<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.ABBR<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.ABBR<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.ABBR<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.ABBR<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.ABBR<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.ABBR<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.ABBR<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.ABBR<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.ABBR<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.ABBR<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.ABBR<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.ABBR<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.ABBR<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.ABBR<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.ABBR<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.ABBR<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.ABBR<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.ABBR<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.ABBR<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.ABBR<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.ABBR<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.ABBR<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.ABBR<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.ABBR<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.ABBR<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.ABBR<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.ABBR<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.ABBR<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.ABBR<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.ABBR<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.ABBR<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.ABBR<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.ABBR<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.ABBR<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.ABBR<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.ABBR<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.ABBR<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.ABBR<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.ABBR<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.ABBR<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.ABBR<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.ABBR<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.ABBR<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.ABBR<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.ABBR<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.ABBR<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.ABBR<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.ABBR<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.ABBR<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.ABBR<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.ABBR<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.ABBR<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.ABBR<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.ABBR<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class CITE<T> : HamletImpl.EImp<T>, HamletSpec.CITE
			where T : HamletSpec._
		{
			public CITE(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.CITE<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.CITE<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.CITE<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.CITE<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.CITE<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.CITE<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.CITE<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.CITE<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.CITE<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.CITE<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.CITE<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.CITE<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.CITE<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.CITE<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.CITE<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.CITE<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.CITE<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.CITE<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.CITE<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.CITE<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.CITE<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.CITE<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.CITE<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.CITE<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.CITE<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.CITE<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.CITE<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.CITE<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.CITE<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.CITE<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.CITE<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.CITE<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.CITE<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.CITE<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.CITE<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.CITE<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.CITE<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.CITE<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.CITE<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.CITE<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.CITE<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.CITE<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.CITE<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.CITE<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.CITE<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.CITE<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.CITE<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.CITE<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.CITE<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.CITE<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.CITE<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.CITE<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.CITE<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.CITE<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.CITE<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.CITE<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.CITE<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.CITE<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.CITE<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.CITE<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.CITE<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.CITE<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.CITE<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.CITE<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.CITE<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.CITE<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.CITE<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.CITE<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.CITE<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.CITE<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.CITE<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.CITE<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.CITE<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.CITE<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.CITE<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.CITE<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.CITE<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.CITE<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.CITE<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.CITE<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.CITE<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.CITE<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.CITE<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.CITE<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.CITE<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.CITE<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.CITE<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.CITE<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.CITE<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.CITE<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.CITE<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.CITE<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.CITE<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.CITE<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.CITE<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.CITE<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class VAR<T> : HamletImpl.EImp<T>, HamletSpec.VAR
			where T : HamletSpec._
		{
			public VAR(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.VAR<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.VAR<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.VAR<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.VAR<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.VAR<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.VAR<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.VAR<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.VAR<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.VAR<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.VAR<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.VAR<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.VAR<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.VAR<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.VAR<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.VAR<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.VAR<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.VAR<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.VAR<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.VAR<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.VAR<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.VAR<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.VAR<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.VAR<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.VAR<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.VAR<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.VAR<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.VAR<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.VAR<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.VAR<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.VAR<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.VAR<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.VAR<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.VAR<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.VAR<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.VAR<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.VAR<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.VAR<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.VAR<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.VAR<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.VAR<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.VAR<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.VAR<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.VAR<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.VAR<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.VAR<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.VAR<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.VAR<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.VAR<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.VAR<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.VAR<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.VAR<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.VAR<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.VAR<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.VAR<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.VAR<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.VAR<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.VAR<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.VAR<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.VAR<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.VAR<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.VAR<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.VAR<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.VAR<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.VAR<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.VAR<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.VAR<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.VAR<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.VAR<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.VAR<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.VAR<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.VAR<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.VAR<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.VAR<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.VAR<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.VAR<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.VAR<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.VAR<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.VAR<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.VAR<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.VAR<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.VAR<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.VAR<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.VAR<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.VAR<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.VAR<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.VAR<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.VAR<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.VAR<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.VAR<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.VAR<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.VAR<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.VAR<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.VAR<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.VAR<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.VAR<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.VAR<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class KBD<T> : HamletImpl.EImp<T>, HamletSpec.KBD
			where T : HamletSpec._
		{
			public KBD(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.KBD<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.KBD<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.KBD<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.KBD<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.KBD<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.KBD<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.KBD<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.KBD<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.KBD<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.KBD<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.KBD<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.KBD<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.KBD<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.KBD<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.KBD<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.KBD<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.KBD<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.KBD<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.KBD<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.KBD<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.KBD<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.KBD<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.KBD<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.KBD<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.KBD<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.KBD<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.KBD<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.KBD<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.KBD<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.KBD<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.KBD<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.KBD<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.KBD<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.KBD<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.KBD<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.KBD<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.KBD<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.KBD<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.KBD<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.KBD<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.KBD<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.KBD<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.KBD<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.KBD<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.KBD<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.KBD<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.KBD<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.KBD<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.KBD<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.KBD<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.KBD<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.KBD<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.KBD<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.KBD<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.KBD<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.KBD<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.KBD<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.KBD<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.KBD<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.KBD<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.KBD<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.KBD<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.KBD<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.KBD<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.KBD<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.KBD<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.KBD<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.KBD<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.KBD<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.KBD<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.KBD<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.KBD<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.KBD<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.KBD<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.KBD<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.KBD<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.KBD<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.KBD<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.KBD<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.KBD<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.KBD<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.KBD<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.KBD<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.KBD<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.KBD<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.KBD<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.KBD<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.KBD<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.KBD<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.KBD<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.KBD<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.KBD<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.KBD<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.KBD<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.KBD<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.KBD<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class SAMP<T> : HamletImpl.EImp<T>, HamletSpec.SAMP
			where T : HamletSpec._
		{
			public SAMP(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.SAMP<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.SAMP<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.SAMP<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.SAMP<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.SAMP<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.SAMP<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.SAMP<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.SAMP<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.SAMP<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.SAMP<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.SAMP<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.SAMP<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.SAMP<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.SAMP<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.SAMP<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.SAMP<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.SAMP<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.SAMP<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.SAMP<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.SAMP<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.SAMP<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.SAMP<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.SAMP<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.SAMP<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.SAMP<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.SAMP<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.SAMP<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.SAMP<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.SAMP<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.SAMP<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.SAMP<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.SAMP<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.SAMP<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.SAMP<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.SAMP<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.SAMP<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.SAMP<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.SAMP<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.SAMP<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.SAMP<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.SAMP<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.SAMP<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.SAMP<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.SAMP<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.SAMP<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.SAMP<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.SAMP<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.SAMP<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.SAMP<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.SAMP<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.SAMP<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.SAMP<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.SAMP<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.SAMP<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.SAMP<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.SAMP<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.SAMP<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.SAMP<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.SAMP<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.SAMP<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.SAMP<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.SAMP<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.SAMP<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.SAMP<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.SAMP<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.SAMP<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.SAMP<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.SAMP<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.SAMP<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.SAMP<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.SAMP<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.SAMP<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.SAMP<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.SAMP<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.SAMP<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.SAMP<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.SAMP<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.SAMP<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.SAMP<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.SAMP<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.SAMP<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.SAMP<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.SAMP<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.SAMP<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.SAMP<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.SAMP<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.SAMP<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.SAMP<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.SAMP<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.SAMP<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.SAMP<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.SAMP<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.SAMP<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.SAMP<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.SAMP<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.SAMP<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.SAMP<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.SAMP<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class CODE<T> : HamletImpl.EImp<T>, HamletSpec.CODE
			where T : HamletSpec._
		{
			public CODE(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.CODE<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.CODE<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.CODE<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.CODE<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.CODE<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.CODE<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.CODE<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.CODE<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.CODE<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.CODE<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.CODE<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.CODE<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.CODE<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.CODE<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.CODE<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.CODE<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.CODE<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.CODE<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.CODE<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.CODE<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.CODE<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.CODE<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.CODE<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.CODE<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.CODE<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.CODE<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.CODE<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.CODE<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.CODE<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.CODE<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.CODE<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.CODE<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.CODE<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.CODE<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.CODE<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.CODE<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.CODE<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.CODE<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.CODE<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.CODE<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.CODE<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.CODE<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.CODE<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.CODE<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.CODE<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.CODE<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.CODE<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.CODE<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.CODE<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.CODE<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.CODE<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.CODE<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.CODE<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.CODE<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.CODE<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.CODE<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.CODE<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.CODE<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.CODE<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.CODE<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.CODE<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.CODE<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.CODE<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.CODE<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.CODE<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.CODE<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.CODE<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.CODE<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.CODE<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.CODE<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.CODE<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.CODE<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.CODE<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.CODE<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.CODE<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.CODE<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.CODE<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.CODE<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.CODE<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.CODE<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.CODE<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.CODE<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.CODE<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.CODE<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.CODE<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.CODE<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.CODE<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.CODE<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.CODE<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.CODE<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.CODE<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.CODE<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.CODE<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.CODE<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.CODE<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.CODE<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class DFN<T> : HamletImpl.EImp<T>, HamletSpec.DFN
			where T : HamletSpec._
		{
			public DFN(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.DFN<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.DFN<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.DFN<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.DFN<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.DFN<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.DFN<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.DFN<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.DFN<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.DFN<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.DFN<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.DFN<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.DFN<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.DFN<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.DFN<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.DFN<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.DFN<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.DFN<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.DFN<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.DFN<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.DFN<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.DFN<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.DFN<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.DFN<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.DFN<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.DFN<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.DFN<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.DFN<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.DFN<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.DFN<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.DFN<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.DFN<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.DFN<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.DFN<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.DFN<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.DFN<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.DFN<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.DFN<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.DFN<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.DFN<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.DFN<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.DFN<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.DFN<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.DFN<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.DFN<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.DFN<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.DFN<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.DFN<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.DFN<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.DFN<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.DFN<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.DFN<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.DFN<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.DFN<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.DFN<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.DFN<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.DFN<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.DFN<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.DFN<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.DFN<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.DFN<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.DFN<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.DFN<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.DFN<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.DFN<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.DFN<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.DFN<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.DFN<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.DFN<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.DFN<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.DFN<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.DFN<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.DFN<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.DFN<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.DFN<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.DFN<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.DFN<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.DFN<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.DFN<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.DFN<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.DFN<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.DFN<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.DFN<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.DFN<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.DFN<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.DFN<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.DFN<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.DFN<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.DFN<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.DFN<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.DFN<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.DFN<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.DFN<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.DFN<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.DFN<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.DFN<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.DFN<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class STRONG<T> : HamletImpl.EImp<T>, HamletSpec.STRONG
			where T : HamletSpec._
		{
			public STRONG(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> 
				opts)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.STRONG<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.STRONG<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.STRONG<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.STRONG<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.STRONG<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.STRONG<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.STRONG<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.STRONG<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.STRONG<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.STRONG<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.STRONG<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.STRONG<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.STRONG<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.STRONG<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.STRONG<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.STRONG<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.STRONG<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.STRONG<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.STRONG<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.STRONG<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.STRONG<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.STRONG<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.STRONG<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.STRONG<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.STRONG<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.STRONG<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.STRONG<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.STRONG<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.STRONG<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.STRONG<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.STRONG<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.STRONG<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.STRONG<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.STRONG<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.STRONG<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.STRONG<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.STRONG<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.STRONG<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.STRONG<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.STRONG<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.STRONG<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.STRONG<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.STRONG<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.STRONG<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.STRONG<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.STRONG<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.STRONG<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.STRONG<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.STRONG<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.STRONG<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.STRONG<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.STRONG<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.STRONG<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.STRONG<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.STRONG<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.STRONG<T> A(string selector, string href, string anchorText
				)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.STRONG<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.STRONG<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.STRONG<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.STRONG<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.STRONG<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.STRONG<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.STRONG<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.STRONG<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.STRONG<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.STRONG<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.STRONG<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.STRONG<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.STRONG<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.STRONG<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.STRONG<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.STRONG<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.STRONG<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.STRONG<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.STRONG<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.STRONG<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.STRONG<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.STRONG<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.STRONG<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.STRONG<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.STRONG<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.STRONG<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.STRONG<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.STRONG<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.STRONG<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.STRONG<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.STRONG<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.STRONG<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.STRONG<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.STRONG<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.STRONG<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.STRONG<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.STRONG<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.STRONG<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.STRONG<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.STRONG<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class EM<T> : HamletImpl.EImp<T>, HamletSpec.EM
			where T : HamletSpec._
		{
			public EM(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.EM<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.EM<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.EM<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.EM<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.EM<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.EM<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.EM<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.EM<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.EM<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.EM<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.EM<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.EM<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.EM<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.EM<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.EM<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.EM<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.EM<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.EM<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.EM<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.EM<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.EM<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.EM<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.EM<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.EM<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.EM<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.EM<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.EM<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.EM<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.EM<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.EM<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.EM<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.EM<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.EM<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.EM<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.EM<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.EM<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.EM<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.EM<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.EM<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.EM<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.EM<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.EM<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.EM<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.EM<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.EM<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.EM<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.EM<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.EM<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.EM<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.EM<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.EM<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.EM<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.EM<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.EM<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.EM<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.EM<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.EM<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.EM<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.EM<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.EM<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.EM<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.EM<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.EM<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.EM<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.EM<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.EM<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.EM<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.EM<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.EM<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.EM<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.EM<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.EM<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.EM<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.EM<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.EM<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.EM<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.EM<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.EM<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.EM<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.EM<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.EM<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.EM<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.EM<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.EM<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.EM<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.EM<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.EM<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.EM<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.EM<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.EM<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.EM<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.EM<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.EM<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.EM<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.EM<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.EM<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.EM<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.EM<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class SMALL<T> : HamletImpl.EImp<T>, HamletSpec.SMALL
			where T : HamletSpec._
		{
			public SMALL(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts
				)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.SMALL<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.SMALL<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.SMALL<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.SMALL<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.SMALL<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.SMALL<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.SMALL<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.SMALL<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.SMALL<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.SMALL<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.SMALL<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.SMALL<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.SMALL<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.SMALL<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.SMALL<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.SMALL<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.SMALL<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.SMALL<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.SMALL<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.SMALL<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.SMALL<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.SMALL<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.SMALL<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.SMALL<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.SMALL<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.SMALL<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.SMALL<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.SMALL<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.SMALL<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.SMALL<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.SMALL<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.SMALL<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.SMALL<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.SMALL<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.SMALL<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.SMALL<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.SMALL<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.SMALL<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.SMALL<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.SMALL<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.SMALL<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.SMALL<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.SMALL<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.SMALL<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.SMALL<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.SMALL<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.SMALL<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.SMALL<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.SMALL<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.SMALL<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.SMALL<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.SMALL<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.SMALL<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.SMALL<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.SMALL<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.SMALL<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.SMALL<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.SMALL<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.SMALL<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.SMALL<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.SMALL<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.SMALL<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.SMALL<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.SMALL<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.SMALL<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.SMALL<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.SMALL<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.SMALL<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.SMALL<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.SMALL<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.SMALL<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.SMALL<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.SMALL<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.SMALL<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.SMALL<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.SMALL<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.SMALL<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.SMALL<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.SMALL<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.SMALL<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.SMALL<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.SMALL<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.SMALL<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.SMALL<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.SMALL<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.SMALL<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.SMALL<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.SMALL<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.SMALL<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.SMALL<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.SMALL<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.SMALL<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.SMALL<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.SMALL<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.SMALL<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.SMALL<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class B<T> : HamletImpl.EImp<T>, HamletSpec.B
			where T : HamletSpec._
		{
			public B(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.B<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.B<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.B<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.B<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.B<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.B<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.B<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.B<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.B<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.B<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.B<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.B<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.B<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.B<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.B<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.B<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.B<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.B<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.B<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.B<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.B<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.B<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.B<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.B<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.B<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.B<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.B<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.B<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.B<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.B<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.B<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.B<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.B<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.B<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.B<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.B<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.B<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.B<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.B<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.B<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.B<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.B<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.B<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.B<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.B<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.B<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.B<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.B<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.B<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.B<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.B<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.B<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.B<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.B<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.B<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.B<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.B<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.B<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.B<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.B<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.B<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.B<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.B<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.B<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.B<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.B<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.B<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.B<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.B<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.B<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.B<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.B<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.B<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.B<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.B<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.B<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.B<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.B<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.B<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.B<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.B<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.B<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.B<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.B<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.B<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.B<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.B<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.B<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.B<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.B<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.B<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.B<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.B<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.B<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.B<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.B<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.B<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.B<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		public class I<T> : HamletImpl.EImp<T>, HamletSpec.I
			where T : HamletSpec._
		{
			public I(Hamlet _enclosing, string name, T parent, EnumSet<HamletImpl.EOpt> opts)
				: base(_enclosing)
			{
				this._enclosing = _enclosing;
			}

			public virtual Hamlet.I<T> $id(string value)
			{
				this.AddAttr("id", value);
				return this;
			}

			public virtual Hamlet.I<T> $class(string value)
			{
				this.AddAttr("class", value);
				return this;
			}

			public virtual Hamlet.I<T> $title(string value)
			{
				this.AddAttr("title", value);
				return this;
			}

			public virtual Hamlet.I<T> $style(string value)
			{
				this.AddAttr("style", value);
				return this;
			}

			public virtual Hamlet.I<T> $lang(string value)
			{
				this.AddAttr("lang", value);
				return this;
			}

			public virtual Hamlet.I<T> $dir(HamletSpec.Dir value)
			{
				this.AddAttr("dir", value);
				return this;
			}

			public virtual Hamlet.I<T> $onclick(string value)
			{
				this.AddAttr("onclick", value);
				return this;
			}

			public virtual Hamlet.I<T> $ondblclick(string value)
			{
				this.AddAttr("ondblclick", value);
				return this;
			}

			public virtual Hamlet.I<T> $onmousedown(string value)
			{
				this.AddAttr("onmousedown", value);
				return this;
			}

			public virtual Hamlet.I<T> $onmouseup(string value)
			{
				this.AddAttr("onmouseup", value);
				return this;
			}

			public virtual Hamlet.I<T> $onmouseover(string value)
			{
				this.AddAttr("onmouseover", value);
				return this;
			}

			public virtual Hamlet.I<T> $onmousemove(string value)
			{
				this.AddAttr("onmousemove", value);
				return this;
			}

			public virtual Hamlet.I<T> $onmouseout(string value)
			{
				this.AddAttr("onmouseout", value);
				return this;
			}

			public virtual Hamlet.I<T> $onkeypress(string value)
			{
				this.AddAttr("onkeypress", value);
				return this;
			}

			public virtual Hamlet.I<T> $onkeydown(string value)
			{
				this.AddAttr("onkeydown", value);
				return this;
			}

			public virtual Hamlet.I<T> $onkeyup(string value)
			{
				this.AddAttr("onkeyup", value);
				return this;
			}

			public virtual Hamlet.I<T> (params object[] lines)
			{
				this._p(true, lines);
				return this;
			}

			public virtual Hamlet.I<T> _r(params object[] lines)
			{
				this._p(false, lines);
				return this;
			}

			public virtual Hamlet.B<Hamlet.I<T>> B()
			{
				this.CloseAttrs();
				return this._enclosing.B(this, true);
			}

			public virtual Hamlet.I<T> B(string cdata)
			{
				return this.B().(cdata).();
			}

			public virtual Hamlet.I<T> B(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.B(), selector).(cdata).();
			}

			public virtual Hamlet.I<Hamlet.I<T>> I()
			{
				this.CloseAttrs();
				return this._enclosing.I(this, true);
			}

			public virtual Hamlet.I<T> I(string cdata)
			{
				return this.I().(cdata).();
			}

			public virtual Hamlet.I<T> I(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.I(), selector).(cdata).();
			}

			public virtual Hamlet.SMALL<Hamlet.I<T>> Small()
			{
				this.CloseAttrs();
				return this._enclosing.Small_(this, true);
			}

			public virtual Hamlet.I<T> Small(string cdata)
			{
				return this.Small().(cdata).();
			}

			public virtual Hamlet.I<T> Small(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Small(), selector).(cdata).();
			}

			public virtual Hamlet.I<T> Em(string cdata)
			{
				return this.Em().(cdata).();
			}

			public virtual Hamlet.EM<Hamlet.I<T>> Em()
			{
				this.CloseAttrs();
				return this._enclosing.Em_(this, true);
			}

			public virtual Hamlet.I<T> Em(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Em(), selector).(cdata).();
			}

			public virtual Hamlet.STRONG<Hamlet.I<T>> Strong()
			{
				this.CloseAttrs();
				return this._enclosing.Strong_(this, true);
			}

			public virtual Hamlet.I<T> Strong(string cdata)
			{
				return this.Strong().(cdata).();
			}

			public virtual Hamlet.I<T> Strong(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Strong(), selector).(cdata).();
			}

			public virtual Hamlet.DFN<Hamlet.I<T>> Dfn()
			{
				this.CloseAttrs();
				return this._enclosing.Dfn_(this, true);
			}

			public virtual Hamlet.I<T> Dfn(string cdata)
			{
				return this.Dfn().(cdata).();
			}

			public virtual Hamlet.I<T> Dfn(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Dfn(), selector).(cdata).();
			}

			public virtual Hamlet.CODE<Hamlet.I<T>> Code()
			{
				this.CloseAttrs();
				return this._enclosing.Code_(this, true);
			}

			public virtual Hamlet.I<T> Code(string cdata)
			{
				return this.Code().(cdata).();
			}

			public virtual Hamlet.I<T> Code(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Code(), selector).(cdata).();
			}

			public virtual Hamlet.I<T> Samp(string cdata)
			{
				return this.Samp().(cdata).();
			}

			public virtual Hamlet.SAMP<Hamlet.I<T>> Samp()
			{
				this.CloseAttrs();
				return this._enclosing.Samp_(this, true);
			}

			public virtual Hamlet.I<T> Samp(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Samp(), selector).(cdata).();
			}

			public virtual Hamlet.KBD<Hamlet.I<T>> Kbd()
			{
				this.CloseAttrs();
				return this._enclosing.Kbd_(this, true);
			}

			public virtual Hamlet.I<T> Kbd(string cdata)
			{
				return this.Kbd().(cdata).();
			}

			public virtual Hamlet.I<T> Kbd(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Kbd(), selector).(cdata).();
			}

			public virtual Hamlet.VAR<Hamlet.I<T>> Var()
			{
				this.CloseAttrs();
				return this._enclosing.Var_(this, true);
			}

			public virtual Hamlet.I<T> Var(string cdata)
			{
				return this.Var().(cdata).();
			}

			public virtual Hamlet.I<T> Var(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Var(), selector).(cdata).();
			}

			public virtual Hamlet.CITE<Hamlet.I<T>> Cite()
			{
				this.CloseAttrs();
				return this._enclosing.Cite_(this, true);
			}

			public virtual Hamlet.I<T> Cite(string cdata)
			{
				return this.Cite().(cdata).();
			}

			public virtual Hamlet.I<T> Cite(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Cite(), selector).(cdata).();
			}

			public virtual Hamlet.ABBR<Hamlet.I<T>> Abbr()
			{
				this.CloseAttrs();
				return this._enclosing.Abbr_(this, true);
			}

			public virtual Hamlet.I<T> Abbr(string cdata)
			{
				return this.Abbr().(cdata).();
			}

			public virtual Hamlet.I<T> Abbr(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Abbr(), selector).(cdata).();
			}

			public virtual Hamlet.A<Hamlet.I<T>> A()
			{
				this.CloseAttrs();
				return this._enclosing.A(this, true);
			}

			public virtual Hamlet.A<Hamlet.I<T>> A(string selector)
			{
				return HamletImpl.SetSelector(this.A(), selector);
			}

			public virtual Hamlet.I<T> A(string href, string anchorText)
			{
				return this.A().$href(href).(anchorText).();
			}

			public virtual Hamlet.I<T> A(string selector, string href, string anchorText)
			{
				return HamletImpl.SetSelector(this.A(), selector).$href(href).(anchorText).();
			}

			public virtual Hamlet.IMG<Hamlet.I<T>> Img()
			{
				this.CloseAttrs();
				return this._enclosing.Img_(this, true);
			}

			public virtual Hamlet.I<T> Img(string src)
			{
				return this.Img().$src(src).();
			}

			public virtual Hamlet.OBJECT<Hamlet.I<T>> Object()
			{
				this.CloseAttrs();
				return this._enclosing.Object_(this, true);
			}

			public virtual Hamlet.OBJECT<Hamlet.I<T>> Object(string selector)
			{
				return HamletImpl.SetSelector(this.Object(), selector);
			}

			public virtual Hamlet.SUB<Hamlet.I<T>> Sub()
			{
				this.CloseAttrs();
				return this._enclosing.Sub_(this, true);
			}

			public virtual Hamlet.I<T> Sub(string cdata)
			{
				return this.Sub().(cdata).();
			}

			public virtual Hamlet.I<T> Sub(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sub(), selector).(cdata).();
			}

			public virtual Hamlet.SUP<Hamlet.I<T>> Sup()
			{
				this.CloseAttrs();
				return this._enclosing.Sup_(this, true);
			}

			public virtual Hamlet.I<T> Sup(string cdata)
			{
				return this.Sup().(cdata).();
			}

			public virtual Hamlet.I<T> Sup(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Sup(), selector).(cdata).();
			}

			public virtual Hamlet.MAP<Hamlet.I<T>> Map()
			{
				this.CloseAttrs();
				return this._enclosing.Map_(this, true);
			}

			public virtual Hamlet.MAP<Hamlet.I<T>> Map(string selector)
			{
				return HamletImpl.SetSelector(this.Map(), selector);
			}

			public virtual Hamlet.I<T> Q(string cdata)
			{
				return this.Q().(cdata).();
			}

			public virtual Hamlet.I<T> Q(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Q(), selector).(cdata).();
			}

			public virtual Hamlet.Q<Hamlet.I<T>> Q()
			{
				this.CloseAttrs();
				return this._enclosing.Q(this, true);
			}

			public virtual Hamlet.BR<Hamlet.I<T>> Br()
			{
				this.CloseAttrs();
				return this._enclosing.Br_(this, true);
			}

			public virtual Hamlet.I<T> Br(string selector)
			{
				return HamletImpl.SetSelector(this.Br(), selector).();
			}

			public virtual Hamlet.BDO<Hamlet.I<T>> Bdo()
			{
				this.CloseAttrs();
				return this._enclosing.Bdo_(this, true);
			}

			public virtual Hamlet.I<T> Bdo(HamletSpec.Dir dir, string cdata)
			{
				return this.Bdo().$dir(dir).(cdata).();
			}

			public virtual Hamlet.SPAN<Hamlet.I<T>> Span()
			{
				this.CloseAttrs();
				return this._enclosing.Span_(this, true);
			}

			public virtual Hamlet.I<T> Span(string cdata)
			{
				return this.Span().(cdata).();
			}

			public virtual Hamlet.I<T> Span(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Span(), selector).(cdata).();
			}

			public virtual Hamlet.SCRIPT<Hamlet.I<T>> Script()
			{
				this.CloseAttrs();
				return this._enclosing.Script_(this, true);
			}

			public virtual Hamlet.I<T> Script(string src)
			{
				return HamletImpl.SetScriptSrc(this.Script(), src).();
			}

			public virtual Hamlet.INS<Hamlet.I<T>> Ins()
			{
				this.CloseAttrs();
				return this._enclosing.Ins_(this, true);
			}

			public virtual Hamlet.I<T> Ins(string cdata)
			{
				return this.Ins().(cdata).();
			}

			public virtual Hamlet.DEL<Hamlet.I<T>> Del()
			{
				this.CloseAttrs();
				return this._enclosing.Del_(this, true);
			}

			public virtual Hamlet.I<T> Del(string cdata)
			{
				return this.Del().(cdata).();
			}

			public virtual Hamlet.LABEL<Hamlet.I<T>> Label()
			{
				this.CloseAttrs();
				return this._enclosing.Label_(this, true);
			}

			public virtual Hamlet.I<T> Label(string forId, string cdata)
			{
				return this.Label().$for(forId).(cdata).();
			}

			public virtual Hamlet.INPUT<Hamlet.I<T>> Input(string selector)
			{
				return HamletImpl.SetSelector(this.Input(), selector);
			}

			public virtual Hamlet.INPUT<Hamlet.I<T>> Input()
			{
				this.CloseAttrs();
				return this._enclosing.Input_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.I<T>> Select()
			{
				this.CloseAttrs();
				return this._enclosing.Select_(this, true);
			}

			public virtual Hamlet.SELECT<Hamlet.I<T>> Select(string selector)
			{
				return HamletImpl.SetSelector(this.Select(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.I<T>> Textarea(string selector)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector);
			}

			public virtual Hamlet.TEXTAREA<Hamlet.I<T>> Textarea()
			{
				this.CloseAttrs();
				return this._enclosing.Textarea_(this, true);
			}

			public virtual Hamlet.I<T> Textarea(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Textarea(), selector).(cdata).();
			}

			public virtual Hamlet.BUTTON<Hamlet.I<T>> Button()
			{
				this.CloseAttrs();
				return this._enclosing.Button_(this, true);
			}

			public virtual Hamlet.BUTTON<Hamlet.I<T>> Button(string selector)
			{
				return HamletImpl.SetSelector(this.Button(), selector);
			}

			public virtual Hamlet.I<T> Button(string selector, string cdata)
			{
				return HamletImpl.SetSelector(this.Button(), selector).(cdata).();
			}

			private readonly Hamlet _enclosing;
		}

		private Hamlet.INPUT<T> Input_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.INPUT<T>(this, "input", e, Opt(false, inline, false));
		}

		private Hamlet.SELECT<T> Select_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.SELECT<T>(this, "select", e, Opt(true, inline, false));
		}

		private Hamlet.TEXTAREA<T> Textarea_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.TEXTAREA<T>(this, "textarea", e, Opt(true, inline, false));
		}

		private Hamlet.BUTTON<T> Button_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.BUTTON<T>(this, "button", e, Opt(true, inline, false));
		}

		private Hamlet.LABEL<T> Label_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.LABEL<T>(this, "label", e, Opt(true, inline, false));
		}

		private Hamlet.MAP<T> Map_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.MAP<T>(this, "map", e, Opt(true, inline, false));
		}

		private Hamlet.Q<T> Q<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.Q<T>(this, "q", e, Opt(true, inline, false));
		}

		private Hamlet.BR<T> Br_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.BR<T>(this, "br", e, Opt(false, inline, false));
		}

		private Hamlet.BDO<T> Bdo_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.BDO<T>(this, "bdo", e, Opt(true, inline, false));
		}

		private Hamlet.SPAN<T> Span_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.SPAN<T>(this, "span", e, Opt(true, inline, false));
		}

		private Hamlet.INS<T> Ins_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.INS<T>(this, "ins", e, Opt(true, inline, false));
		}

		private Hamlet.DEL<T> Del_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.DEL<T>(this, "del", e, Opt(true, inline, false));
		}

		private Hamlet.A<T> A<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.A<T>(this, "a", e, Opt(true, inline, false));
		}

		private Hamlet.SUB<T> Sub_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.SUB<T>(this, "sub", e, Opt(true, inline, false));
		}

		private Hamlet.SUP<T> Sup_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.SUP<T>(this, "sup", e, Opt(true, inline, false));
		}

		private Hamlet.IMG<T> Img_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.IMG<T>(this, "img", e, Opt(false, inline, false));
		}

		private Hamlet.EM<T> Em_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.EM<T>(this, "em", e, Opt(true, inline, false));
		}

		private Hamlet.STRONG<T> Strong_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.STRONG<T>(this, "strong", e, Opt(true, inline, false));
		}

		private Hamlet.DFN<T> Dfn_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.DFN<T>(this, "dfn", e, Opt(true, inline, false));
		}

		private Hamlet.CODE<T> Code_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.CODE<T>(this, "code", e, Opt(true, inline, false));
		}

		private Hamlet.SAMP<T> Samp_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.SAMP<T>(this, "samp", e, Opt(true, inline, false));
		}

		private Hamlet.KBD<T> Kbd_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.KBD<T>(this, "kbd", e, Opt(true, inline, false));
		}

		private Hamlet.VAR<T> Var_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.VAR<T>(this, "var", e, Opt(true, inline, false));
		}

		private Hamlet.CITE<T> Cite_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.CITE<T>(this, "cite", e, Opt(true, inline, false));
		}

		private Hamlet.ABBR<T> Abbr_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.ABBR<T>(this, "abbr", e, Opt(true, inline, false));
		}

		private Hamlet.B<T> B<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.B<T>(this, "b", e, Opt(true, inline, false));
		}

		private Hamlet.I<T> I<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.I<T>(this, "i", e, Opt(true, inline, false));
		}

		private Hamlet.SMALL<T> Small_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.SMALL<T>(this, "small", e, Opt(true, inline, false));
		}

		private Hamlet.PRE<T> Pre_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.PRE<T>(this, "pre", e, Opt(true, inline, true));
		}

		private Hamlet.UL<T> Ul_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.UL<T>(this, "ul", e, Opt(true, inline, false));
		}

		private Hamlet.OL<T> Ol_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.OL<T>(this, "ol", e, Opt(true, inline, false));
		}

		private Hamlet.H1<T> H1<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.H1<T>(this, "h1", e, Opt(true, inline, false));
		}

		private Hamlet.H2<T> H2<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.H2<T>(this, "h2", e, Opt(true, inline, false));
		}

		private Hamlet.H3<T> H3<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.H3<T>(this, "h3", e, Opt(true, inline, false));
		}

		private Hamlet.H4<T> H4<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.H4<T>(this, "h4", e, Opt(true, inline, false));
		}

		private Hamlet.H5<T> H5<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.H5<T>(this, "h5", e, Opt(true, inline, false));
		}

		private Hamlet.H6<T> H6<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.H6<T>(this, "h6", e, Opt(true, inline, false));
		}

		private Hamlet.STYLE<T> Style_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.STYLE<T>(this, "style", e, Opt(true, inline, false));
		}

		private Hamlet.LINK<T> Link_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.LINK<T>(this, "link", e, Opt(false, inline, false));
		}

		private Hamlet.META<T> Meta_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.META<T>(this, "meta", e, Opt(false, inline, false));
		}

		private Hamlet.OBJECT<T> Object_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.OBJECT<T>(this, "object", e, Opt(true, inline, false));
		}

		private Hamlet.SCRIPT<T> Script_<T>(T e, bool inline)
			where T : HamletSpec._
		{
			return new Hamlet.SCRIPT<T>(this, "script", e, Opt(true, inline, false));
		}

		public virtual Hamlet.HEAD<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Head()
		{
			return Head_(this, false);
		}

		public virtual Hamlet.BODY<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Body()
		{
			return Body_(this, false);
		}

		public virtual Hamlet.BODY<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Body(string
			 selector)
		{
			return SetSelector(Body(), selector);
		}

		public virtual Hamlet.BASE<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Base()
		{
			return Base_(this, false);
		}

		public virtual Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet Base(string href)
		{
			return Base().$href(href).();
		}

		public virtual Hamlet.TITLE<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Title()
		{
			return Title_(this, false);
		}

		public virtual Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet Title(string cdata)
		{
			return Title().(cdata).();
		}

		public virtual Hamlet.STYLE<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Style()
		{
			return Style_(this, false);
		}

		public virtual Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet Style(params object[] 
			lines)
		{
			return Style().$type("text/css").(lines).();
		}

		public virtual Hamlet.LINK<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Link()
		{
			return Link_(this, false);
		}

		public virtual Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet Link(string href)
		{
			return SetLinkHref(Link(), href).();
		}

		public virtual Hamlet.META<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Meta()
		{
			return Meta_(this, false);
		}

		public virtual Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet Meta(string name, string
			 content)
		{
			return Meta().$name(name).$content(content).();
		}

		public virtual Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet Meta_http(string header
			, string content)
		{
			return Meta().$http_equiv(header).$content(content).();
		}

		public virtual Hamlet.SCRIPT<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Script(
			)
		{
			return Script_(this, false);
		}

		public virtual Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet Script(string src)
		{
			return SetScriptSrc(Script(), src).();
		}

		public virtual Hamlet.OBJECT<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Object(
			)
		{
			return Object_(this, true);
		}

		public virtual Hamlet.OBJECT<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Object(
			string selector)
		{
			return SetSelector(Object(), selector);
		}

		public virtual Hamlet.TABLE<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Table()
		{
			return Table_(this, false);
		}

		public virtual Hamlet.TABLE<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Table(string
			 selector)
		{
			return SetSelector(Table(), selector);
		}

		public virtual Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet Address(string cdata)
		{
			return Address().(cdata).();
		}

		public virtual Hamlet.ADDRESS<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Address
			()
		{
			return Address_(this, false);
		}

		public virtual Hamlet.P<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> P(string selector
			)
		{
			return SetSelector(P(), selector);
		}

		public virtual Hamlet.P<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> P()
		{
			return P(this, false);
		}

		public virtual Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet (Type cls)
		{
			SubView(cls);
			return this;
		}

		public virtual Hamlet.HR<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Hr()
		{
			return Hr_(this, false);
		}

		public virtual Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet Hr(string selector)
		{
			return SetSelector(Hr(), selector).();
		}

		public virtual Hamlet.DL<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Dl(string selector
			)
		{
			return SetSelector(Dl(), selector);
		}

		public virtual Hamlet.DL<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Dl()
		{
			return Dl_(this, false);
		}

		public virtual Hamlet.DIV<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Div(string
			 selector)
		{
			return SetSelector(Div(), selector);
		}

		public virtual Hamlet.DIV<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Div()
		{
			return Div_(this, false);
		}

		public virtual Hamlet.BLOCKQUOTE<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Blockquote
			()
		{
			return Blockquote_(this, false);
		}

		public virtual Hamlet.BLOCKQUOTE<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Bq(
			)
		{
			return Blockquote_(this, false);
		}

		public virtual Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet H1(string cdata)
		{
			return H1().(cdata).();
		}

		public virtual Hamlet.H1<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> H1()
		{
			return H1(this, false);
		}

		public virtual Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet H1(string selector, string
			 cdata)
		{
			return SetSelector(H1(), selector).(cdata).();
		}

		public virtual Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet H2(string cdata)
		{
			return H2().(cdata).();
		}

		public virtual Hamlet.H2<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> H2()
		{
			return H2(this, false);
		}

		public virtual Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet H2(string selector, string
			 cdata)
		{
			return SetSelector(H2(), selector).(cdata).();
		}

		public virtual Hamlet.H3<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> H3()
		{
			return H3(this, false);
		}

		public virtual Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet H3(string cdata)
		{
			return H3().(cdata).();
		}

		public virtual Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet H3(string selector, string
			 cdata)
		{
			return SetSelector(H3(), selector).(cdata).();
		}

		public virtual Hamlet.H4<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> H4()
		{
			return H4(this, false);
		}

		public virtual Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet H4(string cdata)
		{
			return H4().(cdata).();
		}

		public virtual Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet H4(string selector, string
			 cdata)
		{
			return SetSelector(H4(), selector).(cdata).();
		}

		public virtual Hamlet.H5<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> H5()
		{
			return H5(this, false);
		}

		public virtual Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet H5(string cdata)
		{
			return H5().(cdata).();
		}

		public virtual Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet H5(string selector, string
			 cdata)
		{
			return SetSelector(H5(), selector).(cdata).();
		}

		public virtual Hamlet.H6<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> H6()
		{
			return H6(this, false);
		}

		public virtual Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet H6(string cdata)
		{
			return H6().(cdata).();
		}

		public virtual Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet H6(string selector, string
			 cdata)
		{
			return SetSelector(H6(), selector).(cdata).();
		}

		public virtual Hamlet.UL<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Ul()
		{
			return Ul_(this, false);
		}

		public virtual Hamlet.UL<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Ul(string selector
			)
		{
			return SetSelector(Ul(), selector);
		}

		public virtual Hamlet.OL<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Ol()
		{
			return Ol_(this, false);
		}

		public virtual Hamlet.OL<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Ol(string selector
			)
		{
			return SetSelector(Ol(), selector);
		}

		public virtual Hamlet.PRE<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Pre()
		{
			return Pre_(this, false);
		}

		public virtual Hamlet.PRE<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Pre(string
			 selector)
		{
			return SetSelector(Pre(), selector);
		}

		public virtual Hamlet.FORM<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Form()
		{
			return Form_(this, false);
		}

		public virtual Hamlet.FORM<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Form(string
			 selector)
		{
			return SetSelector(Form(), selector);
		}

		public virtual Hamlet.FIELDSET<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Fieldset
			()
		{
			return Fieldset_(this, false);
		}

		public virtual Hamlet.FIELDSET<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Fieldset
			(string selector)
		{
			return SetSelector(Fieldset(), selector);
		}

		public virtual Hamlet.INS<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Ins()
		{
			return Ins_(this, false);
		}

		public virtual Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet Ins(string cdata)
		{
			return Ins().(cdata).();
		}

		public virtual Hamlet.DEL<Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet> Del()
		{
			return Del_(this, false);
		}

		public virtual Org.Apache.Hadoop.Yarn.Webapp.Hamlet.Hamlet Del(string cdata)
		{
			return Del().(cdata).();
		}
	}
}
