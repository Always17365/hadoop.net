using System.Collections.Generic;
using System.IO;
using Org.Apache.Hadoop.Util;
using Sharpen;

namespace Org.Apache.Hadoop.Record.Compiler
{
	/// <summary>C Code generator front-end for Hadoop record I/O.</summary>
	internal class CGenerator : CodeGenerator
	{
		internal CGenerator()
		{
		}

		/// <summary>Generate C code.</summary>
		/// <remarks>
		/// Generate C code. This method only creates the requested file(s)
		/// and spits-out file-level elements (such as include statements etc.)
		/// record-level code is generated by JRecord.
		/// </remarks>
		/// <exception cref="System.IO.IOException"/>
		internal override void GenCode(string name, AList<JFile> ilist, AList<JRecord> rlist
			, string destDir, AList<string> options)
		{
			name = new FilePath(destDir, (new FilePath(name)).GetName()).GetAbsolutePath();
			FileWriter cc = new FileWriter(name + ".c");
			try
			{
				FileWriter hh = new FileWriter(name + ".h");
				try
				{
					hh.Write("#ifndef __" + StringUtils.ToUpperCase(name).Replace('.', '_') + "__\n");
					hh.Write("#define __" + StringUtils.ToUpperCase(name).Replace('.', '_') + "__\n");
					hh.Write("#include \"recordio.h\"\n");
					for (IEnumerator<JFile> iter = ilist.GetEnumerator(); iter.HasNext(); )
					{
						hh.Write("#include \"" + iter.Next().GetName() + ".h\"\n");
					}
					cc.Write("#include \"" + name + ".h\"\n");
					/*
					for (Iterator<JRecord> iter = rlist.iterator(); iter.hasNext();) {
					iter.next().genCppCode(hh, cc);
					}
					*/
					hh.Write("#endif //" + StringUtils.ToUpperCase(name).Replace('.', '_') + "__\n");
				}
				finally
				{
					hh.Close();
				}
			}
			finally
			{
				cc.Close();
			}
		}
	}
}
