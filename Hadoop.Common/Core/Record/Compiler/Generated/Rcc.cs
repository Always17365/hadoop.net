/* Generated By:JavaCC: Do not edit this line. Rcc.java */
using System.IO;
using Org.Apache.Hadoop.Record.Compiler;
using Org.Apache.Hadoop.Util;


namespace Org.Apache.Hadoop.Record.Compiler.Generated
{
	[System.ObsoleteAttribute(@"Replaced by <a href=""http://hadoop.apache.org/avro/"">Avro</a>."
		)]
	public class Rcc : RccConstants
	{
		private static string language = "java";

		private static string destDir = ".";

		private static AList<string> recFiles = new AList<string>();

		private static AList<string> cmdargs = new AList<string>();

		private static JFile curFile;

		private static Hashtable<string, JRecord> recTab;

		private static string curDir = ".";

		private static string curFileName;

		private static string curModuleName;

		public static void Main(string[] args)
		{
			System.Environment.Exit(Driver(args));
		}

		public static void Usage()
		{
			System.Console.Error.WriteLine("Usage: rcc --language [java|c++] ddl-files");
		}

		public static int Driver(string[] args)
		{
			for (int i = 0; i < args.Length; i++)
			{
				if (Runtime.EqualsIgnoreCase("-l", args[i]) || Runtime.EqualsIgnoreCase
					("--language", args[i]))
				{
					language = StringUtils.ToLowerCase(args[i + 1]);
					i++;
				}
				else
				{
					if (Runtime.EqualsIgnoreCase("-d", args[i]) || Runtime.EqualsIgnoreCase
						("--destdir", args[i]))
					{
						destDir = args[i + 1];
						i++;
					}
					else
					{
						if (args[i].StartsWith("-"))
						{
							string arg = Runtime.Substring(args[i], 1);
							if (arg.StartsWith("-"))
							{
								arg = Runtime.Substring(arg, 1);
							}
							cmdargs.AddItem(StringUtils.ToLowerCase(arg));
						}
						else
						{
							recFiles.AddItem(args[i]);
						}
					}
				}
			}
			if (recFiles.Count == 0)
			{
				Usage();
				return 1;
			}
			for (int i_1 = 0; i_1 < recFiles.Count; i_1++)
			{
				curFileName = recFiles[i_1];
				FilePath file = new FilePath(curFileName);
				try
				{
					FileReader reader = new FileReader(file);
					Org.Apache.Hadoop.Record.Compiler.Generated.Rcc parser = new Org.Apache.Hadoop.Record.Compiler.Generated.Rcc
						(reader);
					try
					{
						recTab = new Hashtable<string, JRecord>();
						curFile = parser.Input();
					}
					catch (ParseException e)
					{
						System.Console.Error.WriteLine(e.ToString());
						return 1;
					}
					try
					{
						reader.Close();
					}
					catch (IOException)
					{
					}
				}
				catch (FileNotFoundException)
				{
					System.Console.Error.WriteLine("File " + recFiles[i_1] + " Not found.");
					return 1;
				}
				try
				{
					int retCode = curFile.GenCode(language, destDir, cmdargs);
					if (retCode != 0)
					{
						return retCode;
					}
				}
				catch (IOException e)
				{
					System.Console.Error.WriteLine(e.ToString());
					return 1;
				}
			}
			return 0;
		}

		/// <exception cref="Org.Apache.Hadoop.Record.Compiler.Generated.ParseException"/>
		public JFile Input()
		{
			AList<JFile> ilist = new AList<JFile>();
			AList<JRecord> rlist = new AList<JRecord>();
			JFile i;
			AList<JRecord> l;
			while (true)
			{
				switch ((jj_ntk == -1) ? Jj_ntk() : jj_ntk)
				{
					case IncludeTkn:
					{
						i = Include();
						ilist.AddItem(i);
						break;
					}

					case ModuleTkn:
					{
						l = Module();
						Collections.AddAll(rlist, l);
						break;
					}

					default:
					{
						jj_la1[0] = jj_gen;
						Jj_consume_token(-1);
						throw new ParseException();
					}
				}
				switch ((jj_ntk == -1) ? Jj_ntk() : jj_ntk)
				{
					case ModuleTkn:
					case IncludeTkn:
					{
						break;
					}

					default:
					{
						jj_la1[1] = jj_gen;
						goto label_1_break;
					}
				}
label_1_continue: ;
			}
label_1_break: ;
			Jj_consume_token(0);
			{
				if (true)
				{
					return new JFile(curFileName, ilist, rlist);
				}
			}
			throw new Error("Missing return statement in function");
		}

		/// <exception cref="Org.Apache.Hadoop.Record.Compiler.Generated.ParseException"/>
		public JFile Include()
		{
			string fname;
			Token t;
			Jj_consume_token(IncludeTkn);
			t = Jj_consume_token(CstringTkn);
			JFile ret = null;
			fname = t.image.ReplaceAll("^\"", string.Empty).ReplaceAll("\"$", string.Empty);
			FilePath file = new FilePath(curDir, fname);
			string tmpDir = curDir;
			string tmpFile = curFileName;
			curDir = file.GetParent();
			curFileName = file.GetName();
			try
			{
				FileReader reader = new FileReader(file);
				Org.Apache.Hadoop.Record.Compiler.Generated.Rcc parser = new Org.Apache.Hadoop.Record.Compiler.Generated.Rcc
					(reader);
				try
				{
					ret = parser.Input();
					System.Console.Out.WriteLine(fname + " Parsed Successfully");
				}
				catch (ParseException e)
				{
					System.Console.Out.WriteLine(e.ToString());
					System.Environment.Exit(1);
				}
				try
				{
					reader.Close();
				}
				catch (IOException)
				{
				}
			}
			catch (FileNotFoundException)
			{
				System.Console.Out.WriteLine("File " + fname + " Not found.");
				System.Environment.Exit(1);
			}
			curDir = tmpDir;
			curFileName = tmpFile;
			{
				if (true)
				{
					return ret;
				}
			}
			throw new Error("Missing return statement in function");
		}

		/// <exception cref="Org.Apache.Hadoop.Record.Compiler.Generated.ParseException"/>
		public AList<JRecord> Module()
		{
			string mName;
			AList<JRecord> rlist;
			Jj_consume_token(ModuleTkn);
			mName = ModuleName();
			curModuleName = mName;
			Jj_consume_token(LbraceTkn);
			rlist = RecordList();
			Jj_consume_token(RbraceTkn);
			{
				if (true)
				{
					return rlist;
				}
			}
			throw new Error("Missing return statement in function");
		}

		/// <exception cref="Org.Apache.Hadoop.Record.Compiler.Generated.ParseException"/>
		public string ModuleName()
		{
			string name = string.Empty;
			Token t;
			t = Jj_consume_token(IdentTkn);
			name += t.image;
			while (true)
			{
				switch ((jj_ntk == -1) ? Jj_ntk() : jj_ntk)
				{
					case DotTkn:
					{
						break;
					}

					default:
					{
						jj_la1[2] = jj_gen;
						goto label_2_break;
					}
				}
				Jj_consume_token(DotTkn);
				t = Jj_consume_token(IdentTkn);
				name += "." + t.image;
label_2_continue: ;
			}
label_2_break: ;
			{
				if (true)
				{
					return name;
				}
			}
			throw new Error("Missing return statement in function");
		}

		/// <exception cref="Org.Apache.Hadoop.Record.Compiler.Generated.ParseException"/>
		public AList<JRecord> RecordList()
		{
			AList<JRecord> rlist = new AList<JRecord>();
			JRecord r;
			while (true)
			{
				r = Record();
				rlist.AddItem(r);
				switch ((jj_ntk == -1) ? Jj_ntk() : jj_ntk)
				{
					case RecordTkn:
					{
						break;
					}

					default:
					{
						jj_la1[3] = jj_gen;
						goto label_3_break;
					}
				}
label_3_continue: ;
			}
label_3_break: ;
			{
				if (true)
				{
					return rlist;
				}
			}
			throw new Error("Missing return statement in function");
		}

		/// <exception cref="Org.Apache.Hadoop.Record.Compiler.Generated.ParseException"/>
		public JRecord Record()
		{
			string rname;
			AList<JField<JType>> flist = new AList<JField<JType>>();
			Token t;
			JField<JType> f;
			Jj_consume_token(RecordTkn);
			t = Jj_consume_token(IdentTkn);
			rname = t.image;
			Jj_consume_token(LbraceTkn);
			while (true)
			{
				f = Field();
				flist.AddItem(f);
				Jj_consume_token(SemicolonTkn);
				switch ((jj_ntk == -1) ? Jj_ntk() : jj_ntk)
				{
					case ByteTkn:
					case BooleanTkn:
					case IntTkn:
					case LongTkn:
					case FloatTkn:
					case DoubleTkn:
					case UstringTkn:
					case BufferTkn:
					case VectorTkn:
					case MapTkn:
					case IdentTkn:
					{
						break;
					}

					default:
					{
						jj_la1[4] = jj_gen;
						goto label_4_break;
					}
				}
label_4_continue: ;
			}
label_4_break: ;
			Jj_consume_token(RbraceTkn);
			string fqn = curModuleName + "." + rname;
			JRecord r = new JRecord(fqn, flist);
			recTab[fqn] = r;
			{
				if (true)
				{
					return r;
				}
			}
			throw new Error("Missing return statement in function");
		}

		/// <exception cref="Org.Apache.Hadoop.Record.Compiler.Generated.ParseException"/>
		public JField<JType> Field()
		{
			JType jt;
			Token t;
			jt = Type();
			t = Jj_consume_token(IdentTkn);
			{
				if (true)
				{
					return new JField<JType>(t.image, jt);
				}
			}
			throw new Error("Missing return statement in function");
		}

		/// <exception cref="Org.Apache.Hadoop.Record.Compiler.Generated.ParseException"/>
		public JType Type()
		{
			JType jt;
			Token t;
			string rname;
			switch ((jj_ntk == -1) ? Jj_ntk() : jj_ntk)
			{
				case MapTkn:
				{
					jt = Map();
					if (true)
					{
						return jt;
					}
					break;
				}

				case VectorTkn:
				{
					jt = Vector();
					if (true)
					{
						return jt;
					}
					break;
				}

				case ByteTkn:
				{
					Jj_consume_token(ByteTkn);
					if (true)
					{
						return new JByte();
					}
					break;
				}

				case BooleanTkn:
				{
					Jj_consume_token(BooleanTkn);
					if (true)
					{
						return new JBoolean();
					}
					break;
				}

				case IntTkn:
				{
					Jj_consume_token(IntTkn);
					if (true)
					{
						return new JInt();
					}
					break;
				}

				case LongTkn:
				{
					Jj_consume_token(LongTkn);
					if (true)
					{
						return new JLong();
					}
					break;
				}

				case FloatTkn:
				{
					Jj_consume_token(FloatTkn);
					if (true)
					{
						return new JFloat();
					}
					break;
				}

				case DoubleTkn:
				{
					Jj_consume_token(DoubleTkn);
					if (true)
					{
						return new JDouble();
					}
					break;
				}

				case UstringTkn:
				{
					Jj_consume_token(UstringTkn);
					if (true)
					{
						return new JString();
					}
					break;
				}

				case BufferTkn:
				{
					Jj_consume_token(BufferTkn);
					if (true)
					{
						return new JBuffer();
					}
					break;
				}

				case IdentTkn:
				{
					rname = ModuleName();
					if (rname.IndexOf('.', 0) < 0)
					{
						rname = curModuleName + "." + rname;
					}
					JRecord r = recTab[rname];
					if (r == null)
					{
						System.Console.Out.WriteLine("Type " + rname + " not known. Exiting.");
						System.Environment.Exit(1);
					}
					if (true)
					{
						return r;
					}
					break;
				}

				default:
				{
					jj_la1[5] = jj_gen;
					Jj_consume_token(-1);
					throw new ParseException();
				}
			}
			throw new Error("Missing return statement in function");
		}

		/// <exception cref="Org.Apache.Hadoop.Record.Compiler.Generated.ParseException"/>
		public JMap Map()
		{
			JType jt1;
			JType jt2;
			Jj_consume_token(MapTkn);
			Jj_consume_token(LtTkn);
			jt1 = Type();
			Jj_consume_token(CommaTkn);
			jt2 = Type();
			Jj_consume_token(GtTkn);
			{
				if (true)
				{
					return new JMap(jt1, jt2);
				}
			}
			throw new Error("Missing return statement in function");
		}

		/// <exception cref="Org.Apache.Hadoop.Record.Compiler.Generated.ParseException"/>
		public JVector Vector()
		{
			JType jt;
			Jj_consume_token(VectorTkn);
			Jj_consume_token(LtTkn);
			jt = Type();
			Jj_consume_token(GtTkn);
			{
				if (true)
				{
					return new JVector(jt);
				}
			}
			throw new Error("Missing return statement in function");
		}

		public RccTokenManager token_source;

		internal SimpleCharStream jj_input_stream;

		public Token token;

		public Token jj_nt;

		private int jj_ntk;

		private int jj_gen;

		private readonly int[] jj_la1 = new int[6];

		private static int[] jj_la1_0;

		private static int[] jj_la1_1;

		static Rcc()
		{
			Jj_la1_0();
			Jj_la1_1();
		}

		private static void Jj_la1_0()
		{
			jj_la1_0 = new int[] { unchecked((int)(0x2800)), unchecked((int)(0x2800)), unchecked(
				(int)(0x40000000)), unchecked((int)(0x1000)), unchecked((int)(0xffc000)), unchecked(
				(int)(0xffc000)) };
		}

		private static void Jj_la1_1()
		{
			jj_la1_1 = new int[] { unchecked((int)(0x0)), unchecked((int)(0x0)), unchecked((int
				)(0x0)), unchecked((int)(0x0)), unchecked((int)(0x1)), unchecked((int)(0x1)) };
		}

		public Rcc(InputStream stream)
			: this(stream, null)
		{
		}

		public Rcc(InputStream stream, string encoding)
		{
			try
			{
				jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1);
			}
			catch (UnsupportedEncodingException e)
			{
				throw new RuntimeException(e);
			}
			token_source = new RccTokenManager(jj_input_stream);
			token = new Token();
			jj_ntk = -1;
			jj_gen = 0;
			for (int i = 0; i < 6; i++)
			{
				jj_la1[i] = -1;
			}
		}

		public virtual void ReInit(InputStream stream)
		{
			ReInit(stream, null);
		}

		public virtual void ReInit(InputStream stream, string encoding)
		{
			try
			{
				jj_input_stream.ReInit(stream, encoding, 1, 1);
			}
			catch (UnsupportedEncodingException e)
			{
				throw new RuntimeException(e);
			}
			token_source.ReInit(jj_input_stream);
			token = new Token();
			jj_ntk = -1;
			jj_gen = 0;
			for (int i = 0; i < 6; i++)
			{
				jj_la1[i] = -1;
			}
		}

		public Rcc(StreamReader stream)
		{
			jj_input_stream = new SimpleCharStream(stream, 1, 1);
			token_source = new RccTokenManager(jj_input_stream);
			token = new Token();
			jj_ntk = -1;
			jj_gen = 0;
			for (int i = 0; i < 6; i++)
			{
				jj_la1[i] = -1;
			}
		}

		public virtual void ReInit(StreamReader stream)
		{
			jj_input_stream.ReInit(stream, 1, 1);
			token_source.ReInit(jj_input_stream);
			token = new Token();
			jj_ntk = -1;
			jj_gen = 0;
			for (int i = 0; i < 6; i++)
			{
				jj_la1[i] = -1;
			}
		}

		public Rcc(RccTokenManager tm)
		{
			token_source = tm;
			token = new Token();
			jj_ntk = -1;
			jj_gen = 0;
			for (int i = 0; i < 6; i++)
			{
				jj_la1[i] = -1;
			}
		}

		public virtual void ReInit(RccTokenManager tm)
		{
			token_source = tm;
			token = new Token();
			jj_ntk = -1;
			jj_gen = 0;
			for (int i = 0; i < 6; i++)
			{
				jj_la1[i] = -1;
			}
		}

		/// <exception cref="Org.Apache.Hadoop.Record.Compiler.Generated.ParseException"/>
		private Token Jj_consume_token(int kind)
		{
			Token oldToken;
			if ((oldToken = token).next != null)
			{
				token = token.next;
			}
			else
			{
				token = token.next = token_source.GetNextToken();
			}
			jj_ntk = -1;
			if (token.kind == kind)
			{
				jj_gen++;
				return token;
			}
			token = oldToken;
			jj_kind = kind;
			throw GenerateParseException();
		}

		public Token GetNextToken()
		{
			if (token.next != null)
			{
				token = token.next;
			}
			else
			{
				token = token.next = token_source.GetNextToken();
			}
			jj_ntk = -1;
			jj_gen++;
			return token;
		}

		public Token GetToken(int index)
		{
			Token t = token;
			for (int i = 0; i < index; i++)
			{
				if (t.next != null)
				{
					t = t.next;
				}
				else
				{
					t = t.next = token_source.GetNextToken();
				}
			}
			return t;
		}

		private int Jj_ntk()
		{
			if ((jj_nt = token.next) == null)
			{
				return (jj_ntk = (token.next = token_source.GetNextToken()).kind);
			}
			else
			{
				return (jj_ntk = jj_nt.kind);
			}
		}

		private Vector<int[]> jj_expentries = new Vector<int[]>();

		private int[] jj_expentry;

		private int jj_kind = -1;

		public virtual ParseException GenerateParseException()
		{
			jj_expentries.Clear();
			bool[] la1tokens = new bool[33];
			for (int i = 0; i < 33; i++)
			{
				la1tokens[i] = false;
			}
			if (jj_kind >= 0)
			{
				la1tokens[jj_kind] = true;
				jj_kind = -1;
			}
			for (int i_1 = 0; i_1 < 6; i_1++)
			{
				if (jj_la1[i_1] == jj_gen)
				{
					for (int j = 0; j < 32; j++)
					{
						if ((jj_la1_0[i_1] & (1 << j)) != 0)
						{
							la1tokens[j] = true;
						}
						if ((jj_la1_1[i_1] & (1 << j)) != 0)
						{
							la1tokens[32 + j] = true;
						}
					}
				}
			}
			for (int i_2 = 0; i_2 < 33; i_2++)
			{
				if (la1tokens[i_2])
				{
					jj_expentry = new int[1];
					jj_expentry[0] = i_2;
					jj_expentries.Add(jj_expentry);
				}
			}
			int[][] exptokseq = new int[jj_expentries.Count][];
			for (int i_3 = 0; i_3 < jj_expentries.Count; i_3++)
			{
				exptokseq[i_3] = jj_expentries[i_3];
			}
			return new ParseException(token, exptokseq, tokenImage);
		}

		public void Enable_tracing()
		{
		}

		public void Disable_tracing()
		{
		}
	}
}
