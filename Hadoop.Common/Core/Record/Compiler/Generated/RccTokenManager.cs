/* Generated By:JavaCC: Do not edit this line. RccTokenManager.java */
using System.IO;
using System.Text;
using Sharpen;

namespace Org.Apache.Hadoop.Record.Compiler.Generated
{
	[System.ObsoleteAttribute(@"Replaced by <a href=""http://hadoop.apache.org/avro/"">Avro</a>."
		)]
	public class RccTokenManager : RccConstants
	{
		public TextWriter debugStream = System.Console.Out;

		public virtual void SetDebugStream(TextWriter ds)
		{
			debugStream = ds;
		}

		private int JjMoveStringLiteralDfa0_1()
		{
			return JjMoveNfa_1(0, 0);
		}

		private void JjCheckNAdd(int state)
		{
			if (jjrounds[state] != jjround)
			{
				jjstateSet[jjnewStateCnt++] = state;
				jjrounds[state] = jjround;
			}
		}

		private void JjAddStates(int start, int end)
		{
			do
			{
				jjstateSet[jjnewStateCnt++] = jjnextStates[start];
			}
			while (start++ != end);
		}

		private void JjCheckNAddTwoStates(int state1, int state2)
		{
			JjCheckNAdd(state1);
			JjCheckNAdd(state2);
		}

		private void JjCheckNAddStates(int start, int end)
		{
			do
			{
				JjCheckNAdd(jjnextStates[start]);
			}
			while (start++ != end);
		}

		private void JjCheckNAddStates(int start)
		{
			JjCheckNAdd(jjnextStates[start]);
			JjCheckNAdd(jjnextStates[start + 1]);
		}

		private int JjMoveNfa_1(int startState, int curPos)
		{
			int[] nextStates;
			int startsAt = 0;
			jjnewStateCnt = 3;
			int i = 1;
			jjstateSet[0] = startState;
			int j;
			int kind = unchecked((int)(0x7fffffff));
			for (; ; )
			{
				if (++jjround == unchecked((int)(0x7fffffff)))
				{
					ReInitRounds();
				}
				if (curChar < 64)
				{
					long l = 1L << curChar;
					do
					{
						switch (jjstateSet[--i])
						{
							case 0:
							{
								if ((unchecked((long)(0x2400L)) & l) != 0L)
								{
									if (kind > 6)
									{
										kind = 6;
									}
								}
								if (curChar == 13)
								{
									jjstateSet[jjnewStateCnt++] = 1;
								}
								break;
							}

							case 1:
							{
								if (curChar == 10 && kind > 6)
								{
									kind = 6;
								}
								break;
							}

							case 2:
							{
								if (curChar == 13)
								{
									jjstateSet[jjnewStateCnt++] = 1;
								}
								break;
							}

							default:
							{
								break;
							}
						}
MatchLoop_continue: ;
					}
					while (i != startsAt);
MatchLoop_break: ;
				}
				else
				{
					if (curChar < 128)
					{
						long l = 1L << (curChar & 0x3f);
						do
						{
							switch (jjstateSet[--i])
							{
								default:
								{
									break;
								}
							}
MatchLoop_continue: ;
						}
						while (i != startsAt);
MatchLoop_break: ;
					}
					else
					{
						int i2 = (curChar & unchecked((int)(0xff))) >> 6;
						long l2 = 1L << (curChar & 0x3f);
						do
						{
							switch (jjstateSet[--i])
							{
								default:
								{
									break;
								}
							}
MatchLoop_continue: ;
						}
						while (i != startsAt);
MatchLoop_break: ;
					}
				}
				if (kind != unchecked((int)(0x7fffffff)))
				{
					jjmatchedKind = kind;
					jjmatchedPos = curPos;
					kind = unchecked((int)(0x7fffffff));
				}
				++curPos;
				if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
				{
					return curPos;
				}
				try
				{
					curChar = input_stream.ReadChar();
				}
				catch (IOException)
				{
					return curPos;
				}
			}
		}

		private int JjStopStringLiteralDfa_0(int pos, long active0)
		{
			switch (pos)
			{
				case 0:
				{
					if ((active0 & unchecked((long)(0xfff800L))) != 0L)
					{
						jjmatchedKind = 32;
						return 4;
					}
					return -1;
				}

				case 1:
				{
					if ((active0 & unchecked((long)(0xfff800L))) != 0L)
					{
						jjmatchedKind = 32;
						jjmatchedPos = 1;
						return 4;
					}
					return -1;
				}

				case 2:
				{
					if ((active0 & unchecked((long)(0x7ef800L))) != 0L)
					{
						jjmatchedKind = 32;
						jjmatchedPos = 2;
						return 4;
					}
					if ((active0 & unchecked((long)(0x810000L))) != 0L)
					{
						return 4;
					}
					return -1;
				}

				case 3:
				{
					if ((active0 & unchecked((long)(0x24000L))) != 0L)
					{
						return 4;
					}
					if ((active0 & unchecked((long)(0x7cb800L))) != 0L)
					{
						jjmatchedKind = 32;
						jjmatchedPos = 3;
						return 4;
					}
					return -1;
				}

				case 4:
				{
					if ((active0 & unchecked((long)(0x41000L))) != 0L)
					{
						return 4;
					}
					if ((active0 & unchecked((long)(0x78a800L))) != 0L)
					{
						jjmatchedKind = 32;
						jjmatchedPos = 4;
						return 4;
					}
					return -1;
				}

				case 5:
				{
					if ((active0 & unchecked((long)(0x680800L))) != 0L)
					{
						return 4;
					}
					if ((active0 & unchecked((long)(0x10a000L))) != 0L)
					{
						jjmatchedKind = 32;
						jjmatchedPos = 5;
						return 4;
					}
					return -1;
				}

				default:
				{
					return -1;
				}
			}
		}

		private int JjStartNfa_0(int pos, long active0)
		{
			return JjMoveNfa_0(JjStopStringLiteralDfa_0(pos, active0), pos + 1);
		}

		private int JjStopAtPos(int pos, int kind)
		{
			jjmatchedKind = kind;
			jjmatchedPos = pos;
			return pos + 1;
		}

		private int JjStartNfaWithStates_0(int pos, int kind, int state)
		{
			jjmatchedKind = kind;
			jjmatchedPos = pos;
			try
			{
				curChar = input_stream.ReadChar();
			}
			catch (IOException)
			{
				return pos + 1;
			}
			return JjMoveNfa_0(state, pos + 1);
		}

		private int JjMoveStringLiteralDfa0_0()
		{
			switch (curChar)
			{
				case 44:
				{
					return JjStopAtPos(0, 29);
				}

				case 46:
				{
					return JjStopAtPos(0, 30);
				}

				case 47:
				{
					return JjMoveStringLiteralDfa1_0(unchecked((long)(0x120L)));
				}

				case 59:
				{
					return JjStopAtPos(0, 28);
				}

				case 60:
				{
					return JjStopAtPos(0, 26);
				}

				case 62:
				{
					return JjStopAtPos(0, 27);
				}

				case 98:
				{
					return JjMoveStringLiteralDfa1_0(unchecked((long)(0x20c000L)));
				}

				case 99:
				{
					return JjMoveStringLiteralDfa1_0(unchecked((long)(0x1000L)));
				}

				case 100:
				{
					return JjMoveStringLiteralDfa1_0(unchecked((long)(0x80000L)));
				}

				case 102:
				{
					return JjMoveStringLiteralDfa1_0(unchecked((long)(0x40000L)));
				}

				case 105:
				{
					return JjMoveStringLiteralDfa1_0(unchecked((long)(0x12000L)));
				}

				case 108:
				{
					return JjMoveStringLiteralDfa1_0(unchecked((long)(0x20000L)));
				}

				case 109:
				{
					return JjMoveStringLiteralDfa1_0(unchecked((long)(0x800800L)));
				}

				case 117:
				{
					return JjMoveStringLiteralDfa1_0(unchecked((long)(0x100000L)));
				}

				case 118:
				{
					return JjMoveStringLiteralDfa1_0(unchecked((long)(0x400000L)));
				}

				case 123:
				{
					return JjStopAtPos(0, 24);
				}

				case 125:
				{
					return JjStopAtPos(0, 25);
				}

				default:
				{
					return JjMoveNfa_0(0, 0);
				}
			}
		}

		private int JjMoveStringLiteralDfa1_0(long active0)
		{
			try
			{
				curChar = input_stream.ReadChar();
			}
			catch (IOException)
			{
				JjStopStringLiteralDfa_0(0, active0);
				return 1;
			}
			switch (curChar)
			{
				case 42:
				{
					if ((active0 & unchecked((long)(0x100L))) != 0L)
					{
						return JjStopAtPos(1, 8);
					}
					break;
				}

				case 47:
				{
					if ((active0 & unchecked((long)(0x20L))) != 0L)
					{
						return JjStopAtPos(1, 5);
					}
					break;
				}

				case 97:
				{
					return JjMoveStringLiteralDfa2_0(active0, unchecked((long)(0x800000L)));
				}

				case 101:
				{
					return JjMoveStringLiteralDfa2_0(active0, unchecked((long)(0x400000L)));
				}

				case 108:
				{
					return JjMoveStringLiteralDfa2_0(active0, unchecked((long)(0x41000L)));
				}

				case 110:
				{
					return JjMoveStringLiteralDfa2_0(active0, unchecked((long)(0x12000L)));
				}

				case 111:
				{
					return JjMoveStringLiteralDfa2_0(active0, unchecked((long)(0xa8800L)));
				}

				case 115:
				{
					return JjMoveStringLiteralDfa2_0(active0, unchecked((long)(0x100000L)));
				}

				case 117:
				{
					return JjMoveStringLiteralDfa2_0(active0, unchecked((long)(0x200000L)));
				}

				case 121:
				{
					return JjMoveStringLiteralDfa2_0(active0, unchecked((long)(0x4000L)));
				}

				default:
				{
					break;
				}
			}
			return JjStartNfa_0(0, active0);
		}

		private int JjMoveStringLiteralDfa2_0(long old0, long active0)
		{
			if (((active0 &= old0)) == 0L)
			{
				return JjStartNfa_0(0, old0);
			}
			try
			{
				curChar = input_stream.ReadChar();
			}
			catch (IOException)
			{
				JjStopStringLiteralDfa_0(1, active0);
				return 2;
			}
			switch (curChar)
			{
				case 97:
				{
					return JjMoveStringLiteralDfa3_0(active0, unchecked((long)(0x1000L)));
				}

				case 99:
				{
					return JjMoveStringLiteralDfa3_0(active0, unchecked((long)(0x402000L)));
				}

				case 100:
				{
					return JjMoveStringLiteralDfa3_0(active0, unchecked((long)(0x800L)));
				}

				case 102:
				{
					return JjMoveStringLiteralDfa3_0(active0, unchecked((long)(0x200000L)));
				}

				case 110:
				{
					return JjMoveStringLiteralDfa3_0(active0, unchecked((long)(0x20000L)));
				}

				case 111:
				{
					return JjMoveStringLiteralDfa3_0(active0, unchecked((long)(0x48000L)));
				}

				case 112:
				{
					if ((active0 & unchecked((long)(0x800000L))) != 0L)
					{
						return JjStartNfaWithStates_0(2, 23, 4);
					}
					break;
				}

				case 116:
				{
					if ((active0 & unchecked((long)(0x10000L))) != 0L)
					{
						return JjStartNfaWithStates_0(2, 16, 4);
					}
					return JjMoveStringLiteralDfa3_0(active0, unchecked((long)(0x104000L)));
				}

				case 117:
				{
					return JjMoveStringLiteralDfa3_0(active0, unchecked((long)(0x80000L)));
				}

				default:
				{
					break;
				}
			}
			return JjStartNfa_0(1, active0);
		}

		private int JjMoveStringLiteralDfa3_0(long old0, long active0)
		{
			if (((active0 &= old0)) == 0L)
			{
				return JjStartNfa_0(1, old0);
			}
			try
			{
				curChar = input_stream.ReadChar();
			}
			catch (IOException)
			{
				JjStopStringLiteralDfa_0(2, active0);
				return 3;
			}
			switch (curChar)
			{
				case 97:
				{
					return JjMoveStringLiteralDfa4_0(active0, unchecked((long)(0x40000L)));
				}

				case 98:
				{
					return JjMoveStringLiteralDfa4_0(active0, unchecked((long)(0x80000L)));
				}

				case 101:
				{
					if ((active0 & unchecked((long)(0x4000L))) != 0L)
					{
						return JjStartNfaWithStates_0(3, 14, 4);
					}
					break;
				}

				case 102:
				{
					return JjMoveStringLiteralDfa4_0(active0, unchecked((long)(0x200000L)));
				}

				case 103:
				{
					if ((active0 & unchecked((long)(0x20000L))) != 0L)
					{
						return JjStartNfaWithStates_0(3, 17, 4);
					}
					break;
				}

				case 108:
				{
					return JjMoveStringLiteralDfa4_0(active0, unchecked((long)(0xa000L)));
				}

				case 114:
				{
					return JjMoveStringLiteralDfa4_0(active0, unchecked((long)(0x100000L)));
				}

				case 115:
				{
					return JjMoveStringLiteralDfa4_0(active0, unchecked((long)(0x1000L)));
				}

				case 116:
				{
					return JjMoveStringLiteralDfa4_0(active0, unchecked((long)(0x400000L)));
				}

				case 117:
				{
					return JjMoveStringLiteralDfa4_0(active0, unchecked((long)(0x800L)));
				}

				default:
				{
					break;
				}
			}
			return JjStartNfa_0(2, active0);
		}

		private int JjMoveStringLiteralDfa4_0(long old0, long active0)
		{
			if (((active0 &= old0)) == 0L)
			{
				return JjStartNfa_0(2, old0);
			}
			try
			{
				curChar = input_stream.ReadChar();
			}
			catch (IOException)
			{
				JjStopStringLiteralDfa_0(3, active0);
				return 4;
			}
			switch (curChar)
			{
				case 101:
				{
					return JjMoveStringLiteralDfa5_0(active0, unchecked((long)(0x208000L)));
				}

				case 105:
				{
					return JjMoveStringLiteralDfa5_0(active0, unchecked((long)(0x100000L)));
				}

				case 108:
				{
					return JjMoveStringLiteralDfa5_0(active0, unchecked((long)(0x80800L)));
				}

				case 111:
				{
					return JjMoveStringLiteralDfa5_0(active0, unchecked((long)(0x400000L)));
				}

				case 115:
				{
					if ((active0 & unchecked((long)(0x1000L))) != 0L)
					{
						return JjStartNfaWithStates_0(4, 12, 4);
					}
					break;
				}

				case 116:
				{
					if ((active0 & unchecked((long)(0x40000L))) != 0L)
					{
						return JjStartNfaWithStates_0(4, 18, 4);
					}
					break;
				}

				case 117:
				{
					return JjMoveStringLiteralDfa5_0(active0, unchecked((long)(0x2000L)));
				}

				default:
				{
					break;
				}
			}
			return JjStartNfa_0(3, active0);
		}

		private int JjMoveStringLiteralDfa5_0(long old0, long active0)
		{
			if (((active0 &= old0)) == 0L)
			{
				return JjStartNfa_0(3, old0);
			}
			try
			{
				curChar = input_stream.ReadChar();
			}
			catch (IOException)
			{
				JjStopStringLiteralDfa_0(4, active0);
				return 5;
			}
			switch (curChar)
			{
				case 97:
				{
					return JjMoveStringLiteralDfa6_0(active0, unchecked((long)(0x8000L)));
				}

				case 100:
				{
					return JjMoveStringLiteralDfa6_0(active0, unchecked((long)(0x2000L)));
				}

				case 101:
				{
					if ((active0 & unchecked((long)(0x800L))) != 0L)
					{
						return JjStartNfaWithStates_0(5, 11, 4);
					}
					else
					{
						if ((active0 & unchecked((long)(0x80000L))) != 0L)
						{
							return JjStartNfaWithStates_0(5, 19, 4);
						}
					}
					break;
				}

				case 110:
				{
					return JjMoveStringLiteralDfa6_0(active0, unchecked((long)(0x100000L)));
				}

				case 114:
				{
					if ((active0 & unchecked((long)(0x200000L))) != 0L)
					{
						return JjStartNfaWithStates_0(5, 21, 4);
					}
					else
					{
						if ((active0 & unchecked((long)(0x400000L))) != 0L)
						{
							return JjStartNfaWithStates_0(5, 22, 4);
						}
					}
					break;
				}

				default:
				{
					break;
				}
			}
			return JjStartNfa_0(4, active0);
		}

		private int JjMoveStringLiteralDfa6_0(long old0, long active0)
		{
			if (((active0 &= old0)) == 0L)
			{
				return JjStartNfa_0(4, old0);
			}
			try
			{
				curChar = input_stream.ReadChar();
			}
			catch (IOException)
			{
				JjStopStringLiteralDfa_0(5, active0);
				return 6;
			}
			switch (curChar)
			{
				case 101:
				{
					if ((active0 & unchecked((long)(0x2000L))) != 0L)
					{
						return JjStartNfaWithStates_0(6, 13, 4);
					}
					break;
				}

				case 103:
				{
					if ((active0 & unchecked((long)(0x100000L))) != 0L)
					{
						return JjStartNfaWithStates_0(6, 20, 4);
					}
					break;
				}

				case 110:
				{
					if ((active0 & unchecked((long)(0x8000L))) != 0L)
					{
						return JjStartNfaWithStates_0(6, 15, 4);
					}
					break;
				}

				default:
				{
					break;
				}
			}
			return JjStartNfa_0(5, active0);
		}

		internal static readonly long[] jjbitVec0 = new long[] { unchecked((long)(0x0L)), 
			unchecked((long)(0x0L)), unchecked((long)(0xffffffffffffffffL)), unchecked((long
			)(0xffffffffffffffffL)) };

		private int JjMoveNfa_0(int startState, int curPos)
		{
			int[] nextStates;
			int startsAt = 0;
			jjnewStateCnt = 5;
			int i = 1;
			jjstateSet[0] = startState;
			int j;
			int kind = unchecked((int)(0x7fffffff));
			for (; ; )
			{
				if (++jjround == unchecked((int)(0x7fffffff)))
				{
					ReInitRounds();
				}
				if (curChar < 64)
				{
					long l = 1L << curChar;
					do
					{
						switch (jjstateSet[--i])
						{
							case 0:
							{
								if (curChar == 34)
								{
									JjCheckNAdd(1);
								}
								break;
							}

							case 1:
							{
								if ((unchecked((long)(0xfffffffbffffffffL)) & l) != 0L)
								{
									JjCheckNAddTwoStates(1, 2);
								}
								break;
							}

							case 2:
							{
								if (curChar == 34 && kind > 31)
								{
									kind = 31;
								}
								break;
							}

							case 4:
							{
								if ((unchecked((long)(0x3ff000000000000L)) & l) == 0L)
								{
									break;
								}
								if (kind > 32)
								{
									kind = 32;
								}
								jjstateSet[jjnewStateCnt++] = 4;
								break;
							}

							default:
							{
								break;
							}
						}
MatchLoop_continue: ;
					}
					while (i != startsAt);
MatchLoop_break: ;
				}
				else
				{
					if (curChar < 128)
					{
						long l = 1L << (curChar & 0x3f);
						do
						{
							switch (jjstateSet[--i])
							{
								case 0:
								{
									if ((unchecked((long)(0x7fffffe07fffffeL)) & l) == 0L)
									{
										break;
									}
									if (kind > 32)
									{
										kind = 32;
									}
									JjCheckNAdd(4);
									break;
								}

								case 1:
								{
									JjAddStates(0, 1);
									break;
								}

								case 4:
								{
									if ((unchecked((long)(0x7fffffe87fffffeL)) & l) == 0L)
									{
										break;
									}
									if (kind > 32)
									{
										kind = 32;
									}
									JjCheckNAdd(4);
									break;
								}

								default:
								{
									break;
								}
							}
MatchLoop_continue: ;
						}
						while (i != startsAt);
MatchLoop_break: ;
					}
					else
					{
						int i2 = (curChar & unchecked((int)(0xff))) >> 6;
						long l2 = 1L << (curChar & 0x3f);
						do
						{
							switch (jjstateSet[--i])
							{
								case 1:
								{
									if ((jjbitVec0[i2] & l2) != 0L)
									{
										JjAddStates(0, 1);
									}
									break;
								}

								default:
								{
									break;
								}
							}
MatchLoop_continue: ;
						}
						while (i != startsAt);
MatchLoop_break: ;
					}
				}
				if (kind != unchecked((int)(0x7fffffff)))
				{
					jjmatchedKind = kind;
					jjmatchedPos = curPos;
					kind = unchecked((int)(0x7fffffff));
				}
				++curPos;
				if ((i = jjnewStateCnt) == (startsAt = 5 - (jjnewStateCnt = startsAt)))
				{
					return curPos;
				}
				try
				{
					curChar = input_stream.ReadChar();
				}
				catch (IOException)
				{
					return curPos;
				}
			}
		}

		private int JjMoveStringLiteralDfa0_2()
		{
			switch (curChar)
			{
				case 42:
				{
					return JjMoveStringLiteralDfa1_2(unchecked((long)(0x200L)));
				}

				default:
				{
					return 1;
				}
			}
		}

		private int JjMoveStringLiteralDfa1_2(long active0)
		{
			try
			{
				curChar = input_stream.ReadChar();
			}
			catch (IOException)
			{
				return 1;
			}
			switch (curChar)
			{
				case 47:
				{
					if ((active0 & unchecked((long)(0x200L))) != 0L)
					{
						return JjStopAtPos(1, 9);
					}
					break;
				}

				default:
				{
					return 2;
				}
			}
			return 2;
		}

		internal static readonly int[] jjnextStates = new int[] { 1, 2 };

		public static readonly string[] jjstrLiteralImages = new string[] { string.Empty, 
			null, null, null, null, null, null, null, null, null, null, "\x9b\x9d\x90\xa5\x9a\x91"
			, "\x8f\x9a\x8d\xa3\xa3", "\x97\x9c\x8f\x9a\xa5\x90\x91", "\x8e\xab\xa4\x91", "\x8e\x9d\x9d\x9a\x91\x8d\x9c"
			, "\x97\x9c\xa4", "\x9a\x9d\x9c\x93", "\x92\x9a\x9d\x8d\xa4", "\x90\x9d\xa5\x8e\x9a\x91"
			, "\xa5\xa3\xa4\xa2\x97\x9c\x93", "\x8e\xa5\x92\x92\x91\xa2", "\xa6\x91\x8f\xa4\x9d\xa2"
			, "\x9b\x8d\xa0", "\xad", "\xaf", "\x4a", "\x4c", "\x49", "\x36", "\x38", null, 
			null };

		public static readonly string[] lexStateNames = new string[] { "DEFAULT", "WithinOneLineComment"
			, "WithinMultiLineComment" };

		public static readonly int[] jjnewLexState = new int[] { -1, -1, -1, -1, -1, 1, 0
			, -1, 2, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
			-1, -1, -1, -1, -1, -1 };

		internal static readonly long[] jjtoToken = new long[] { unchecked((long)(0x1fffff801L
			)) };

		internal static readonly long[] jjtoSkip = new long[] { unchecked((long)(0x37eL))
			 };

		internal static readonly long[] jjtoSpecial = new long[] { unchecked((long)(0x360L
			)) };

		internal static readonly long[] jjtoMore = new long[] { unchecked((long)(0x480L))
			 };

		protected internal SimpleCharStream input_stream;

		private readonly int[] jjrounds = new int[5];

		private readonly int[] jjstateSet = new int[10];

		internal StringBuilder image;

		internal int jjimageLen;

		internal int lengthOfMatch;

		protected internal char curChar;

		public RccTokenManager(SimpleCharStream stream)
		{
			input_stream = stream;
		}

		public RccTokenManager(SimpleCharStream stream, int lexState)
			: this(stream)
		{
			SwitchTo(lexState);
		}

		public virtual void ReInit(SimpleCharStream stream)
		{
			jjmatchedPos = jjnewStateCnt = 0;
			curLexState = defaultLexState;
			input_stream = stream;
			ReInitRounds();
		}

		private void ReInitRounds()
		{
			int i;
			jjround = unchecked((int)(0x80000001));
			for (i = 5; i-- > 0; )
			{
				jjrounds[i] = unchecked((int)(0x80000000));
			}
		}

		public virtual void ReInit(SimpleCharStream stream, int lexState)
		{
			ReInit(stream);
			SwitchTo(lexState);
		}

		public virtual void SwitchTo(int lexState)
		{
			if (lexState >= 3 || lexState < 0)
			{
				throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged."
					, TokenMgrError.InvalidLexicalState);
			}
			else
			{
				curLexState = lexState;
			}
		}

		protected internal virtual Token JjFillToken()
		{
			Token t = Token.NewToken(jjmatchedKind);
			t.kind = jjmatchedKind;
			string im = jjstrLiteralImages[jjmatchedKind];
			t.image = (im == null) ? input_stream.GetImage() : im;
			t.beginLine = input_stream.GetBeginLine();
			t.beginColumn = input_stream.GetBeginColumn();
			t.endLine = input_stream.GetEndLine();
			t.endColumn = input_stream.GetEndColumn();
			return t;
		}

		internal int curLexState = 0;

		internal int defaultLexState = 0;

		internal int jjnewStateCnt;

		internal int jjround;

		internal int jjmatchedPos;

		internal int jjmatchedKind;

		public virtual Token GetNextToken()
		{
			int kind;
			Token specialToken = null;
			Token matchedToken;
			int curPos = 0;
			for (; ; )
			{
				try
				{
					curChar = input_stream.BeginToken();
				}
				catch (IOException)
				{
					jjmatchedKind = 0;
					matchedToken = JjFillToken();
					matchedToken.specialToken = specialToken;
					return matchedToken;
				}
				image = null;
				jjimageLen = 0;
				for (; ; )
				{
					switch (curLexState)
					{
						case 0:
						{
							try
							{
								input_stream.Backup(0);
								while (curChar <= 32 && (unchecked((long)(0x100002600L)) & (1L << curChar)) != 0L
									)
								{
									curChar = input_stream.BeginToken();
								}
							}
							catch (IOException)
							{
								goto EOFLoop_continue;
							}
							jjmatchedKind = unchecked((int)(0x7fffffff));
							jjmatchedPos = 0;
							curPos = JjMoveStringLiteralDfa0_0();
							break;
						}

						case 1:
						{
							jjmatchedKind = unchecked((int)(0x7fffffff));
							jjmatchedPos = 0;
							curPos = JjMoveStringLiteralDfa0_1();
							if (jjmatchedPos == 0 && jjmatchedKind > 7)
							{
								jjmatchedKind = 7;
							}
							break;
						}

						case 2:
						{
							jjmatchedKind = unchecked((int)(0x7fffffff));
							jjmatchedPos = 0;
							curPos = JjMoveStringLiteralDfa0_2();
							if (jjmatchedPos == 0 && jjmatchedKind > 10)
							{
								jjmatchedKind = 10;
							}
							break;
						}
					}
					if (jjmatchedKind != unchecked((int)(0x7fffffff)))
					{
						if (jjmatchedPos + 1 < curPos)
						{
							input_stream.Backup(curPos - jjmatchedPos - 1);
						}
						if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 0x3f))) != 0L)
						{
							matchedToken = JjFillToken();
							matchedToken.specialToken = specialToken;
							if (jjnewLexState[jjmatchedKind] != -1)
							{
								curLexState = jjnewLexState[jjmatchedKind];
							}
							return matchedToken;
						}
						else
						{
							if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 0x3f))) != 0L)
							{
								if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 0x3f))) != 0L)
								{
									matchedToken = JjFillToken();
									if (specialToken == null)
									{
										specialToken = matchedToken;
									}
									else
									{
										matchedToken.specialToken = specialToken;
										specialToken = (specialToken.next = matchedToken);
									}
									SkipLexicalActions(matchedToken);
								}
								else
								{
									SkipLexicalActions(null);
								}
								if (jjnewLexState[jjmatchedKind] != -1)
								{
									curLexState = jjnewLexState[jjmatchedKind];
								}
								goto EOFLoop_continue;
							}
						}
						jjimageLen += jjmatchedPos + 1;
						if (jjnewLexState[jjmatchedKind] != -1)
						{
							curLexState = jjnewLexState[jjmatchedKind];
						}
						curPos = 0;
						jjmatchedKind = unchecked((int)(0x7fffffff));
						try
						{
							curChar = input_stream.ReadChar();
							continue;
						}
						catch (IOException)
						{
						}
					}
					int error_line = input_stream.GetEndLine();
					int error_column = input_stream.GetEndColumn();
					string error_after = null;
					bool EOFSeen = false;
					try
					{
						input_stream.ReadChar();
						input_stream.Backup(1);
					}
					catch (IOException)
					{
						EOFSeen = true;
						error_after = curPos <= 1 ? string.Empty : input_stream.GetImage();
						if (curChar == '\n' || curChar == '\r')
						{
							error_line++;
							error_column = 0;
						}
						else
						{
							error_column++;
						}
					}
					if (!EOFSeen)
					{
						input_stream.Backup(1);
						error_after = curPos <= 1 ? string.Empty : input_stream.GetImage();
					}
					throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after
						, curChar, TokenMgrError.LexicalError);
				}
EOFLoop_continue: ;
			}
EOFLoop_break: ;
		}

		internal virtual void SkipLexicalActions(Token matchedToken)
		{
			switch (jjmatchedKind)
			{
				default:
				{
					break;
				}
			}
		}
	}
}
